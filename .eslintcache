[{"/home/aren/Desktop/ypw/src/index.tsx":"1","/home/aren/Desktop/ypw/src/reportWebVitals.ts":"2","/home/aren/Desktop/ypw/src/App.tsx":"3","/home/aren/Desktop/ypw/src/layout/Base/index.tsx":"4","/home/aren/Desktop/ypw/src/pages/Apps/index.tsx":"5","/home/aren/Desktop/ypw/src/pages/ShareFolder/index.tsx":"6","/home/aren/Desktop/ypw/src/layout/Base/parts/Nav/index.tsx":"7","/home/aren/Desktop/ypw/src/pages/Users/index.tsx":"8","/home/aren/Desktop/ypw/src/pages/Disks/index.tsx":"9","/home/aren/Desktop/ypw/src/pages/Storage/index.tsx":"10","/home/aren/Desktop/ypw/src/pages/Parts/index.tsx":"11","/home/aren/Desktop/ypw/src/pages/ZFS/index.tsx":"12","/home/aren/Desktop/ypw/src/pages/Apps/style.ts":"13","/home/aren/Desktop/ypw/src/pages/Apps/model.ts":"14","/home/aren/Desktop/ypw/src/pages/ShareFolder/style.ts":"15","/home/aren/Desktop/ypw/src/pages/ShareFolder/model.ts":"16","/home/aren/Desktop/ypw/src/pages/Users/model.ts":"17","/home/aren/Desktop/ypw/src/pages/Users/style.ts":"18","/home/aren/Desktop/ypw/src/pages/Disks/model.ts":"19","/home/aren/Desktop/ypw/src/pages/Disks/style.ts":"20","/home/aren/Desktop/ypw/src/pages/Storage/model.ts":"21","/home/aren/Desktop/ypw/src/pages/Storage/style.ts":"22","/home/aren/Desktop/ypw/src/pages/Parts/model.ts":"23","/home/aren/Desktop/ypw/src/pages/ZFS/style.ts":"24","/home/aren/Desktop/ypw/src/pages/ZFS/model.ts":"25","/home/aren/Desktop/ypw/src/pages/Parts/style.ts":"26","/home/aren/Desktop/ypw/src/model/layout.ts":"27","/home/aren/Desktop/ypw/src/api/users.ts":"28","/home/aren/Desktop/ypw/src/api/apps.ts":"29","/home/aren/Desktop/ypw/src/api/share.ts":"30","/home/aren/Desktop/ypw/src/api/disks.ts":"31","/home/aren/Desktop/ypw/src/api/storage.ts":"32","/home/aren/Desktop/ypw/src/api/zfs.ts":"33","/home/aren/Desktop/ypw/src/components/AppCard/index.tsx":"34","/home/aren/Desktop/ypw/src/components/NewShareDialog/index.tsx":"35","/home/aren/Desktop/ypw/src/components/ListPage/index.tsx":"36","/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/index.tsx":"37","/home/aren/Desktop/ypw/src/components/NewUserDialog/index.tsx":"38","/home/aren/Desktop/ypw/src/components/ListItemDialog/index.tsx":"39","/home/aren/Desktop/ypw/src/config.ts":"40","/home/aren/Desktop/ypw/src/utils/request.ts":"41","/home/aren/Desktop/ypw/src/components/ListItemDialog/style.ts":"42","/home/aren/Desktop/ypw/src/components/NewUserDialog/style.ts":"43","/home/aren/Desktop/ypw/src/components/NewShareDialog/hook.ts":"44","/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/style.ts":"45","/home/aren/Desktop/ypw/src/components/ListPage/style.ts":"46","/home/aren/Desktop/ypw/src/components/NewShareDialog/style.ts":"47","/home/aren/Desktop/ypw/src/components/DiskSelectField/index.tsx":"48","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/index.tsx":"49","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/index.tsx":"50","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/index.tsx":"51","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/index.tsx":"52","/home/aren/Desktop/ypw/src/components/DiskSelectField/style.ts":"53","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/style.ts":"54","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/style.ts":"55","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/style.ts":"56","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/style.ts":"57","/home/aren/Desktop/ypw/src/components/UserSelectField/index.tsx":"58","/home/aren/Desktop/ypw/src/components/ValueField/index.tsx":"59","/home/aren/Desktop/ypw/src/components/ValueField/style.ts":"60","/home/aren/Desktop/ypw/src/components/UserSelectField/style.ts":"61","/home/aren/Desktop/ypw/src/layout/Blank/index.tsx":"62","/home/aren/Desktop/ypw/src/layout/Auth/index.tsx":"63","/home/aren/Desktop/ypw/src/pages/Login/index.tsx":"64","/home/aren/Desktop/ypw/src/pages/Login/style.ts":"65","/home/aren/Desktop/ypw/src/api/auth.ts":"66","/home/aren/Desktop/ypw/src/theme.ts":"67","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/index.tsx":"68","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/style.ts":"69","/home/aren/Desktop/ypw/src/model/user.ts":"70","/home/aren/Desktop/ypw/src/utils/app.ts":"71","/home/aren/Desktop/ypw/src/components/AppCard/style.ts":"72","/home/aren/Desktop/ypw/src/hooks/ContextMenu.ts":"73","/home/aren/Desktop/ypw/src/pages/Account/index.tsx":"74","/home/aren/Desktop/ypw/src/pages/Account/style.ts":"75","/home/aren/Desktop/ypw/src/components/InfoCard/index.tsx":"76","/home/aren/Desktop/ypw/src/components/InfoCard/style.ts":"77","/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/index.tsx":"78","/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/style.ts":"79","/home/aren/Desktop/ypw/src/api/account.ts":"80"},{"size":500,"mtime":1614998296833,"results":"81","hashOfConfig":"82"},{"size":425,"mtime":1614998296846,"results":"83","hashOfConfig":"82"},{"size":516,"mtime":1614998296815,"results":"84","hashOfConfig":"82"},{"size":1430,"mtime":1614998296834,"results":"85","hashOfConfig":"82"},{"size":1249,"mtime":1614998296837,"results":"86","hashOfConfig":"82"},{"size":2381,"mtime":1615994728817,"results":"87","hashOfConfig":"82"},{"size":6360,"mtime":1617440496420,"results":"88","hashOfConfig":"82"},{"size":2677,"mtime":1617440246913,"results":"89","hashOfConfig":"82"},{"size":1323,"mtime":1615994728821,"results":"90","hashOfConfig":"82"},{"size":3507,"mtime":1615994728757,"results":"91","hashOfConfig":"82"},{"size":1277,"mtime":1615994728785,"results":"92","hashOfConfig":"82"},{"size":7300,"mtime":1615994728805,"results":"93","hashOfConfig":"82"},{"size":242,"mtime":1614998296838,"results":"94","hashOfConfig":"82"},{"size":977,"mtime":1614998296838,"results":"95","hashOfConfig":"82"},{"size":524,"mtime":1614998296839,"results":"96","hashOfConfig":"82"},{"size":684,"mtime":1615994728793,"results":"97","hashOfConfig":"82"},{"size":632,"mtime":1615994728773,"results":"98","hashOfConfig":"82"},{"size":534,"mtime":1614998296840,"results":"99","hashOfConfig":"82"},{"size":442,"mtime":1615994728809,"results":"100","hashOfConfig":"82"},{"size":342,"mtime":1614998296841,"results":"101","hashOfConfig":"82"},{"size":762,"mtime":1615994728765,"results":"102","hashOfConfig":"82"},{"size":345,"mtime":1614998296844,"results":"103","hashOfConfig":"82"},{"size":676,"mtime":1615994728781,"results":"104","hashOfConfig":"82"},{"size":540,"mtime":1614998296843,"results":"105","hashOfConfig":"82"},{"size":763,"mtime":1615994728829,"results":"106","hashOfConfig":"82"},{"size":342,"mtime":1614998296842,"results":"107","hashOfConfig":"82"},{"size":841,"mtime":1617451009602,"results":"108","hashOfConfig":"82"},{"size":500,"mtime":1614998296815,"results":"109","hashOfConfig":"82"},{"size":1054,"mtime":1614998296815,"results":"110","hashOfConfig":"82"},{"size":576,"mtime":1614998296816,"results":"111","hashOfConfig":"82"},{"size":813,"mtime":1615031782224,"results":"112","hashOfConfig":"82"},{"size":690,"mtime":1614998296817,"results":"113","hashOfConfig":"82"},{"size":736,"mtime":1614998296816,"results":"114","hashOfConfig":"82"},{"size":3384,"mtime":1614998296818,"results":"115","hashOfConfig":"82"},{"size":4365,"mtime":1614998296821,"results":"116","hashOfConfig":"82"},{"size":641,"mtime":1614998296829,"results":"117","hashOfConfig":"82"},{"size":1948,"mtime":1614998296828,"results":"118","hashOfConfig":"82"},{"size":1956,"mtime":1614998296820,"results":"119","hashOfConfig":"82"},{"size":2006,"mtime":1614998296832,"results":"120","hashOfConfig":"82"},{"size":325,"mtime":1617455718579,"results":"121","hashOfConfig":"82"},{"size":605,"mtime":1614998296847,"results":"122","hashOfConfig":"82"},{"size":390,"mtime":1614998296832,"results":"123","hashOfConfig":"82"},{"size":329,"mtime":1614998296820,"results":"124","hashOfConfig":"82"},{"size":467,"mtime":1614998296825,"results":"125","hashOfConfig":"82"},{"size":533,"mtime":1614998296828,"results":"126","hashOfConfig":"82"},{"size":440,"mtime":1614998296830,"results":"127","hashOfConfig":"82"},{"size":518,"mtime":1614998296825,"results":"128","hashOfConfig":"82"},{"size":3355,"mtime":1614998296831,"results":"129","hashOfConfig":"82"},{"size":1361,"mtime":1614998296824,"results":"130","hashOfConfig":"82"},{"size":2748,"mtime":1614998296823,"results":"131","hashOfConfig":"82"},{"size":1804,"mtime":1614998296822,"results":"132","hashOfConfig":"82"},{"size":818,"mtime":1614998296821,"results":"133","hashOfConfig":"82"},{"size":463,"mtime":1614998296830,"results":"134","hashOfConfig":"82"},{"size":243,"mtime":1614998296821,"results":"135","hashOfConfig":"82"},{"size":317,"mtime":1614998296822,"results":"136","hashOfConfig":"82"},{"size":800,"mtime":1614998296823,"results":"137","hashOfConfig":"82"},{"size":271,"mtime":1614998296824,"results":"138","hashOfConfig":"82"},{"size":3020,"mtime":1614998296826,"results":"139","hashOfConfig":"82"},{"size":657,"mtime":1614998296827,"results":"140","hashOfConfig":"82"},{"size":361,"mtime":1614998296827,"results":"141","hashOfConfig":"82"},{"size":463,"mtime":1614998296826,"results":"142","hashOfConfig":"82"},{"size":2291,"mtime":1617448581898,"results":"143","hashOfConfig":"82"},{"size":374,"mtime":1614998296836,"results":"144","hashOfConfig":"82"},{"size":3051,"mtime":1614998296845,"results":"145","hashOfConfig":"82"},{"size":1215,"mtime":1614998296846,"results":"146","hashOfConfig":"82"},{"size":345,"mtime":1614998296817,"results":"147","hashOfConfig":"82"},{"size":329,"mtime":1614998296849,"results":"148","hashOfConfig":"82"},{"size":1658,"mtime":1614998296835,"results":"149","hashOfConfig":"82"},{"size":371,"mtime":1614998296835,"results":"150","hashOfConfig":"82"},{"size":1059,"mtime":1614998296848,"results":"151","hashOfConfig":"82"},{"size":195,"mtime":1614998296847,"results":"152","hashOfConfig":"82"},{"size":562,"mtime":1614998296819,"results":"153","hashOfConfig":"82"},{"size":811,"mtime":1617439977423,"results":"154","hashOfConfig":"82"},{"size":1917,"mtime":1617455734543,"results":"155","hashOfConfig":"82"},{"size":328,"mtime":1617450625164,"results":"156","hashOfConfig":"82"},{"size":746,"mtime":1617450664196,"results":"157","hashOfConfig":"82"},{"size":464,"mtime":1617450703800,"results":"158","hashOfConfig":"82"},{"size":1952,"mtime":1617455487598,"results":"159","hashOfConfig":"82"},{"size":197,"mtime":1617451780712,"results":"160","hashOfConfig":"82"},{"size":304,"mtime":1617455718575,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"1ftl189",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"164"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"164"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"164"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"164"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"164"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"190","usedDeprecatedRules":"164"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"164"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"164"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"164"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"164"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"164"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"164"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"164"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"164"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"164"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"164"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"164"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"164"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"164"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"164"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"164"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"164"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"164"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aren/Desktop/ypw/src/index.tsx",[],["346","347"],"/home/aren/Desktop/ypw/src/reportWebVitals.ts",[],"/home/aren/Desktop/ypw/src/App.tsx",[],"/home/aren/Desktop/ypw/src/layout/Base/index.tsx",["348","349"],"import * as React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport AppNavigation from \"./parts/Nav\";\nimport AuthLayout from \"../Auth\";\nimport AppToolbar from \"./parts/Tool\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        content: {\n            flexGrow: 1,\n            minHeight: \"100vh\",\n            paddingTop: theme.spacing(3),\n            backgroundColor: \"#EEEEEE\"\n        },\n    }),\n);\n\nconst BaseLayout = ({children}: { children: any }) => {\n    const classes = useStyles();\n    console.log(children)\n    return (\n        <AuthLayout>\n            <div className={classes.root}>\n                <CssBaseline/>\n                <AppBar position=\"fixed\" className={classes.appBar}>\n                  <AppToolbar />\n                </AppBar>\n\n                <AppNavigation/>\n                <main className={classes.content}>\n                    <Toolbar/>\n                    {children}\n                </main>\n            </div>\n        </AuthLayout>\n    );\n};\nexport default BaseLayout\n","/home/aren/Desktop/ypw/src/pages/Apps/index.tsx",["350","351","352"],"import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Grid, Typography} from \"@material-ui/core\";\nimport AppCard from \"../../components/AppCard\";\nimport useAppsPageModel from \"./model\";\nimport {App} from \"../../api/apps\";\nimport useStyles from \"./style\";\n\n\n\ninterface AppsPagePropsType {\n\n}\n\n\nexport default function AppsPage({}: AppsPagePropsType) {\n    const classes = useStyles();\n    const model = useAppsPageModel()\n    return (\n        <div className={classes.root}>\n            <Typography variant={\"h5\"}>\n                <Grid container spacing={2}>\n                    {model.appList.map((app: App) => (\n                        <Grid xs={2} item>\n                            <AppCard\n                                app={app}\n                                onStart={() => model.start(app.id)}\n                                onStop={() => model.stop(app.id)}\n                                enableAutoStart={() => model.addToAutoStart(app.id)}\n                                disableAutoStart={() => model.removeAutoStart(app.id)}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Typography>\n        </div>\n    );\n}\n","/home/aren/Desktop/ypw/src/pages/ShareFolder/index.tsx",["353","354","355"],"import React from \"react\";\nimport useStyles from \"./style\";\nimport useShareFoldersModel from \"./model\";\nimport {Avatar, Button, List, ListItem, ListItemAvatar, ListItemText, Typography} from \"@material-ui/core\";\nimport {Add, Folder, Person} from \"@material-ui/icons\";\nimport NewShareDialog from \"../../components/NewShareDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport layout from \"../../model/layout\";\n\nexport interface ShareFolderPropsType {\n\n}\n\nconst ShareFolder = ({}: ShareFolderPropsType) => {\n    const classes = useStyles()\n    const model = useShareFoldersModel()\n    const layoutModel = useLayoutModel()\n    const newShareSwitchHandler = layoutModel.getDialogSwitchHandler(\"newShare\")\n    return (\n        <div>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Folders\n            </Typography>\n            {\n                layoutModel.getDialogOpen(\"newShare\") &&\n                <NewShareDialog\n                    open={true}\n                    onClose={newShareSwitchHandler}\n                    onCreateShare={async (data) => {\n                        await model.createShare(data)\n                        newShareSwitchHandler()\n                    }}\n                />\n            }\n\n            <div className={classes.actions}>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<Add />}\n                    onClick={newShareSwitchHandler}\n                >\n                    New share folder\n                </Button>\n            </div>\n            <List>\n                {\n                    model.folders.map(it => {\n                        return (\n                            <ListItem key={it.part} button>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Folder />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it.part} secondary={it.part_name} />\n                            </ListItem>\n                        )\n                    })\n                }\n\n            </List>\n        </div>\n    )\n}\n\nexport default ShareFolder;\n","/home/aren/Desktop/ypw/src/layout/Base/parts/Nav/index.tsx",["356","357","358"],"/home/aren/Desktop/ypw/src/pages/Users/index.tsx",["359","360","361","362"],"/home/aren/Desktop/ypw/src/pages/Disks/index.tsx",["363","364"],"import React from \"react\";\nimport useDisksModel from \"./model\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography} from \"@material-ui/core\";\nimport {Storage, Store} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface DisksPagePropsType {\n\n}\n\nconst DisksPage = ({}: DisksPagePropsType) => {\n    const classes = useStyles()\n    const model = useDisksModel()\n    return (\n        <div>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Disks\n            </Typography>\n            <List>\n                {\n                    model.disks.map(it => {\n                        return (\n                            <ListItem key={it.name} button>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Storage />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it.name} secondary={it.model}/>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n        </div>\n    )\n}\n\nexport default DisksPage;\n","/home/aren/Desktop/ypw/src/pages/Storage/index.tsx",["365","366","367"],"import React, {useState} from \"react\";\nimport ListPage from \"../../components/ListPage\";\nimport useStorageModel from \"./model\";\nimport {\n    Avatar, Dialog,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText\n} from \"@material-ui/core\";\nimport {Archive, Delete} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport ListItemDialog from \"../../components/ListItemDialog\";\nimport {Storage} from \"../../api/storage\";\nimport useLayoutModel from \"../../model/layout\";\nimport layout from \"../../model/layout\";\nimport {useSnackbar} from \"notistack\";\n\nexport interface StoragePagePropsType {\n\n}\n\nconst StoragePage = ({}: StoragePagePropsType) => {\n    const storageModel = useStorageModel()\n    const layoutModel = useLayoutModel()\n    const classes = useStyles()\n    const { enqueueSnackbar } = useSnackbar();\n    const [contextStorage, setContextStorage] = useState<Storage>()\n    const switchDeleteConfirmDialog = layoutModel.getDialogSwitchHandler('deleteStorageConfirm')\n    const openDeleteDialog = (storage: Storage) => {\n        setContextStorage(storage)\n        switchDeleteConfirmDialog()\n    }\n    return (\n        <div>\n\n            <ListPage\n                title={\"Storages\"}\n                actions={<></>}\n            >\n                <>\n                <ListItemDialog\n                    primary={contextStorage?.id ?? \"unknown\"}\n                    icon={<Archive/>}\n                    onClose={switchDeleteConfirmDialog}\n                    title={\"Delete\"}\n                    onOk={async () => {\n                        if (contextStorage) {\n                            await storageModel.remove(contextStorage?.id)\n                            enqueueSnackbar(`storage ${contextStorage?.id} removed`,{variant:\"success\"})\n                        }\n                        switchDeleteConfirmDialog()\n                    }}\n                    open={layoutModel.getDialogOpen('deleteStorageConfirm')}\n                    secondary={contextStorage?.type ?? \"unknown\"}\n                    text={\"Remove action will remove all SHARE FOLDER in this storage!\"}\n                />\n                    <List className={classes.list}>\n                        {\n                            storageModel.storages.map(storage => {\n                                return (\n                                    <ListItem key={storage.id} button>\n                                        <ListItemAvatar>\n                                            <Avatar className={classes.avatar}>\n                                                <Archive/>\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText primary={storage.id} secondary={storage.type}/>\n                                        <ListItemSecondaryAction>\n                                            <IconButton onClick={() => openDeleteDialog(storage)}>\n                                                <Delete/>\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                )\n                            })\n                        }\n                    </List>\n                </>\n            </ListPage>\n        </div>\n    )\n}\n\nexport default StoragePage;\n","/home/aren/Desktop/ypw/src/pages/Parts/index.tsx",["368","369","370"],"﻿import React, {useEffect} from \"react\";\nimport usePartsPageModel from \"./model\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography} from \"@material-ui/core\";\nimport {Inbox} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface PartsPagePropsType {\n\n}\n\nconst PartsPage = ({}: PartsPagePropsType) => {\n    const model = usePartsPageModel()\n    const classes = useStyles()\n    useEffect(() => {\n        model.initData()\n    },[])\n    return (\n        <div>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Parts\n            </Typography>\n            <List>\n            {\n                model.parts.map(part => {\n                    return (\n                        <ListItem key={part.name} button>\n                            <ListItemAvatar>\n                                <Avatar className={classes.avatar}>\n                                    <Inbox />\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={part.name} secondary={part.fs_type}/>\n                        </ListItem>\n                    )\n                })\n            }\n            </List>\n        </div>\n    )\n}\n\nexport default PartsPage;\n","/home/aren/Desktop/ypw/src/pages/ZFS/index.tsx",["371"],"import React, {useState} from \"react\";\nimport {\n    Avatar,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Menu,\n    MenuItem\n} from \"@material-ui/core\";\nimport useZFSModel from \"./model\";\nimport {Add, Delete, Dns, MoreVert} from \"@material-ui/icons\";\nimport ListPage from \"../../components/ListPage\";\nimport CreateZFSPoolDialog from \"../../components/CreateZFSPoolDialog\";\nimport useStyles from \"./style\";\nimport useLayoutModel from \"../../model/layout\";\nimport ListItemDialog from \"../../components/ListItemDialog\";\nimport {ZFSPool} from \"../../api/zfs\";\nimport useStorageModel from \"../Storage/model\";\nimport {useSnackbar} from \"notistack\";\n\nexport interface ZFSPagePropsType {\n\n}\n\nconst ZFSPage = ({}: ZFSPagePropsType) => {\n    const zfsModel = useZFSModel()\n    const layoutModel = useLayoutModel()\n    const storageModel = useStorageModel()\n    const classes = useStyles()\n    const [moreMenuEl, setMoreMenuEl] = React.useState(null);\n    const createPoolDialogSwitchHandler = layoutModel.getDialogSwitchHandler(\"newZFSPool\")\n    const [contextPool, setContextPool] = useState<ZFSPool>()\n    const [deleteConfirmDialog, setDeleteConfirmDialog] = useState<{\n        name: string,\n        open: boolean\n    }>({name: \"\", open: false})\n    const {enqueueSnackbar} = useSnackbar();\n\n    const openDeleteConfirm = (name: string) => {\n        setDeleteConfirmDialog({\n            name,\n            open: true\n        })\n    }\n    const closeDeleteConfirm = () => {\n        setDeleteConfirmDialog({\n            ...deleteConfirmDialog,\n            open: false\n        })\n    }\n    const onRemoveHandler = async () => {\n        if (deleteConfirmDialog?.name) {\n            await zfsModel.removePool(deleteConfirmDialog.name)\n            enqueueSnackbar(\"delete success\", {variant: 'success'})\n            closeDeleteConfirm()\n        }\n    }\n    const handleMoreMenuClick = (event: any) => {\n        setMoreMenuEl(event.currentTarget);\n    };\n    const handleMoreMenuClose = () => {\n        setMoreMenuEl(null);\n    };\n    const asStorageSwitchHandler = layoutModel.getDialogSwitchHandler('poolAsStorageDialog')\n    return (\n        <ListPage\n            title={\"Pools\"}\n            actions={\n                <>\n                    <Button\n                        variant={\"contained\"}\n                        color={'secondary'}\n                        startIcon={<Add/>}\n                        onClick={createPoolDialogSwitchHandler}\n                    >New pool</Button>\n                </>\n            }\n        >\n            <>\n                <Menu\n                    anchorEl={moreMenuEl}\n                    keepMounted\n                    open={Boolean(moreMenuEl)}\n                    onClose={handleMoreMenuClose}\n                >\n                    <MenuItem onClick={() => {\n                        asStorageSwitchHandler()\n                        handleMoreMenuClose()\n                    }}>Use as storage</MenuItem>\n\n                </Menu>\n                <ListItemDialog\n                    primary={contextPool?.name ?? \"unknown\"}\n                    icon={<Dns/>}\n                    onClose={asStorageSwitchHandler}\n                    title={\"As storage\"}\n                    onOk={async () => {\n                        await storageModel.addStorage(`/${contextPool?.name}`, \"ZFSPool\")\n                        asStorageSwitchHandler()\n                        enqueueSnackbar(\"storage created\", {\n                            variant: 'success'\n                        })\n                    }}\n                    text={\"Use this pool to create new storage\"}\n                    open={layoutModel.getDialogOpen('poolAsStorageDialog')}\n                />\n                <CreateZFSPoolDialog\n                    open={layoutModel.getDialogOpen(\"newZFSPool\")}\n                    onClose={createPoolDialogSwitchHandler}\n                    onOk={async (form) => {\n                        await zfsModel.createPool({\n                            name: form.name,\n                            disks: form.disks.map(it => `/dev/${it}`)\n                        })\n                        enqueueSnackbar(\"create pool success\", {\n                            variant: 'success'\n                        })\n                        createPoolDialogSwitchHandler()\n                    }}\n                />\n                <Dialog open={Boolean(deleteConfirmDialog.open)} maxWidth={\"xl\"}>\n                    <DialogTitle>\n                        Remove\n                    </DialogTitle>\n                    <DialogContent className={classes.deleteDialogContent}>\n                        <DialogContentText>\n                            ALL DATA in pool will deleted,please confirm!\n                        </DialogContentText>\n                        <ListItem className={classes.deleteDialogItem}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <Dns/>\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={deleteConfirmDialog.name}/>\n                        </ListItem>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color={\"secondary\"} onClick={closeDeleteConfirm}>\n                            Cancel\n                        </Button>\n                        <Button color={\"secondary\"} onClick={onRemoveHandler}>\n                            Delete\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <List className={classes.list}>\n                    {\n                        zfsModel.pools.map(pool => {\n                            return (\n                                <ListItem key={pool.name} button>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <Dns/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText primary={pool.name}/>\n                                    <ListItemSecondaryAction>\n\n                                        <IconButton>\n                                            <Delete onClick={() => openDeleteConfirm(pool.name)}/>\n                                        </IconButton>\n                                        <IconButton onClick={(e) => {\n                                            setContextPool(pool)\n                                            handleMoreMenuClick(e)\n                                        }}>\n                                            <MoreVert/>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })\n                    }\n\n                </List>\n            </>\n        </ListPage>\n    )\n}\n\nexport default ZFSPage;\n","/home/aren/Desktop/ypw/src/pages/Apps/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Apps/model.ts",["372"],"import {createModel} from \"hox\";\nimport {useState} from \"react\";\nimport {App, fetchApps, removeAutoStart, setAutoStart, startApp, stopApp} from \"../../api/apps\";\nimport {useInterval} from \"ahooks\";\n\nconst AppsPageModel = () => {\n    const [appList,setAppList] = useState<App[]>([])\n    const loadApp = async () => {\n        const response = await fetchApps()\n        setAppList(response.apps)\n    }\n    useInterval(() => {\n        loadApp();\n    },1000)\n    const start = async (appId:string) => {\n        await startApp(appId)\n    }\n    const stop = async (appId:string) => {\n        await stopApp(appId)\n    }\n    const addToAutoStart = async (appId:string) => {\n        await setAutoStart(appId)\n    }\n    const removeFromAutoStart = async (appId:string) => {\n        await removeAutoStart(appId)\n    }\n    return {\n        appList,loadApp,start,stop,addToAutoStart,removeAutoStart\n    }\n}\nconst useAppsPageModel = createModel(AppsPageModel)\nexport default useAppsPageModel\n","/home/aren/Desktop/ypw/src/pages/ShareFolder/style.ts",[],"/home/aren/Desktop/ypw/src/pages/ShareFolder/model.ts",["373"],"import {getUserList} from \"../../api/users\";\nimport {useEffect, useState} from \"react\";\nimport {createModel} from \"hox\";\nimport {createNewShare, getShareList, ShareFolder} from \"../../api/share\";\n\nconst ShareFoldersModel = () => {\n    const [folders, setFolders] = useState<ShareFolder[]>([])\n    const initData = async () => {\n        const response = await getShareList()\n        setFolders(response.folders)\n    }\n    const createShare = async (data:any) => {\n        await createNewShare(data)\n        await initData()\n    }\n    useEffect(() => {\n        initData()\n    }, [])\n    return {\n        folders,createShare\n    }\n}\nconst useShareFoldersModel = createModel(ShareFoldersModel)\nexport default useShareFoldersModel\n","/home/aren/Desktop/ypw/src/pages/Users/model.ts",[],"/home/aren/Desktop/ypw/src/pages/Users/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Disks/model.ts",[],"/home/aren/Desktop/ypw/src/pages/Disks/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Storage/model.ts",[],"/home/aren/Desktop/ypw/src/pages/Storage/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Parts/model.ts",["374"],"import {createModel} from \"hox\";\nimport {fetchDisks, fetchParts, Part} from \"../../api/disks\";\nimport {useEffect, useState} from \"react\";\nconst targetFS = [\"ext4\",\"ntfs\"]\nconst PartsPageModel = () => {\n    const [parts, setParts] = useState<Part[]>([])\n    const initData = async () => {\n        let result: Part[] = await fetchParts()\n        if (!result) {\n            return\n        }\n        result = result.filter(part => {\n            return targetFS.find(it => it === part.fs_type) !== undefined\n        })\n        setParts(result)\n    }\n    useEffect(() => {\n        initData()\n    }, [])\n\n    return {\n        parts\n    }\n}\nconst usePartsPageModel = createModel(PartsPageModel)\nexport default usePartsPageModel\n","/home/aren/Desktop/ypw/src/pages/ZFS/style.ts",[],"/home/aren/Desktop/ypw/src/pages/ZFS/model.ts",[],"/home/aren/Desktop/ypw/src/pages/Parts/style.ts",[],"/home/aren/Desktop/ypw/src/model/layout.ts",[],"/home/aren/Desktop/ypw/src/api/users.ts",[],"/home/aren/Desktop/ypw/src/api/apps.ts",[],"/home/aren/Desktop/ypw/src/api/share.ts",["375"],"import apiRequest from \"../utils/request\";\nimport {ApplicationConfig} from \"../config\";\nimport {UserListResponse} from \"./users\";\nexport interface  ShareFolder {\n    part_name:string\n    part:string\n}\nexport interface FetchShareFoldersResponse {\n    folders:ShareFolder[]\n}\nexport const getShareList = async ():Promise<FetchShareFoldersResponse> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.share)\n}\n\nexport const createNewShare = async (data:any):Promise<void> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.share,{\n        data\n    })\n}\n","/home/aren/Desktop/ypw/src/api/disks.ts",[],"/home/aren/Desktop/ypw/src/api/storage.ts",[],"/home/aren/Desktop/ypw/src/api/zfs.ts",[],"/home/aren/Desktop/ypw/src/components/AppCard/index.tsx",["376","377","378","379"],"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {\n    Avatar,\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    IconButton,\n    Menu,\n    MenuItem,\n    Typography\n} from \"@material-ui/core\";\nimport {Apps, MoreVert} from \"@material-ui/icons\";\nimport {App} from \"../../api/apps\";\nimport {getAppIconUrl} from \"../../utils/app\";\nimport useStyles from \"./style\";\n\n\n\ninterface AppCardPropsType {\n    app: App\n    onStart?: () => void\n    onStop?: () => void\n    enableAutoStart?: () => void\n    disableAutoStart?: () => void\n}\n\n\nexport default function AppCard({app, onStart, onStop, enableAutoStart, disableAutoStart}: AppCardPropsType) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    const renderMenu = () => {\n        return (\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {\n                    app.auto_start ?\n                        <MenuItem\n                            onClick={() => {\n                                if (disableAutoStart){\n                                    disableAutoStart()\n                                }\n                                handleClose()\n                            }}\n                        >\n                            Disable autostart\n                        </MenuItem>\n                        :\n                        <MenuItem\n                            onClick={\n                                () => {\n                                    if (enableAutoStart) {\n                                        enableAutoStart()\n                                    }\n                                    handleClose()\n                                }\n                            }\n                        >\n                            Enable autostart\n                        </MenuItem>\n                }\n            </Menu>\n        )\n    }\n    return (\n        <Card className={classes.main}>\n            {renderMenu()}\n            <CardContent>\n                <div className={classes.header}>\n                    <Avatar className={classes.icon}>\n                        <img src={getAppIconUrl(app.id)} className={classes.appicon}  />\n                    </Avatar>\n                    <div className={classes.title}>\n                        {app.name}\n                    </div>\n                    <IconButton onClick={handleClick}>\n                        <MoreVert/>\n                    </IconButton>\n                </div>\n\n                <div className={classes.status}>\n                    {app.status}\n                </div>\n            </CardContent>\n            <CardActions>\n                {\n                    app.status === \"Stop\" &&\n                    <Button size=\"small\" onClick={onStart}>Start</Button>\n                }\n                {\n                    app.status === \"Running\" &&\n                    <Button size=\"small\" onClick={onStop}>Stop</Button>\n                }\n            </CardActions>\n        </Card>\n    );\n}\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/index.tsx",["380","381"],"import React, {useState} from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogProps,\n    DialogTitle,\n    Step,\n    StepLabel,\n    Stepper\n} from \"@material-ui/core\";\nimport useStyles from \"./style\";\nimport ShareInfoStep, {InfoForm} from \"./step/info\";\nimport StorageStep from \"./step/storage\";\nimport {Part} from \"../../api/disks\";\nimport UsersStep, {UsersForm} from \"./step/users\";\nimport CompleteStep from \"./step/complete\";\nimport {useForm} from \"./hook\";\nimport {Storage} from \"../../api/storage\";\n\nexport interface NewShareDialogPropsType {\n    onCreateShare:(data:any) => void\n}\nconst steps = [\n    \"info\",\"storage\",\"users\",\"complete\"\n]\nconst NewShareDialog = ({onCreateShare ,...other}: NewShareDialogPropsType & DialogProps) => {\n    const [index, setIndex] = useState<number>(0)\n    const [selectStorage,setSelectStorage] = useState<Storage | undefined>()\n    const usersFormController = useForm<UsersForm>({\n        useValidateUsers:false,\n        useWriteUsers:false,\n        folderPublic:true\n    })\n    const infoForm = useForm<InfoForm>({})\n    const classes = useStyles()\n    const renderStepContent = () => {\n        switch (index) {\n            case 0:\n                return <ShareInfoStep controller={infoForm}/>\n            case 1:\n                return <StorageStep selectedStorage={selectStorage} onSelect={(part) => setSelectStorage(part)} />\n            case 2:\n                return <UsersStep controller={usersFormController}/>\n            case 3:\n                return <CompleteStep\n                    name={infoForm.form.name}\n                    access={usersFormController.form.folderPublic ? \"Allow guest\" : \"Not allow guest\"}\n                    storage={selectStorage?.id}\n                    validateUsers={\n                        usersFormController.form.useValidateUsers && usersFormController.form.validateUsers ?\n                        usersFormController.form.validateUsers?.join(\",\") : \"disable\"\n                    }\n                    writeUsers={\n                        usersFormController.form.useWriteUsers && usersFormController.form.writeUsers ?\n                        usersFormController.form.writeUsers?.join(\",\") : 'disable'\n                    }\n                />\n            default:\n                return (<></>)\n        }\n    }\n    const validate = () => {\n        if (\n            infoForm.form.name === undefined ||\n            selectStorage == undefined\n        ){\n            return false\n        }\n        return true\n    }\n    const onCreate = () => {\n        if (!validate()){\n            return\n        }\n        const data = {\n            name:infoForm.form.name,\n            public:usersFormController.form.folderPublic,\n            valid_users:usersFormController.form.validateUsers,\n            write_list:usersFormController.form.writeUsers,\n            storageId:selectStorage?.id\n        }\n        onCreateShare(data)\n\n    }\n    return (\n        <Dialog {...other}>\n            <DialogTitle>\n                New Share\n                <Stepper activeStep={index} className={classes.stepper}>\n                    {\n                        steps.map((label,index) => {\n                            return (\n                                <Step key={index}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            )\n                        })\n                    }\n                </Stepper>\n            </DialogTitle>\n            <DialogContent className={classes.content}>\n\n                <div className={classes.stepContent}>\n                    {renderStepContent()}\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={index < 1}\n                    onClick={() => setIndex(index - 1)}\n                >Previous</Button>\n                {\n                    index === steps.length - 1 && <Button onClick={() => onCreate()}>Create</Button>\n                }\n                {\n                    index !== steps.length - 1 && <Button\n                        onClick={() => setIndex(index + 1)}\n                    >\n                        Next\n                    </Button>\n                }\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default NewShareDialog;\n","/home/aren/Desktop/ypw/src/components/ListPage/index.tsx",[],"/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/NewUserDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/ListItemDialog/index.tsx",["382"],"import React, {ReactElement} from \"react\";\nimport {\n    Avatar, Button, Dialog, DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    ListItem,\n    ListItemAvatar,\n    ListItemText\n} from \"@material-ui/core\";\nimport {Dns} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface ListItemDialogPropsType {\n    open?: boolean\n    primary: string\n    secondary?: string\n    icon: ReactElement,\n    onClose: () => void\n    title: string\n    onOk: () => void\n    okText?: string,\n    text?:string\n}\n\nconst ListItemDialog = ({\n                            primary,\n                            icon,\n                            secondary,\n                            onOk,\n                            onClose,\n                            title,\n    text,\n                            okText = \"OK\",\n                            open = false\n                        }: ListItemDialogPropsType) => {\n    const classes = useStyles()\n    return (\n        <Dialog open={open} maxWidth={\"xl\"} onClose={onClose}>\n            <DialogTitle>\n                {title}\n            </DialogTitle>\n            <DialogContent className={classes.deleteDialogContent}>\n                <DialogContentText>\n                    {text}\n                </DialogContentText>\n                <ListItem className={classes.deleteDialogItem}>\n                    <ListItemAvatar>\n                        <Avatar>\n                            {icon}\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={primary} secondary={secondary}/>\n                </ListItem>\n            </DialogContent>\n            <DialogActions>\n                <Button color={\"secondary\"} onClick={onClose}>\n                    Cancel\n                </Button>\n                <Button color={\"secondary\"} onClick={onOk}>\n                    {okText}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default ListItemDialog;\n","/home/aren/Desktop/ypw/src/config.ts",[],"/home/aren/Desktop/ypw/src/utils/request.ts",["383"],"import { extend } from 'umi-request'\nimport { ApplicationConfig } from '../config'\n\nconst apiRequest = extend({\n  timeout: 2000,\n  credentials: 'omit'\n})\napiRequest.interceptors.request.use((url,options) => {\n  const token = localStorage.getItem(\"token\")\n  const apiUrl = localStorage.getItem(\"apiUrl\")\n  console.log(url)\n  console.log(apiUrl)\n  if (apiUrl) {\n    url  = apiUrl + url\n  }\n  console.log(url)\n  // console.log(url)\n  if (token) {\n    options.headers = {\n      ...options.headers,\n      \"Authorization\" :`Bearer ${token}`\n    }\n  }\n  return {\n    url,options\n  }\n})\nexport default apiRequest\n","/home/aren/Desktop/ypw/src/components/ListItemDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewUserDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/hook.ts",["384"],"import {useState} from \"react\";\nimport {UsersForm } from \"./step/users\";\n\nexport interface FormController<T> {\n    form: T\n    updateValue: (values: any) => void\n}\n\nexport const useForm = <T>(init:T): FormController<T> => {\n    const [form, setForm] = useState<T>(init)\n\n    const updateValue = (values: any) => {\n        console.log(values)\n        setForm({\n            ...form,\n            ...values\n        })\n    }\n    return {\n        form, updateValue\n    }\n}\n","/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/ListPage/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/DiskSelectField/index.tsx",["385","386"],"import React, {useEffect, useState} from \"react\";\nimport {useDynamicList} from \"ahooks\";\nimport {Chip, IconButton, MenuItem, Select, Typography} from \"@material-ui/core\";\nimport {Add, Storage} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport {Disk} from \"../../api/disks\";\nimport filesize from \"filesize\";\n\nexport interface DiskSelectFieldPropsType {\n    disks?:Disk[]\n    onChange?: (disks : Disk[]) => void\n    initValue?:Disk[]\n}\n\nconst DiskSelectField = ({onChange,disks = [],initValue = []}: DiskSelectFieldPropsType) => {\n    const disksController = useDynamicList<Disk>(initValue);\n\n    const getSelectOption = ():Disk[] => {\n        return disks.filter(it => disksController.list.find(selected => selected.name === it.name) === undefined)\n    }\n    const classes = useStyles()\n    const [diskSelect,setDiskSelect] = useState<string | undefined>(getSelectOption().length > 0?getSelectOption()[0].name:undefined)\n    useEffect(() => {\n        if (onChange) {\n            onChange(disksController.list)\n        }\n    },[disksController.list])\n\n    return (\n        <div>\n            <div>\n                {\n                    disksController.list.map(it => {\n                        return (\n                            <Chip\n                                label={`${it.model} | ${it.name} | ${filesize(Number(it.size))}`}\n                                key={it.name}\n                                className={classes.chip}\n                                color={'primary'}\n                                icon={<Storage />}\n                                onDelete={() => {\n                                    const index = disksController.list.indexOf(it)\n                                    if (index !== -1) {\n                                        disksController.remove(index)\n                                    }\n                                }}\n                            />\n                        )\n                    })\n                }\n            </div>\n            <div className={classes.addAction}>\n\n                <Select\n                    variant={\"outlined\"}\n                    value={diskSelect}\n                    size={\"small\"}\n                    onChange={(e) => setDiskSelect(e.target.value)}\n                    displayEmpty={true}\n                >\n                    {\n                        getSelectOption().map(disk => {\n                            return (\n                                <MenuItem value={disk.name}>{`${disk.model} | ${disk.name} | ${filesize(Number(disk.size))}`}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n                <IconButton\n                    className={classes.addButton}\n                    size={\"small\"}\n                    onClick={() => {\n                        if (diskSelect && disksController.list.find(it => it.name ===  diskSelect) === undefined){\n                            const target = disks.find(it => it.name ===  diskSelect)\n                            if (target) {\n                                disksController.push(target)\n                            }\n                        }\n                    }}\n                >\n                    <Add />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default DiskSelectField;\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/index.tsx",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/index.tsx",["387","388"],"import React, {useEffect, useState} from \"react\";\nimport useStyles from \"./style\";\nimport {Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport useUsersModel from \"../../../../pages/Users/model\";\nimport UserSelectField from \"../../../UserSelectField\";\nimport clsx from \"clsx\";\nimport {FormController} from \"../../hook\";\n\nexport interface UsersForm {\n    folderPublic: boolean\n    validateUsers?: string[]\n    writeUsers?: string[]\n    useValidateUsers: boolean\n    useWriteUsers: boolean\n}\n\nexport interface UsersStepPropsType {\n    controller: FormController<UsersForm>\n}\n\nconst UsersStep = ({controller}: UsersStepPropsType) => {\n    const classes = useStyles()\n    const userModel = useUsersModel()\n    return (\n        <div>\n            <div className={classes.field}>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            name=\"checkedB\"\n                            color=\"primary\"\n                            size={\"small\"}\n                            checked={controller.form.folderPublic}\n                            onChange={(e) => controller.updateValue({folderPublic: e.target.checked})}\n                        />\n                    }\n                    label=\"Allow guest\"\n                />\n            </div>\n            <div className={clsx(classes.field, classes.fieldArea)}>\n                <div className={classes.label}>\n                    <Checkbox\n                        size={\"small\"}\n                        checked={controller.form.useValidateUsers}\n                        onChange={(e) => controller.updateValue({useValidateUsers: e.target.checked})}\n                    />\n                    validate users\n                </div>\n                <UserSelectField\n                    users={userModel.users}\n                    onChange={(users) => controller.updateValue({validateUsers: users})}\n                    initValue={controller.form.validateUsers}\n                />\n            </div>\n            <div className={clsx(classes.field, classes.fieldArea)}>\n                <div className={classes.label}>\n                    <Checkbox\n                        size={\"small\"}\n                        checked={controller.form.useWriteUsers}\n                        onChange={(e) => controller.updateValue({useWriteUsers: e.target.checked})}\n                    />\n                    write user\n                </div>\n                <UserSelectField\n                    users={userModel.users}\n                    onChange={(users) => controller.updateValue({writeUsers: users})}\n                    initValue={controller.form.writeUsers}\n                />\n            </div>\n\n        </div>\n    )\n}\n\nexport default UsersStep;\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/index.tsx",["389","390","391","392"],"import React, {useEffect, useState} from \"react\";\nimport {fetchParts, Part} from \"../../../../api/disks\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText} from \"@material-ui/core\";\nimport {Inbox} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport usePartsPageModel from \"../../../../pages/Parts/model\";\nimport useStorageModel from \"../../../../pages/Storage/model\";\nimport {Storage} from \"../../../../api/storage\";\n\nexport interface StorageStepPropsType {\n    selectedStorage?:Storage\n    onSelect:(storage:Storage) => void\n}\nconst StorageStep = ({onSelect,selectedStorage}: StorageStepPropsType) => {\n    const classes = useStyles()\n    const partsModel = usePartsPageModel()\n    const storageModel = useStorageModel()\n    useEffect(() => {\n\n    },[])\n    return (\n        <div className={classes.root}>\n\n            <List>\n                {\n                    storageModel.storages.map(storage => {\n                        return (\n                            <ListItem\n                                key={storage.id}\n                                button\n                                selected={selectedStorage?.id === storage.id}\n                                onClick={() => onSelect(storage)}\n                            >\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Inbox />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={storage.id} secondary={storage.type}/>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n        </div>\n    )\n}\n\nexport default StorageStep;\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/index.tsx",[],"/home/aren/Desktop/ypw/src/components/DiskSelectField/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/style.ts",[],"/home/aren/Desktop/ypw/src/components/UserSelectField/index.tsx",["393"],"import React, {useEffect, useState} from \"react\";\nimport {useDynamicList} from \"ahooks\";\nimport {Chip, IconButton, MenuItem, Select} from \"@material-ui/core\";\nimport {Add, Person} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface UserSelectFieldPropsType {\n    users?:string[]\n    onChange?: (users : string[]) => void\n    initValue?:string[]\n}\n\nconst UserSelectField = ({onChange,users = [],initValue = []}: UserSelectFieldPropsType) => {\n    const classes = useStyles()\n    const usersController = useDynamicList<string>(initValue);\n    const [userSelect,setUserSelect] = useState<string | undefined>()\n    useEffect(() => {\n        if (onChange) {\n            onChange(usersController.list)\n        }\n    },[usersController.list])\n    return (\n        <div>\n            <div>\n                {\n                    usersController.list.map(it => {\n                        return (\n                            <Chip\n                                label={it}\n                                key={it}\n                                className={classes.chip}\n                                color={'primary'}\n                                size=\"small\"\n                                icon={<Person />}\n                                onDelete={() => {\n                                    const index = usersController.list.indexOf(it)\n                                    if (index !== -1) {\n                                        usersController.remove(index)\n                                    }\n                                }}\n                            />\n                        )\n                    })\n                }\n            </div>\n            <div className={classes.addAction}>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    variant={\"outlined\"}\n                    size={\"small\"}\n                    fullWidth\n                    value={userSelect}\n                    onChange={(e) => setUserSelect(e.target.value)}\n                >\n                    {\n                        users.filter(it => usersController.list.find(selected => selected === it) === undefined).map(user => {\n                            return (\n                                <MenuItem value={user}>{user}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n                <IconButton\n                    className={classes.addButton}\n                    size={\"small\"}\n                    onClick={() => {\n                        if (userSelect && usersController.list.find(it => it ===  userSelect) === undefined){\n                            usersController.push(userSelect)\n                            setUserSelect(undefined)\n                        }\n                    }}\n                >\n                    <Add />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default UserSelectField;\n","/home/aren/Desktop/ypw/src/components/ValueField/index.tsx",[],"/home/aren/Desktop/ypw/src/components/ValueField/style.ts",[],"/home/aren/Desktop/ypw/src/components/UserSelectField/style.ts",[],"/home/aren/Desktop/ypw/src/layout/Blank/index.tsx",["394","395","396"],"/home/aren/Desktop/ypw/src/layout/Auth/index.tsx",[],"/home/aren/Desktop/ypw/src/pages/Login/index.tsx",["397","398"],"import useStyles from \"./style\";\nimport {Button, Paper, TextField} from \"@material-ui/core\";\nimport useUserModel from \"../../model/user\";\nimport {useState} from \"react\";\nimport {useSnackbar} from \"notistack\";\nimport {useHistory} from \"react-router-dom\";\nimport {useLocalStorageState} from \"ahooks\";\n\nexport interface LoginPagePropsType {\n\n}\n\nconst LoginPage = ({}: LoginPagePropsType) => {\n    const history = useHistory()\n    const {enqueueSnackbar} = useSnackbar();\n    const [username, setUsername] = useState<string | undefined>()\n    const [password, setPassword] = useState<string | undefined>()\n    const [serviceUrl,setServiceUrl] = useState<string | undefined>(\"http://localhost:8999\")\n    const classes = useStyles()\n    const model = useUserModel()\n    const onLoginClick = async () => {\n        if (username && password && serviceUrl) {\n            localStorage.setItem(\"apiUrl\",serviceUrl)\n            const result = await model.login(username, password)\n            console.log(result)\n            if (result.success) {\n                enqueueSnackbar(\"Login success\", {variant: 'success'})\n                history.replace(\"/\")\n            } else {\n                enqueueSnackbar(`Login failed:${result.message}`, {variant: 'error'})\n            }\n        }\n    }\n    return (\n        <div className={classes.root}>\n\n            <Paper className={classes.loginContainer}>\n                <div className={classes.loginHeader}>\n                    <div className={classes.title}>\n                        YouPlus\n                    </div>\n                    <div className={classes.sub}>\n                        ProjectXPolaris\n                    </div>\n                </div>\n                <div className={classes.loginForm}>\n                    <TextField\n                        label={\"ServiceUrl\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        value={serviceUrl}\n                        className={classes.input}\n                        onChange={(e) => setServiceUrl(e.target.value)}\n                    />\n                    <TextField\n                        label={\"Username\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        value={username}\n                        className={classes.input}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <TextField\n                        label={\"Password\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        className={classes.input}\n                        type={\"password\"}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <Button variant={'contained'} fullWidth className={classes.loginBtn} onClick={onLoginClick}>Login\n                        in </Button>\n                </div>\n            </Paper>\n        </div>\n    )\n}\n\nexport default LoginPage;","/home/aren/Desktop/ypw/src/pages/Login/style.ts",[],"/home/aren/Desktop/ypw/src/api/auth.ts",[],"/home/aren/Desktop/ypw/src/theme.ts",["399","400"],"import {createMuiTheme} from '@material-ui/core/styles';\nimport {blue, green, indigo, yellow} from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: green[700],\n        },\n        secondary: {\n            main: yellow[800],\n        },\n\n    },\n});\nexport default theme","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/index.tsx",["401","402","403","404"],"import Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport * as React from \"react\";\nimport useStyles from \"./style\";\nimport {Avatar, ButtonBase, Menu, MenuItem} from \"@material-ui/core\";\nimport {Person} from \"@material-ui/icons\";\nimport useUserModel from \"../../../../model/user\";\nimport {useHistory} from \"react-router-dom\";\n\nexport interface AppToolbarPropsType {\n\n}\n\nconst AppToolbar = ({}: AppToolbarPropsType) => {\n    const classes = useStyles()\n    const [userMenuEl, setUserMenuEl] = React.useState(null);\n    const userModel = useUserModel()\n    const history = useHistory()\n    const handleUserMenuClick = (event:any) => {\n        setUserMenuEl(event.currentTarget);\n    };\n\n    const handleUserMenuClose = () => {\n        setUserMenuEl(null);\n    };\n    return (\n        <Toolbar>\n            <Menu\n                anchorEl={userMenuEl}\n                keepMounted\n                open={Boolean(userMenuEl)}\n                onClose={handleUserMenuClose}\n            >\n                <MenuItem onClick={() => {\n                    handleUserMenuClose()\n                    userModel.logout()\n                    history.replace(\"/login\")\n                }}>Logout</MenuItem>\n            </Menu>\n            <Typography variant=\"h6\" noWrap component=\"div\" className={classes.title}>\n                YouPlus\n            </Typography>\n            <Avatar className={classes.avatar} onClick={handleUserMenuClick}>\n                {userModel.username?userModel.username[0]:\"\"}\n            </Avatar>\n        </Toolbar>\n    )\n}\n\nexport default AppToolbar;","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/style.ts",[],"/home/aren/Desktop/ypw/src/model/user.ts",[],"/home/aren/Desktop/ypw/src/utils/app.ts",[],"/home/aren/Desktop/ypw/src/components/AppCard/style.ts",[],"/home/aren/Desktop/ypw/src/hooks/ContextMenu.ts",[],"/home/aren/Desktop/ypw/src/pages/Account/index.tsx",["405"],"/home/aren/Desktop/ypw/src/pages/Account/style.ts",[],"/home/aren/Desktop/ypw/src/components/InfoCard/index.tsx",[],"/home/aren/Desktop/ypw/src/components/InfoCard/style.ts",[],"/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/style.ts",[],"/home/aren/Desktop/ypw/src/api/account.ts",[],{"ruleId":"406","replacedBy":"407"},{"ruleId":"408","replacedBy":"409"},{"ruleId":"410","severity":1,"message":"411","line":6,"column":8,"nodeType":"412","messageId":"413","endLine":6,"endColumn":18},{"ruleId":"410","severity":1,"message":"414","line":11,"column":7,"nodeType":"412","messageId":"413","endLine":11,"endColumn":18},{"ruleId":"410","severity":1,"message":"415","line":1,"column":16,"nodeType":"412","messageId":"413","endLine":1,"endColumn":25},{"ruleId":"410","severity":1,"message":"416","line":2,"column":9,"nodeType":"412","messageId":"413","endLine":2,"endColumn":19},{"ruleId":"417","severity":1,"message":"418","line":16,"column":34,"nodeType":"419","messageId":"420","endLine":16,"endColumn":55},{"ruleId":"410","severity":1,"message":"421","line":5,"column":22,"nodeType":"412","messageId":"413","endLine":5,"endColumn":28},{"ruleId":"410","severity":1,"message":"422","line":8,"column":8,"nodeType":"412","messageId":"413","endLine":8,"endColumn":14},{"ruleId":"417","severity":1,"message":"418","line":14,"column":22,"nodeType":"419","messageId":"420","endLine":14,"endColumn":46},{"ruleId":"410","severity":1,"message":"423","line":9,"column":73,"nodeType":"412","messageId":"413","endLine":9,"endColumn":78},{"ruleId":"410","severity":1,"message":"424","line":9,"column":80,"nodeType":"412","messageId":"413","endLine":9,"endColumn":89},{"ruleId":"417","severity":1,"message":"418","line":34,"column":39,"nodeType":"419","messageId":"420","endLine":34,"endColumn":65},{"ruleId":"410","severity":1,"message":"425","line":10,"column":19,"nodeType":"412","messageId":"413","endLine":10,"endColumn":23},{"ruleId":"417","severity":1,"message":"418","line":22,"column":20,"nodeType":"419","messageId":"420","endLine":22,"endColumn":42},{"ruleId":"410","severity":1,"message":"426","line":26,"column":11,"nodeType":"412","messageId":"413","endLine":26,"endColumn":26},{"ruleId":"427","severity":1,"message":"428","line":30,"column":8,"nodeType":"429","endLine":30,"endColumn":10,"suggestions":"430"},{"ruleId":"410","severity":1,"message":"423","line":4,"column":18,"nodeType":"412","messageId":"413","endLine":4,"endColumn":23},{"ruleId":"417","severity":1,"message":"418","line":11,"column":20,"nodeType":"419","messageId":"420","endLine":11,"endColumn":42},{"ruleId":"410","severity":1,"message":"431","line":5,"column":13,"nodeType":"412","messageId":"413","endLine":5,"endColumn":19},{"ruleId":"410","severity":1,"message":"422","line":18,"column":8,"nodeType":"412","messageId":"413","endLine":18,"endColumn":14},{"ruleId":"417","severity":1,"message":"418","line":25,"column":22,"nodeType":"419","messageId":"420","endLine":25,"endColumn":46},{"ruleId":"432","severity":1,"message":"433","line":1,"column":1,"nodeType":"434","messageId":"420","fix":"435"},{"ruleId":"417","severity":1,"message":"418","line":11,"column":20,"nodeType":"419","messageId":"420","endLine":11,"endColumn":42},{"ruleId":"427","severity":1,"message":"436","line":16,"column":7,"nodeType":"429","endLine":16,"endColumn":9,"suggestions":"437"},{"ruleId":"417","severity":1,"message":"418","line":34,"column":18,"nodeType":"419","messageId":"420","endLine":34,"endColumn":38},{"ruleId":"410","severity":1,"message":"438","line":24,"column":11,"nodeType":"412","messageId":"413","endLine":24,"endColumn":30},{"ruleId":"410","severity":1,"message":"439","line":1,"column":9,"nodeType":"412","messageId":"413","endLine":1,"endColumn":20},{"ruleId":"410","severity":1,"message":"440","line":2,"column":9,"nodeType":"412","messageId":"413","endLine":2,"endColumn":19},{"ruleId":"410","severity":1,"message":"441","line":3,"column":9,"nodeType":"412","messageId":"413","endLine":3,"endColumn":25},{"ruleId":"410","severity":1,"message":"416","line":2,"column":9,"nodeType":"412","messageId":"413","endLine":2,"endColumn":19},{"ruleId":"410","severity":1,"message":"411","line":12,"column":5,"nodeType":"412","messageId":"413","endLine":12,"endColumn":15},{"ruleId":"410","severity":1,"message":"442","line":14,"column":9,"nodeType":"412","messageId":"413","endLine":14,"endColumn":13},{"ruleId":"443","severity":1,"message":"444","line":85,"column":25,"nodeType":"445","endLine":85,"endColumn":89},{"ruleId":"410","severity":1,"message":"446","line":16,"column":9,"nodeType":"412","messageId":"413","endLine":16,"endColumn":13},{"ruleId":"447","severity":1,"message":"448","line":67,"column":27,"nodeType":"449","messageId":"420","endLine":67,"endColumn":29},{"ruleId":"410","severity":1,"message":"450","line":11,"column":9,"nodeType":"412","messageId":"413","endLine":11,"endColumn":12},{"ruleId":"410","severity":1,"message":"451","line":2,"column":10,"nodeType":"412","messageId":"413","endLine":2,"endColumn":27},{"ruleId":"410","severity":1,"message":"452","line":2,"column":9,"nodeType":"412","messageId":"413","endLine":2,"endColumn":18},{"ruleId":"410","severity":1,"message":"411","line":3,"column":45,"nodeType":"412","messageId":"413","endLine":3,"endColumn":55},{"ruleId":"427","severity":1,"message":"453","line":27,"column":7,"nodeType":"429","endLine":27,"endColumn":29,"suggestions":"454"},{"ruleId":"410","severity":1,"message":"415","line":1,"column":16,"nodeType":"412","messageId":"413","endLine":1,"endColumn":25},{"ruleId":"410","severity":1,"message":"455","line":1,"column":27,"nodeType":"412","messageId":"413","endLine":1,"endColumn":35},{"ruleId":"410","severity":1,"message":"455","line":1,"column":27,"nodeType":"412","messageId":"413","endLine":1,"endColumn":35},{"ruleId":"410","severity":1,"message":"456","line":2,"column":9,"nodeType":"412","messageId":"413","endLine":2,"endColumn":19},{"ruleId":"410","severity":1,"message":"446","line":2,"column":21,"nodeType":"412","messageId":"413","endLine":2,"endColumn":25},{"ruleId":"410","severity":1,"message":"457","line":16,"column":11,"nodeType":"412","messageId":"413","endLine":16,"endColumn":21},{"ruleId":"427","severity":1,"message":"453","line":21,"column":7,"nodeType":"429","endLine":21,"endColumn":29,"suggestions":"458"},{"ruleId":"410","severity":1,"message":"459","line":1,"column":8,"nodeType":"412","messageId":"413","endLine":1,"endColumn":21},{"ruleId":"410","severity":1,"message":"460","line":2,"column":8,"nodeType":"412","messageId":"413","endLine":2,"endColumn":15},{"ruleId":"417","severity":1,"message":"418","line":20,"column":22,"nodeType":"419","messageId":"420","endLine":20,"endColumn":46},{"ruleId":"410","severity":1,"message":"461","line":7,"column":9,"nodeType":"412","messageId":"413","endLine":7,"endColumn":29},{"ruleId":"417","severity":1,"message":"418","line":13,"column":20,"nodeType":"419","messageId":"420","endLine":13,"endColumn":42},{"ruleId":"410","severity":1,"message":"462","line":2,"column":9,"nodeType":"412","messageId":"413","endLine":2,"endColumn":13},{"ruleId":"410","severity":1,"message":"463","line":2,"column":22,"nodeType":"412","messageId":"413","endLine":2,"endColumn":28},{"ruleId":"410","severity":1,"message":"464","line":3,"column":8,"nodeType":"412","messageId":"413","endLine":3,"endColumn":14},{"ruleId":"410","severity":1,"message":"465","line":6,"column":17,"nodeType":"412","messageId":"413","endLine":6,"endColumn":27},{"ruleId":"410","severity":1,"message":"421","line":7,"column":9,"nodeType":"412","messageId":"413","endLine":7,"endColumn":15},{"ruleId":"417","severity":1,"message":"418","line":15,"column":21,"nodeType":"419","messageId":"420","endLine":15,"endColumn":44},{"ruleId":"417","severity":1,"message":"418","line":14,"column":22,"nodeType":"419","messageId":"420","endLine":14,"endColumn":46},"no-native-reassign",["466"],"no-negated-in-lhs",["467"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'drawerWidth' is assigned a value but never used.","'useEffect' is defined but never used.","'makeStyles' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Person' is defined but never used.","'layout' is defined but never used.","'Store' is defined but never used.","'SwapCalls' is defined but never used.","'Menu' is defined but never used.","'userContextMenu' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'usersModel'. Either include it or remove the dependency array.","ArrayExpression",["468"],"'Dialog' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"469","text":"470"},"React Hook useEffect has a missing dependency: 'model'. Either include it or remove the dependency array.",["471"],"'removeFromAutoStart' is assigned a value but never used.","'getUserList' is defined but never used.","'fetchDisks' is defined but never used.","'UserListResponse' is defined but never used.","'Apps' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Part' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Dns' is defined but never used.","'ApplicationConfig' is defined but never used.","'UsersForm' is defined but never used.","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["472"],"'useState' is defined but never used.","'fetchParts' is defined but never used.","'partsModel' is assigned a value but never used.",["473"],"'AppNavigation' is defined but never used.","'Toolbar' is defined but never used.","'useLocalStorageState' is defined but never used.","'blue' is defined but never used.","'indigo' is defined but never used.","'AppBar' is defined but never used.","'ButtonBase' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"474","fix":"475"},[-1,0],"",{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},"Update the dependencies array to be: [usersModel]",{"range":"482","text":"483"},"Update the dependencies array to be: [model]",{"range":"484","text":"485"},"Update the dependencies array to be: [disksController.list, onChange]",{"range":"486","text":"487"},"Update the dependencies array to be: [onChange, usersController.list]",{"range":"488","text":"489"},[912,914],"[usersModel]",[470,472],"[model]",[1042,1064],"[disksController.list, onChange]",[738,760],"[onChange, usersController.list]"]