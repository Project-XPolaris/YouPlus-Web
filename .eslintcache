[{"/home/aren/Desktop/YouPlus/ypw/src/index.tsx":"1","/home/aren/Desktop/YouPlus/ypw/src/reportWebVitals.ts":"2","/home/aren/Desktop/YouPlus/ypw/src/App.tsx":"3","/home/aren/Desktop/YouPlus/ypw/src/theme.ts":"4","/home/aren/Desktop/YouPlus/ypw/src/layout/Blank/index.tsx":"5","/home/aren/Desktop/YouPlus/ypw/src/pages/Parts/index.tsx":"6","/home/aren/Desktop/YouPlus/ypw/src/pages/Storage/index.tsx":"7","/home/aren/Desktop/YouPlus/ypw/src/pages/ZFS/index.tsx":"8","/home/aren/Desktop/YouPlus/ypw/src/pages/Network/index.tsx":"9","/home/aren/Desktop/YouPlus/ypw/src/pages/Disks/index.tsx":"10","/home/aren/Desktop/YouPlus/ypw/src/pages/NetworkDetail/index.tsx":"11","/home/aren/Desktop/YouPlus/ypw/src/pages/DiskDetail/index.tsx":"12","/home/aren/Desktop/YouPlus/ypw/src/pages/DiskDetail/model.ts":"13","/home/aren/Desktop/YouPlus/ypw/src/pages/NetworkDetail/model.ts":"14","/home/aren/Desktop/YouPlus/ypw/src/pages/Disks/style.ts":"15","/home/aren/Desktop/YouPlus/ypw/src/pages/Disks/model.ts":"16","/home/aren/Desktop/YouPlus/ypw/src/pages/Network/model.ts":"17","/home/aren/Desktop/YouPlus/ypw/src/pages/Storage/model.ts":"18","/home/aren/Desktop/YouPlus/ypw/src/pages/ZFS/style.ts":"19","/home/aren/Desktop/YouPlus/ypw/src/pages/ZFS/model.ts":"20","/home/aren/Desktop/YouPlus/ypw/src/pages/Storage/style.ts":"21","/home/aren/Desktop/YouPlus/ypw/src/pages/Parts/model.ts":"22","/home/aren/Desktop/YouPlus/ypw/src/pages/Parts/style.ts":"23","/home/aren/Desktop/YouPlus/ypw/src/components/PageHead/hook.ts":"24","/home/aren/Desktop/YouPlus/ypw/src/model/layout.ts":"25","/home/aren/Desktop/YouPlus/ypw/src/pages/DiskDetail/style.tsx":"26","/home/aren/Desktop/YouPlus/ypw/src/pages/NetworkDetail/style.tsx":"27","/home/aren/Desktop/YouPlus/ypw/src/pages/Network/style.tsx":"28","/home/aren/Desktop/YouPlus/ypw/src/api/network.ts":"29","/home/aren/Desktop/YouPlus/ypw/src/api/disks.ts":"30","/home/aren/Desktop/YouPlus/ypw/src/api/storage.ts":"31","/home/aren/Desktop/YouPlus/ypw/src/api/zfs.ts":"32","/home/aren/Desktop/YouPlus/ypw/src/utils/message.ts":"33","/home/aren/Desktop/YouPlus/ypw/src/hooks/ConfirmDialog.ts":"34","/home/aren/Desktop/YouPlus/ypw/src/components/PageHead/index.tsx":"35","/home/aren/Desktop/YouPlus/ypw/src/components/ValueField/index.tsx":"36","/home/aren/Desktop/YouPlus/ypw/src/components/ListItemDialog/index.tsx":"37","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/index.tsx":"38","/home/aren/Desktop/YouPlus/ypw/src/config.ts":"39","/home/aren/Desktop/YouPlus/ypw/src/utils/request.ts":"40","/home/aren/Desktop/YouPlus/ypw/src/model/user.ts":"41","/home/aren/Desktop/YouPlus/ypw/src/components/PageHead/style.ts":"42","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/form.ts":"43","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/style.ts":"44","/home/aren/Desktop/YouPlus/ypw/src/components/ListItemDialog/style.ts":"45","/home/aren/Desktop/YouPlus/ypw/src/components/ValueField/style.ts":"46","/home/aren/Desktop/YouPlus/ypw/src/api/auth.ts":"47","/home/aren/Desktop/YouPlus/ypw/src/components/UserPopup/index.tsx":"48","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/editor/index.tsx":"49","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/confirm/index.tsx":"50","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/simple/index.tsx":"51","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/info/index.tsx":"52","/home/aren/Desktop/YouPlus/ypw/src/layout/Base/parts/Task/index.tsx":"53","/home/aren/Desktop/YouPlus/ypw/src/components/UserPopup/style.tsx":"54","/home/aren/Desktop/YouPlus/ypw/src/model/task.ts":"55","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/info/style.ts":"56","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/simple/style.ts":"57","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/confirm/style.ts":"58","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/editor/style.ts":"59","/home/aren/Desktop/YouPlus/ypw/src/layout/Base/parts/Task/style.tsx":"60","/home/aren/Desktop/YouPlus/ypw/src/api/task.ts":"61","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppTaskCard/index.tsx":"62","/home/aren/Desktop/YouPlus/ypw/src/components/DiskSelectTable/index.tsx":"63","/home/aren/Desktop/YouPlus/ypw/src/components/ZFSTreeView/index.tsx":"64","/home/aren/Desktop/YouPlus/ypw/src/utils/random.ts":"65","/home/aren/Desktop/YouPlus/ypw/src/components/ZFSTreeView/style.ts":"66","/home/aren/Desktop/YouPlus/ypw/src/components/DiskSelectTable/style.ts":"67","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppTaskCard/style.tsx":"68","/home/aren/Desktop/YouPlus/ypw/src/layout/Base/index.tsx":"69","/home/aren/Desktop/YouPlus/ypw/src/pages/UserDetail/index.tsx":"70","/home/aren/Desktop/YouPlus/ypw/src/pages/System/index.tsx":"71","/home/aren/Desktop/YouPlus/ypw/src/pages/PoolDetail/index.tsx":"72","/home/aren/Desktop/YouPlus/ypw/src/pages/GroupDetail/index.tsx":"73","/home/aren/Desktop/YouPlus/ypw/src/pages/Groups/index.tsx":"74","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolderDetail/index.tsx":"75","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/index.tsx":"76","/home/aren/Desktop/YouPlus/ypw/src/pages/Login/index.tsx":"77","/home/aren/Desktop/YouPlus/ypw/src/pages/Account/index.tsx":"78","/home/aren/Desktop/YouPlus/ypw/src/pages/Apps/index.tsx":"79","/home/aren/Desktop/YouPlus/ypw/src/pages/Users/index.tsx":"80","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolder/index.tsx":"81","/home/aren/Desktop/YouPlus/ypw/src/pages/UserDetail/style.ts":"82","/home/aren/Desktop/YouPlus/ypw/src/pages/UserDetail/model.ts":"83","/home/aren/Desktop/YouPlus/ypw/src/api/os.ts":"84","/home/aren/Desktop/YouPlus/ypw/src/pages/PoolDetail/model.ts":"85","/home/aren/Desktop/YouPlus/ypw/src/pages/GroupDetail/style.ts":"86","/home/aren/Desktop/YouPlus/ypw/src/pages/GroupDetail/model.ts":"87","/home/aren/Desktop/YouPlus/ypw/src/pages/Groups/model.ts":"88","/home/aren/Desktop/YouPlus/ypw/src/pages/Groups/style.ts":"89","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolderDetail/model.ts":"90","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolderDetail/style.ts":"91","/home/aren/Desktop/YouPlus/ypw/src/pages/Apps/style.ts":"92","/home/aren/Desktop/YouPlus/ypw/src/pages/Apps/model.ts":"93","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolder/model.ts":"94","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolder/style.ts":"95","/home/aren/Desktop/YouPlus/ypw/src/hooks/ContextMenu.ts":"96","/home/aren/Desktop/YouPlus/ypw/src/pages/Users/model.ts":"97","/home/aren/Desktop/YouPlus/ypw/src/pages/Users/style.ts":"98","/home/aren/Desktop/YouPlus/ypw/src/api/account.ts":"99","/home/aren/Desktop/YouPlus/ypw/src/pages/Account/style.ts":"100","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/model.ts":"101","/home/aren/Desktop/YouPlus/ypw/src/pages/Login/style.ts":"102","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/style.ts":"103","/home/aren/Desktop/YouPlus/ypw/src/pages/System/style.tsx":"104","/home/aren/Desktop/YouPlus/ypw/src/pages/PoolDetail/style.tsx":"105","/home/aren/Desktop/YouPlus/ypw/src/components/Icons/DiskIcon.tsx":"106","/home/aren/Desktop/YouPlus/ypw/src/api/users.ts":"107","/home/aren/Desktop/YouPlus/ypw/src/api/share.ts":"108","/home/aren/Desktop/YouPlus/ypw/src/api/apps.ts":"109","/home/aren/Desktop/YouPlus/ypw/src/api/system.ts":"110","/home/aren/Desktop/YouPlus/ypw/src/layout/Notification/index.tsx":"111","/home/aren/Desktop/YouPlus/ypw/src/layout/Base/parts/Nav/index.tsx":"112","/home/aren/Desktop/YouPlus/ypw/src/layout/Auth/index.tsx":"113","/home/aren/Desktop/YouPlus/ypw/src/components/InfoCard/index.tsx":"114","/home/aren/Desktop/YouPlus/ypw/src/components/UserSelectDialog/index.tsx":"115","/home/aren/Desktop/YouPlus/ypw/src/components/NewGroupDialog/index.tsx":"116","/home/aren/Desktop/YouPlus/ypw/src/components/SwitchSelectDialog/index.tsx":"117","/home/aren/Desktop/YouPlus/ypw/src/components/UserListCard/index.tsx":"118","/home/aren/Desktop/YouPlus/ypw/src/components/UserAndGroupListCard/index.tsx":"119","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/index.tsx":"120","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/index.tsx":"121","/home/aren/Desktop/YouPlus/ypw/src/components/NewUserDialog/index.tsx":"122","/home/aren/Desktop/YouPlus/ypw/src/components/ChangePasswordDialog/index.tsx":"123","/home/aren/Desktop/YouPlus/ypw/src/components/IconStatCard/index.tsx":"124","/home/aren/Desktop/YouPlus/ypw/src/components/UserGroupSelectDialog/index.tsx":"125","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/CpuMonitorCard/index.tsx":"126","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/MemoryMonitorCard/index.tsx":"127","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/SystemInfoCard/index.tsx":"128","/home/aren/Desktop/YouPlus/ypw/src/ws.ts":"129","/home/aren/Desktop/YouPlus/ypw/src/components/InfoCard/style.ts":"130","/home/aren/Desktop/YouPlus/ypw/src/components/UserSelectDialog/style.ts":"131","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/hook.ts":"132","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/hook.ts":"133","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/style.ts":"134","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/style.ts":"135","/home/aren/Desktop/YouPlus/ypw/src/components/UserGroupSelectDialog/style.ts":"136","/home/aren/Desktop/YouPlus/ypw/src/components/UserAndGroupListCard/style.ts":"137","/home/aren/Desktop/YouPlus/ypw/src/components/NewUserDialog/style.ts":"138","/home/aren/Desktop/YouPlus/ypw/src/components/ChangePasswordDialog/style.ts":"139","/home/aren/Desktop/YouPlus/ypw/src/components/UserListCard/style.ts":"140","/home/aren/Desktop/YouPlus/ypw/src/components/SwitchSelectDialog/style.ts":"141","/home/aren/Desktop/YouPlus/ypw/src/components/NewGroupDialog/style.ts":"142","/home/aren/Desktop/YouPlus/ypw/src/components/IconStatCard/style.tsx":"143","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/CpuMonitorCard/style.tsx":"144","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/MemoryMonitorCard/style.tsx":"145","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/SystemInfoCard/style.tsx":"146","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/confirm/index.tsx":"147","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/upload/index.tsx":"148","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/complete/index.tsx":"149","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/storage/index.tsx":"150","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/info/index.tsx":"151","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/info/style.ts":"152","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/storage/style.ts":"153","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/upload/style.ts":"154","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/complete/style.ts":"155","/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/confirm/style.ts":"156","/home/aren/Desktop/YouPlus/ypw/src/components/PathPickDialog/index.tsx":"157","/home/aren/Desktop/YouPlus/ypw/src/api/path.ts":"158","/home/aren/Desktop/YouPlus/ypw/src/components/PathPickDialog/style.ts":"159","/home/aren/Desktop/YouPlus/ypw/src/pages/Logs/index.tsx":"160","/home/aren/Desktop/YouPlus/ypw/src/pages/Logs/style.tsx":"161","/home/aren/Desktop/YouPlus/ypw/src/pages/Logs/model.ts":"162","/home/aren/Desktop/YouPlus/ypw/src/api/log.ts":"163","/home/aren/Desktop/YouPlus/ypw/src/utils/log.ts":"164","/home/aren/Desktop/YouPlus/ypw/src/components/ChipSelectView/index.tsx":"165","/home/aren/Desktop/YouPlus/ypw/src/components/ChipSelectView/style.tsx":"166"},{"size":610,"mtime":1620123804126,"results":"167","hashOfConfig":"168"},{"size":425,"mtime":1614998296846,"results":"169","hashOfConfig":"168"},{"size":572,"mtime":1627658037491,"results":"170","hashOfConfig":"168"},{"size":329,"mtime":1614998296849,"results":"171","hashOfConfig":"168"},{"size":7045,"mtime":1632923849751,"results":"172","hashOfConfig":"168"},{"size":1277,"mtime":1615994728785,"results":"173","hashOfConfig":"168"},{"size":3369,"mtime":1630422618501,"results":"174","hashOfConfig":"168"},{"size":7584,"mtime":1630422618501,"results":"175","hashOfConfig":"168"},{"size":5147,"mtime":1630763067304,"results":"176","hashOfConfig":"168"},{"size":4368,"mtime":1631543765918,"results":"177","hashOfConfig":"168"},{"size":5089,"mtime":1630422618501,"results":"178","hashOfConfig":"168"},{"size":5120,"mtime":1630422618501,"results":"179","hashOfConfig":"168"},{"size":582,"mtime":1627136081780,"results":"180","hashOfConfig":"168"},{"size":533,"mtime":1627718490018,"results":"181","hashOfConfig":"168"},{"size":1345,"mtime":1630763067304,"results":"182","hashOfConfig":"168"},{"size":526,"mtime":1623430135373,"results":"183","hashOfConfig":"168"},{"size":461,"mtime":1627659828789,"results":"184","hashOfConfig":"168"},{"size":801,"mtime":1623430176409,"results":"185","hashOfConfig":"168"},{"size":763,"mtime":1630422618501,"results":"186","hashOfConfig":"168"},{"size":1046,"mtime":1623415509866,"results":"187","hashOfConfig":"168"},{"size":345,"mtime":1614998296844,"results":"188","hashOfConfig":"168"},{"size":676,"mtime":1615994728781,"results":"189","hashOfConfig":"168"},{"size":342,"mtime":1614998296842,"results":"190","hashOfConfig":"168"},{"size":342,"mtime":1630422618497,"results":"191","hashOfConfig":"168"},{"size":1249,"mtime":1623425950770,"results":"192","hashOfConfig":"168"},{"size":480,"mtime":1630422618501,"results":"193","hashOfConfig":"168"},{"size":815,"mtime":1630422618501,"results":"194","hashOfConfig":"168"},{"size":1705,"mtime":1630763067304,"results":"195","hashOfConfig":"168"},{"size":1638,"mtime":1627659828781,"results":"196","hashOfConfig":"168"},{"size":1282,"mtime":1628083568933,"results":"197","hashOfConfig":"168"},{"size":690,"mtime":1614998296817,"results":"198","hashOfConfig":"168"},{"size":1185,"mtime":1628083568933,"results":"199","hashOfConfig":"168"},{"size":725,"mtime":1620536970322,"results":"200","hashOfConfig":"168"},{"size":872,"mtime":1618406056539,"results":"201","hashOfConfig":"168"},{"size":2758,"mtime":1630763067304,"results":"202","hashOfConfig":"168"},{"size":657,"mtime":1614998296827,"results":"203","hashOfConfig":"168"},{"size":2006,"mtime":1614998296832,"results":"204","hashOfConfig":"168"},{"size":4026,"mtime":1628083568933,"results":"205","hashOfConfig":"168"},{"size":852,"mtime":1633082858681,"results":"206","hashOfConfig":"168"},{"size":1501,"mtime":1633083424162,"results":"207","hashOfConfig":"168"},{"size":1048,"mtime":1623431166004,"results":"208","hashOfConfig":"168"},{"size":1449,"mtime":1631543542778,"results":"209","hashOfConfig":"168"},{"size":813,"mtime":1628083568933,"results":"210","hashOfConfig":"168"},{"size":875,"mtime":1628083568933,"results":"211","hashOfConfig":"168"},{"size":390,"mtime":1614998296832,"results":"212","hashOfConfig":"168"},{"size":391,"mtime":1627722565275,"results":"213","hashOfConfig":"168"},{"size":345,"mtime":1614998296817,"results":"214","hashOfConfig":"168"},{"size":920,"mtime":1623431166000,"results":"215","hashOfConfig":"168"},{"size":359,"mtime":1628083568933,"results":"216","hashOfConfig":"168"},{"size":957,"mtime":1628083568933,"results":"217","hashOfConfig":"168"},{"size":714,"mtime":1628083568933,"results":"218","hashOfConfig":"168"},{"size":1167,"mtime":1628083568933,"results":"219","hashOfConfig":"168"},{"size":2453,"mtime":1620560458339,"results":"220","hashOfConfig":"168"},{"size":507,"mtime":1620558967519,"results":"221","hashOfConfig":"168"},{"size":453,"mtime":1623430109849,"results":"222","hashOfConfig":"168"},{"size":261,"mtime":1628083568933,"results":"223","hashOfConfig":"168"},{"size":193,"mtime":1628083568933,"results":"224","hashOfConfig":"168"},{"size":327,"mtime":1628083568933,"results":"225","hashOfConfig":"168"},{"size":193,"mtime":1628083568933,"results":"226","hashOfConfig":"168"},{"size":763,"mtime":1620560554173,"results":"227","hashOfConfig":"168"},{"size":679,"mtime":1620123314608,"results":"228","hashOfConfig":"168"},{"size":1324,"mtime":1620124220861,"results":"229","hashOfConfig":"168"},{"size":3482,"mtime":1628083568937,"results":"230","hashOfConfig":"168"},{"size":2656,"mtime":1628083568937,"results":"231","hashOfConfig":"168"},{"size":87,"mtime":1628083568937,"results":"232","hashOfConfig":"168"},{"size":193,"mtime":1628083568937,"results":"233","hashOfConfig":"168"},{"size":252,"mtime":1628083568937,"results":"234","hashOfConfig":"168"},{"size":288,"mtime":1620120030721,"results":"235","hashOfConfig":"168"},{"size":1247,"mtime":1631543486994,"results":"236","hashOfConfig":"168"},{"size":4104,"mtime":1630422618501,"results":"237","hashOfConfig":"168"},{"size":3821,"mtime":1630422618501,"results":"238","hashOfConfig":"168"},{"size":3854,"mtime":1630763067304,"results":"239","hashOfConfig":"168"},{"size":3022,"mtime":1630422618501,"results":"240","hashOfConfig":"168"},{"size":2598,"mtime":1630422618501,"results":"241","hashOfConfig":"168"},{"size":18919,"mtime":1631543765918,"results":"242","hashOfConfig":"168"},{"size":4251,"mtime":1630422618501,"results":"243","hashOfConfig":"168"},{"size":3159,"mtime":1623242528955,"results":"244","hashOfConfig":"168"},{"size":2242,"mtime":1630422618497,"results":"245","hashOfConfig":"168"},{"size":6467,"mtime":1630763067304,"results":"246","hashOfConfig":"168"},{"size":3768,"mtime":1630422618501,"results":"247","hashOfConfig":"168"},{"size":3652,"mtime":1630763507024,"results":"248","hashOfConfig":"168"},{"size":411,"mtime":1630422618501,"results":"249","hashOfConfig":"168"},{"size":720,"mtime":1626965322087,"results":"250","hashOfConfig":"168"},{"size":386,"mtime":1623429680033,"results":"251","hashOfConfig":"168"},{"size":562,"mtime":1620228550584,"results":"252","hashOfConfig":"168"},{"size":341,"mtime":1630422618501,"results":"253","hashOfConfig":"168"},{"size":1388,"mtime":1618666014991,"results":"254","hashOfConfig":"168"},{"size":603,"mtime":1618635476844,"results":"255","hashOfConfig":"168"},{"size":203,"mtime":1618635356861,"results":"256","hashOfConfig":"168"},{"size":1240,"mtime":1620544556000,"results":"257","hashOfConfig":"168"},{"size":1328,"mtime":1631543765918,"results":"258","hashOfConfig":"168"},{"size":1016,"mtime":1630763067304,"results":"259","hashOfConfig":"168"},{"size":1031,"mtime":1627716995528,"results":"260","hashOfConfig":"168"},{"size":990,"mtime":1620544555996,"results":"261","hashOfConfig":"168"},{"size":1138,"mtime":1630763610008,"results":"262","hashOfConfig":"168"},{"size":811,"mtime":1617439977423,"results":"263","hashOfConfig":"168"},{"size":1253,"mtime":1623430176401,"results":"264","hashOfConfig":"168"},{"size":601,"mtime":1630422618501,"results":"265","hashOfConfig":"168"},{"size":304,"mtime":1617455718575,"results":"266","hashOfConfig":"168"},{"size":252,"mtime":1630422618501,"results":"267","hashOfConfig":"168"},{"size":1277,"mtime":1627207265270,"results":"268","hashOfConfig":"168"},{"size":1215,"mtime":1614998296846,"results":"269","hashOfConfig":"168"},{"size":331,"mtime":1630422618501,"results":"270","hashOfConfig":"168"},{"size":360,"mtime":1623428921088,"results":"271","hashOfConfig":"168"},{"size":783,"mtime":1630763067304,"results":"272","hashOfConfig":"168"},{"size":783,"mtime":1619707137346,"results":"273","hashOfConfig":"168"},{"size":2572,"mtime":1626965322087,"results":"274","hashOfConfig":"168"},{"size":1830,"mtime":1629210524500,"results":"275","hashOfConfig":"168"},{"size":2045,"mtime":1630763067304,"results":"276","hashOfConfig":"168"},{"size":2733,"mtime":1627207265278,"results":"277","hashOfConfig":"168"},{"size":1150,"mtime":1620135951492,"results":"278","hashOfConfig":"168"},{"size":9588,"mtime":1632924075497,"results":"279","hashOfConfig":"168"},{"size":648,"mtime":1623242500067,"results":"280","hashOfConfig":"168"},{"size":971,"mtime":1618153852451,"results":"281","hashOfConfig":"168"},{"size":1855,"mtime":1618146892937,"results":"282","hashOfConfig":"168"},{"size":1394,"mtime":1618634847936,"results":"283","hashOfConfig":"168"},{"size":985,"mtime":1626190707728,"results":"284","hashOfConfig":"168"},{"size":2152,"mtime":1618638719359,"results":"285","hashOfConfig":"168"},{"size":3381,"mtime":1629210524500,"results":"286","hashOfConfig":"168"},{"size":4335,"mtime":1630422618497,"results":"287","hashOfConfig":"168"},{"size":3834,"mtime":1626965322087,"results":"288","hashOfConfig":"168"},{"size":1956,"mtime":1614998296820,"results":"289","hashOfConfig":"168"},{"size":1952,"mtime":1617455487598,"results":"290","hashOfConfig":"168"},{"size":1078,"mtime":1627222813951,"results":"291","hashOfConfig":"168"},{"size":1900,"mtime":1629210524500,"results":"292","hashOfConfig":"168"},{"size":3642,"mtime":1628083568937,"results":"293","hashOfConfig":"168"},{"size":2724,"mtime":1627207946821,"results":"294","hashOfConfig":"168"},{"size":2380,"mtime":1627201710652,"results":"295","hashOfConfig":"168"},{"size":1139,"mtime":1620135626594,"results":"296","hashOfConfig":"168"},{"size":465,"mtime":1618134529596,"results":"297","hashOfConfig":"168"},{"size":260,"mtime":1618134786875,"results":"298","hashOfConfig":"168"},{"size":986,"mtime":1630422618497,"results":"299","hashOfConfig":"168"},{"size":426,"mtime":1626362696073,"results":"300","hashOfConfig":"168"},{"size":391,"mtime":1630422618497,"results":"301","hashOfConfig":"168"},{"size":528,"mtime":1628083568937,"results":"302","hashOfConfig":"168"},{"size":260,"mtime":1629210524500,"results":"303","hashOfConfig":"168"},{"size":727,"mtime":1629210524500,"results":"304","hashOfConfig":"168"},{"size":488,"mtime":1623426680460,"results":"305","hashOfConfig":"168"},{"size":197,"mtime":1617451780712,"results":"306","hashOfConfig":"168"},{"size":731,"mtime":1618148273380,"results":"307","hashOfConfig":"168"},{"size":194,"mtime":1618154120289,"results":"308","hashOfConfig":"168"},{"size":192,"mtime":1618628941576,"results":"309","hashOfConfig":"168"},{"size":719,"mtime":1627222890420,"results":"310","hashOfConfig":"168"},{"size":791,"mtime":1627208601633,"results":"311","hashOfConfig":"168"},{"size":838,"mtime":1627223146106,"results":"312","hashOfConfig":"168"},{"size":270,"mtime":1627201085015,"results":"313","hashOfConfig":"168"},{"size":3057,"mtime":1630422618497,"results":"314","hashOfConfig":"168"},{"size":1484,"mtime":1627129748137,"results":"315","hashOfConfig":"168"},{"size":1051,"mtime":1626965322087,"results":"316","hashOfConfig":"168"},{"size":1831,"mtime":1620537047270,"results":"317","hashOfConfig":"168"},{"size":818,"mtime":1614998296821,"results":"318","hashOfConfig":"168"},{"size":243,"mtime":1614998296821,"results":"319","hashOfConfig":"168"},{"size":317,"mtime":1614998296822,"results":"320","hashOfConfig":"168"},{"size":519,"mtime":1627129748137,"results":"321","hashOfConfig":"168"},{"size":271,"mtime":1614998296824,"results":"322","hashOfConfig":"168"},{"size":300,"mtime":1630422618497,"results":"323","hashOfConfig":"168"},{"size":3493,"mtime":1630422618497,"results":"324","hashOfConfig":"168"},{"size":396,"mtime":1630422618497,"results":"325","hashOfConfig":"168"},{"size":770,"mtime":1630422618497,"results":"326","hashOfConfig":"168"},{"size":6099,"mtime":1633235335791,"results":"327","hashOfConfig":"168"},{"size":1181,"mtime":1633234247755,"results":"328","hashOfConfig":"168"},{"size":1548,"mtime":1633234909934,"results":"329","hashOfConfig":"168"},{"size":1142,"mtime":1633164573727,"results":"330","hashOfConfig":"168"},{"size":351,"mtime":1633146882722,"results":"331","hashOfConfig":"168"},{"size":3243,"mtime":1633165111635,"results":"332","hashOfConfig":"168"},{"size":597,"mtime":1633165128499,"results":"333","hashOfConfig":"168"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},"o59w27",{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"336"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"336"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"349","usedDeprecatedRules":"336"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"336"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"336"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"336"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"336"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"336"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"336"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"336"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"336"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"336"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"336"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"336"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"336"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"336"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"336"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"336"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"336"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"336"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"336"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"336"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"336"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"336"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"336"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"336"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"336"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"336"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"336"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"336"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"336"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"336"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"336"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"336"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"336"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"336"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"336"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"336"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"336"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"336"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"336"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"336"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"336"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580","usedDeprecatedRules":"336"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"336"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"336"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"336"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"336"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"336"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"336"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"336"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"336"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"336"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"336"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"336"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"336"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"336"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"336"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"336"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"336"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},"/home/aren/Desktop/YouPlus/ypw/src/index.tsx",[],["727","728"],"/home/aren/Desktop/YouPlus/ypw/src/reportWebVitals.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/App.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/theme.ts",["729","730"],"import {createMuiTheme} from '@material-ui/core/styles';\nimport {blue, green, indigo, yellow} from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: green[700],\n        },\n        secondary: {\n            main: yellow[800],\n        },\n\n    },\n});\nexport default theme","/home/aren/Desktop/YouPlus/ypw/src/layout/Blank/index.tsx",["731","732"],"import {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport ZFSPage from \"../../pages/ZFS\";\nimport StoragePage from \"../../pages/Storage\";\nimport PartsPage from \"../../pages/Parts\";\nimport DisksPage from \"../../pages/Disks\";\nimport UsersPage from \"../../pages/Users\";\nimport ShareFolder from \"../../pages/ShareFolder\";\nimport AppsPage from \"../../pages/Apps\";\nimport * as React from \"react\";\nimport BaseLayout from \"../Base\";\nimport LoginPage from \"../../pages/Login\";\nimport AccountPage from \"../../pages/Account\";\nimport DashboardPage from \"../../pages/DashBoard\";\nimport ShareFolderDetail from \"../../pages/ShareFolderDetail\";\nimport useLayoutModel from \"../../model/layout\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport GroupsPage from \"../../pages/Groups\";\nimport GroupDetailPage from \"../../pages/GroupDetail\";\nimport PoolDetailPage from \"../../pages/PoolDetail\";\nimport {OptionsObject, SnackbarMessage, useSnackbar} from \"notistack\";\nimport {useEffect} from \"react\";\nimport SystemPage from \"../../pages/System\";\nimport UserDetail from \"../../pages/UserDetail\";\nimport DiskDetailPage from \"../../pages/DiskDetail\";\nimport NetworkPage from \"../../pages/Network\";\nimport NetworkDetail from \"../../pages/NetworkDetail\";\nimport LogsPage from \"../../pages/Logs\";\n\nexport interface BlankLayoutPropsType {\n\n}\n\nconst BlankLayout = ({}: BlankLayoutPropsType) => {\n    const layoutModel = useLayoutModel()\n    const {enqueueSnackbar} = useSnackbar()\n    const onGlobalSnackMessage = (e: any) => {\n        const {message, options}: { message: SnackbarMessage, options?: OptionsObject } = e.detail\n        enqueueSnackbar(message, options)\n    }\n    useEffect(() => {\n        document.addEventListener(\"globalMessage\", onGlobalSnackMessage)\n    }, [])\n    return (\n        <div>\n            <Dialog open={layoutModel.confirmDialogController.open}\n                    onClose={layoutModel.confirmDialogController.onClose}>\n                <DialogTitle>\n                    {layoutModel.confirmDialogController.title}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {layoutModel.confirmDialogController.message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    {\n                        layoutModel.confirmDialogController.onOk &&\n                        <Button onClick={() => {\n                            if (layoutModel.confirmDialogController.onOk) {\n                                layoutModel.confirmDialogController.onOk()\n                            }\n                            layoutModel.confirmDialogController.onClose()\n                        }}>\n                            OK\n                        </Button>\n                    }\n                    {\n                        <Button onClick={layoutModel.confirmDialogController.onClose}>\n                            Cancel\n                        </Button>\n                    }\n                </DialogActions>\n            </Dialog>\n            <Router>\n                <Switch>\n                    <Route path=\"/zfs\">\n                        <BaseLayout>\n                            <ZFSPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/pool/:name/info\">\n                        <BaseLayout>\n                            <PoolDetailPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/storage\">\n                        <BaseLayout>\n                            <StoragePage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/parts\">\n                        <BaseLayout>\n                            <PartsPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/disks\">\n                        <BaseLayout>\n                            <DisksPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/network/:name\">\n                        <BaseLayout>\n                            <NetworkDetail/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/network\">\n                        <BaseLayout>\n                            <NetworkPage/>\n                        </BaseLayout>\n                    </Route>\n\n                    <Route path=\"/disk/:name\">\n                        <BaseLayout>\n                            <DiskDetailPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/users\">\n                        <BaseLayout>\n                            <UsersPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/user/:name\">\n                        <BaseLayout>\n                            <UserDetail/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/folders\">\n                        <BaseLayout>\n                            <ShareFolder/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/folder/:name/info\">\n                        <BaseLayout>\n                            <ShareFolderDetail/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/my/account\">\n                        <BaseLayout>\n                            <AccountPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/apps\">\n                        <BaseLayout>\n                            <AppsPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/groups\">\n                        <BaseLayout>\n                            <GroupsPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/group/:name/info\">\n                        <BaseLayout>\n                            <GroupDetailPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/home\">\n                        <BaseLayout>\n                            <DashboardPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/system\">\n                        <BaseLayout>\n                            <SystemPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/logs\">\n                        <BaseLayout>\n                            <LogsPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/\">\n                        <LoginPage/>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n\nexport default BlankLayout;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Parts/index.tsx",["733","734","735"],"﻿import React, {useEffect} from \"react\";\nimport usePartsPageModel from \"./model\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography} from \"@material-ui/core\";\nimport {Inbox} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface PartsPagePropsType {\n\n}\n\nconst PartsPage = ({}: PartsPagePropsType) => {\n    const model = usePartsPageModel()\n    const classes = useStyles()\n    useEffect(() => {\n        model.initData()\n    },[])\n    return (\n        <div>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Parts\n            </Typography>\n            <List>\n            {\n                model.parts.map(part => {\n                    return (\n                        <ListItem key={part.name} button>\n                            <ListItemAvatar>\n                                <Avatar className={classes.avatar}>\n                                    <Inbox />\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={part.name} secondary={part.fs_type}/>\n                        </ListItem>\n                    )\n                })\n            }\n            </List>\n        </div>\n    )\n}\n\nexport default PartsPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Storage/index.tsx",["736","737","738","739","740"],"import React, {useEffect, useState} from \"react\";\nimport ListPage from \"../../components/ListPage\";\nimport useStorageModel from \"./model\";\nimport {\n    Avatar, Button,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText\n} from \"@material-ui/core\";\nimport {Add, Archive, Delete} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport ListItemDialog from \"../../components/ListItemDialog\";\nimport {Storage} from \"../../api/storage\";\nimport useLayoutModel from \"../../model/layout\";\nimport {useSnackbar} from \"notistack\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\n\nexport interface StoragePagePropsType {\n\n}\n\nconst StoragePage = ({}: StoragePagePropsType) => {\n    const storageModel = useStorageModel()\n    const layoutModel = useLayoutModel()\n    const classes = useStyles()\n    useEffect(() => {\n        storageModel.init()\n    }, [])\n    const {enqueueSnackbar} = useSnackbar();\n    const [contextStorage, setContextStorage] = useState<Storage>()\n    const switchDeleteConfirmDialog = layoutModel.getDialogSwitchHandler('deleteStorageConfirm')\n    const pageHeadController = usePageHeadController({})\n\n    const openDeleteDialog = (storage: Storage) => {\n        setContextStorage(storage)\n        switchDeleteConfirmDialog()\n    }\n    return (\n        <div>\n            <ListItemDialog\n                primary={contextStorage?.id ?? \"unknown\"}\n                icon={<Archive/>}\n                onClose={switchDeleteConfirmDialog}\n                title={\"Delete\"}\n                onOk={async () => {\n                    if (contextStorage) {\n                        await storageModel.remove(contextStorage?.id)\n                        enqueueSnackbar(`storage ${contextStorage?.id} removed`, {variant: \"success\"})\n                    }\n                    switchDeleteConfirmDialog()\n                }}\n                open={layoutModel.getDialogOpen('deleteStorageConfirm')}\n                secondary={contextStorage?.type ?? \"unknown\"}\n                text={\"Remove action will remove all SHARE FOLDER in this storage!\"}\n            />\n            <PageHead\n                title={\"Storage\"}\n                controller={pageHeadController}\n            />\n            <List className={classes.list}>\n                {\n                    storageModel.storages.map(storage => {\n                        return (\n                            <ListItem key={storage.id} button>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Archive/>\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={storage.id} secondary={storage.type}/>\n                                <ListItemSecondaryAction>\n                                    <IconButton onClick={() => openDeleteDialog(storage)}>\n                                        <Delete/>\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n        </div>\n    )\n}\n\nexport default StoragePage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/ZFS/index.tsx",["741","742","743"],"import React, {useEffect, useState} from \"react\";\nimport {\n    Avatar,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Menu,\n    MenuItem\n} from \"@material-ui/core\";\nimport useZFSModel from \"./model\";\nimport {Add, Delete, Dns, MoreVert} from \"@material-ui/icons\";\nimport ListPage from \"../../components/ListPage\";\nimport CreateZFSPoolDialog from \"../../components/CreateZFSPoolDialog\";\nimport useStyles from \"./style\";\nimport useLayoutModel from \"../../model/layout\";\nimport ListItemDialog from \"../../components/ListItemDialog\";\nimport {ZFSPool} from \"../../api/zfs\";\nimport useStorageModel from \"../Storage/model\";\nimport {useSnackbar} from \"notistack\";\nimport {useHistory} from \"react-router-dom\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\n\nexport interface ZFSPagePropsType {\n\n}\n\nconst ZFSPage = ({}: ZFSPagePropsType) => {\n    const zfsModel = useZFSModel()\n    const layoutModel = useLayoutModel()\n    const storageModel = useStorageModel()\n    const history = useHistory()\n    const classes = useStyles()\n    useEffect(() => {\n        zfsModel.refresh()\n    },[])\n    const [moreMenuEl, setMoreMenuEl] = React.useState(null);\n    const createPoolDialogSwitchHandler = layoutModel.getDialogSwitchHandler(\"newZFSPool\")\n    const [contextPool, setContextPool] = useState<ZFSPool>()\n    const [deleteConfirmDialog, setDeleteConfirmDialog] = useState<{\n        name: string,\n        open: boolean\n    }>({name: \"\", open: false})\n    const {enqueueSnackbar} = useSnackbar();\n    const pageHeadController = usePageHeadController({})\n    const openDeleteConfirm = (name: string) => {\n        setDeleteConfirmDialog({\n            name,\n            open: true\n        })\n    }\n    const closeDeleteConfirm = () => {\n        setDeleteConfirmDialog({\n            ...deleteConfirmDialog,\n            open: false\n        })\n    }\n    const onRemoveHandler = async () => {\n        if (deleteConfirmDialog?.name) {\n            await zfsModel.removePool(deleteConfirmDialog.name)\n            enqueueSnackbar(\"delete success\", {variant: 'success'})\n            closeDeleteConfirm()\n        }\n    }\n    const handleMoreMenuClick = (event: any) => {\n        setMoreMenuEl(event.currentTarget);\n    };\n    const handleMoreMenuClose = () => {\n        setMoreMenuEl(null);\n    };\n    const asStorageSwitchHandler = layoutModel.getDialogSwitchHandler('poolAsStorageDialog')\n    return (\n        <div className={classes.root}>\n            <PageHead title={\"Pools\"} controller={pageHeadController} actions={\n                <>\n                    <Button\n                        className={classes.headAction}\n                        variant={\"text\"}\n                        color={'secondary'}\n                        startIcon={<Add/>}\n                        onClick={createPoolDialogSwitchHandler}\n                    >New pool</Button>\n                </>\n            } />\n            <div className={classes.content}>\n                <Menu\n                    anchorEl={moreMenuEl}\n                    keepMounted\n                    open={Boolean(moreMenuEl)}\n                    onClose={handleMoreMenuClose}\n                >\n                    <MenuItem onClick={() => {\n                        asStorageSwitchHandler()\n                        handleMoreMenuClose()\n                    }}>Use as storage</MenuItem>\n\n                </Menu>\n                <ListItemDialog\n                    primary={contextPool?.name ?? \"unknown\"}\n                    icon={<Dns/>}\n                    onClose={asStorageSwitchHandler}\n                    title={\"As storage\"}\n                    onOk={async () => {\n                        await storageModel.addStorage(`/${contextPool?.name}`, \"ZFSPool\")\n                        asStorageSwitchHandler()\n                        enqueueSnackbar(\"storage created\", {\n                            variant: 'success'\n                        })\n                    }}\n                    text={\"Use this pool to create new storage\"}\n                    open={layoutModel.getDialogOpen('poolAsStorageDialog')}\n                />\n                <CreateZFSPoolDialog\n                    open={layoutModel.getDialogOpen(\"newZFSPool\")}\n                    onClose={createPoolDialogSwitchHandler}\n                    onOk={async () => {\n                        enqueueSnackbar(\"create pool success\", {\n                            variant: 'success'\n                        })\n                        createPoolDialogSwitchHandler()\n                        await zfsModel.refresh()\n                    }}\n                />\n                <Dialog open={Boolean(deleteConfirmDialog.open)} maxWidth={\"xl\"}>\n                    <DialogTitle>\n                        Remove\n                    </DialogTitle>\n                    <DialogContent className={classes.deleteDialogContent}>\n                        <DialogContentText>\n                            ALL DATA in pool will deleted,please confirm!\n                        </DialogContentText>\n                        <ListItem className={classes.deleteDialogItem}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <Dns/>\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={deleteConfirmDialog.name}/>\n                        </ListItem>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color={\"secondary\"} onClick={closeDeleteConfirm}>\n                            Cancel\n                        </Button>\n                        <Button color={\"secondary\"} onClick={onRemoveHandler}>\n                            Delete\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <List className={classes.list}>\n                    {\n                        zfsModel.pools.map(pool => {\n                            return (\n                                <ListItem key={pool.name} button onClick={() => history.push(`/pool/${pool.name}/info`)}>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <Dns/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText primary={pool.name}/>\n                                    <ListItemSecondaryAction>\n\n                                        <IconButton>\n                                            <Delete onClick={() => openDeleteConfirm(pool.name)}/>\n                                        </IconButton>\n                                        <IconButton onClick={(e) => {\n                                            setContextPool(pool)\n                                            handleMoreMenuClick(e)\n                                        }}>\n                                            <MoreVert/>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })\n                    }\n\n                </List>\n            </div>\n        </div>\n    )\n}\n\nexport default ZFSPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Network/index.tsx",["744","745","746","747","748","749","750","751","752"],"import useStyles from \"./style\";\nimport {Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, Paper, Typography} from \"@material-ui/core\";\nimport React, {useEffect} from \"react\";\nimport useNetworkModel from \"./model\";\nimport NetworkCard from \"../../components/NetworkCard\";\nimport {useHistory} from \"react-router-dom\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport {Folder} from \"@material-ui/icons\";\n\nexport interface NetworkPagePropsType {\n\n}\n\nconst NetworkPage = ({}: NetworkPagePropsType) => {\n    const classes = useStyles()\n    const networkModel = useNetworkModel()\n    const history = useHistory()\n    const pageHeadController = usePageHeadController({})\n    useEffect(() => {\n        networkModel.refresh()\n    },[])\n    return (\n        <div>\n            <PageHead title={\"Network\"} controller={pageHeadController} />\n            <div className={classes.content}>\n                {\n                    networkModel.networks.map(network => {\n                        return (\n                            <Paper className={classes.listContainer}>\n                                <div className={classes.listHead}>\n                                    <div className={classes.listTitle}>\n                                        {`${network.name} ${network.hardwareInfo.product}`}\n                                    </div>\n                                </div>\n                                <div className={classes.networkContent}>\n                                    <div className={classes.networkContentLeft}>\n                                        <div className={classes.label}>\n                                            Address\n                                        </div>\n                                        <List>\n                                            {\n                                                [...network.IPv4.address ?? [],...network.IPv6.address ?? []].map(addr => {\n                                                    return (\n                                                        <ListItem>\n                                                            <ListItemText primary={addr} />\n                                                        </ListItem>\n                                                    )\n                                                })\n                                            }\n                                        </List>\n                                    </div>\n                                    <div className={classes.networkContentRight}>\n                                        <div className={classes.valueContainer}>\n                                            <div className={classes.valueLabel}>\n                                                Speed\n                                            </div>\n                                            <div className={classes.value}>\n                                                {network.hardwareInfo.configuration.speed}\n                                            </div>\n                                        </div>\n                                        <div className={classes.valueContainer}>\n                                            <div className={classes.valueLabel}>\n                                                MAC\n                                            </div>\n                                            <div className={classes.value}>\n                                                {network.hardwareInfo.serial}\n                                            </div>\n                                        </div>\n                                        <div className={classes.valueContainer}>\n                                            <div className={classes.valueLabel}>\n                                                Vendor\n                                            </div>\n                                            <div className={classes.value}>\n                                                {network.hardwareInfo.vendor}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </Paper>\n                        )\n                    })\n                }\n                {/*<Grid container  spacing={2}>*/}\n                {/*    {*/}\n                {/*        networkModel.networks.map(network => {*/}\n                {/*            return (*/}\n                {/*                <Grid item key={network.name} xs={2}>*/}\n                {/*                    <NetworkCard*/}\n                {/*                        network={network}*/}\n                {/*                        onClick={() => history.push(`/network/${network.name}`)}*/}\n                {/*                    />*/}\n                {/*                </Grid>*/}\n                {/*            )*/}\n                {/*        })*/}\n                {/*    }*/}\n                {/*</Grid>*/}\n            </div>\n\n\n\n\n        </div>\n    )\n}\n\nexport default NetworkPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Disks/index.tsx",["753","754"],"import React, {useEffect} from \"react\";\nimport useDisksModel from \"./model\";\nimport {Avatar, Link, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\nimport useStyles from \"./style\";\nimport {useHistory} from \"react-router-dom\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport PageHead from \"../../components/PageHead\";\nimport {Storage} from \"@material-ui/icons\";\nimport filesize from \"filesize\";\n\nexport interface DisksPagePropsType {\n\n}\n\nconst DisksPage = ({}: DisksPagePropsType) => {\n    const classes = useStyles()\n    const model = useDisksModel()\n    const history = useHistory()\n    const pageHeadController = usePageHeadController({})\n    useEffect(() => {\n        model.initData()\n    }, [])\n    return (\n        <div className={classes.root}>\n            <PageHead title={\"Disks\"} controller={pageHeadController}/>\n            <div className={classes.content}>\n                <Paper className={classes.listContainer}>\n                    <div className={classes.listHead}>\n                        <div className={classes.listTitle}>\n                            Disks\n                        </div>\n                    </div>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.diskTable} stickyHeader>\n                            <TableHead className={classes.tableHead}>\n                                <TableRow>\n                                    <TableCell>\n                                        Name\n                                    </TableCell>\n                                    <TableCell>\n                                        Model\n                                    </TableCell>\n                                    <TableCell>\n                                        Size\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    model.disks.map(disk => {\n                                        return (\n                                            <TableRow key={disk.name}>\n                                                <TableCell className={classes.cell}>\n                                                    <Avatar className={classes.cellAvatar}>\n                                                        <Storage />\n                                                    </Avatar>\n                                                    <Link onClick={() => history.push(`/disk/${disk.name}`)}>\n                                                        { disk.name }\n                                                    </Link>\n\n                                                </TableCell>\n                                                <TableCell>\n                                                    { disk.model }\n                                                </TableCell>\n                                                <TableCell>\n                                                    { filesize(disk.size) }\n                                                </TableCell>\n                                            </TableRow>\n                                        )\n                                    })\n                                }\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                </Paper>\n            </div>\n\n\n            {/*<List>*/}\n            {/*    {*/}\n            {/*        model.disks.map(it => {*/}\n            {/*            return (*/}\n            {/*                <ListItem key={it.name} button>*/}\n            {/*                    <ListItemAvatar>*/}\n            {/*                        <Avatar className={classes.avatar}>*/}\n            {/*                            <Storage />*/}\n            {/*                        </Avatar>*/}\n            {/*                    </ListItemAvatar>*/}\n            {/*                    <ListItemText primary={it.name} secondary={it.model}/>*/}\n            {/*                </ListItem>*/}\n            {/*            )*/}\n            {/*        })*/}\n            {/*    }*/}\n            {/*</List>*/}\n        </div>\n    )\n}\n\nexport default DisksPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/NetworkDetail/index.tsx",["755","756","757"],"import useStyles from \"./style\";\nimport {Divider, Grid, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography} from \"@material-ui/core\";\nimport React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport useNetworkDetailModel from \"./model\";\nimport ValueField from \"../../components/ValueField\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport PageHead from \"../../components/PageHead\";\n\nexport interface NetworkDetailPropsType {\n\n}\n\nconst NetworkDetail = ({}: NetworkDetailPropsType) => {\n    const classes = useStyles()\n    const {name}: any = useParams()\n    const model = useNetworkDetailModel()\n    const pageHeadController = usePageHeadController({})\n\n    useEffect(() => {\n        model.refresh(name)\n    }, [])\n    return (\n        <div className={classes.root}>\n            <PageHead title={name} controller={pageHeadController} />\n            <div className={classes.contentWrap}>\n                <div className={classes.center}>\n                    {\n                        model.network &&\n                        <Paper className={classes.content}>\n                            <div className={classes.sectionTitle}>\n                                Status\n                            </div>\n                            <Grid container spacing={2} className={classes.sectionContent}>\n                                <Grid item xs={3}>\n                                    <ValueField label={\"product\"} value={model.network.hardwareInfo.product}\n                                                valueFontSize={14}/>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    <ValueField label={\"speed\"}\n                                                value={model.network.hardwareInfo.configuration.speed}\n                                                valueFontSize={14}/>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    <ValueField label={\"mac\"}\n                                                value={model.network.hardwareInfo.serial}\n                                                valueFontSize={14}/>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    <ValueField label={\"link\"}\n                                                value={model.network.hardwareInfo.configuration.link}\n                                                valueFontSize={14}/>\n                                </Grid>\n                            </Grid>\n                            <Divider />\n                            <div className={classes.sectionContent}>\n                                <div className={classes.sectionTitle}>\n                                    Address\n                                </div>\n                                <Table>\n                                    <TableHead>\n\n                                    </TableHead>\n                                    <TableBody>\n                                        {\n                                            model.network.IPv4Address.map(addr => {\n                                                return (\n                                                    <TableRow key={addr}>\n                                                        <TableCell>\n                                                            {addr}\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            IPv4\n                                                        </TableCell>\n                                                    </TableRow>\n                                                )\n                                            })\n                                        }\n                                        {\n                                            model.network.IPv6Address.map(addr => {\n                                                return (\n                                                    <TableRow key={addr}>\n                                                        <TableCell>\n                                                            {addr}\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            IPv6\n                                                        </TableCell>\n                                                    </TableRow>\n                                                )\n                                            })\n                                        }\n                                    </TableBody>\n                                </Table>\n                            </div>\n                        </Paper>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NetworkDetail;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/DiskDetail/index.tsx",["758","759"],"import useStyles from \"./style\";\nimport {Divider, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography} from \"@material-ui/core\";\nimport React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport useDiskDetailModel from \"./model\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\n\nexport interface DiskDetailPagePropsType {\n\n}\n\nconst DiskDetailPage = ({}: DiskDetailPagePropsType) => {\n    const classes = useStyles()\n    const {name}: any = useParams();\n    const model = useDiskDetailModel()\n    const pageHeadController = usePageHeadController({})\n    useEffect(() => {\n        model.setName(name)\n        model.loadInfo(name)\n    }, [])\n    return (\n        <div className={classes.root}>\n            <PageHead title={model.name ?? \"Disk\"} controller={pageHeadController} />\n            <div className={classes.content}>\n                <Paper className={classes.section} elevation={1}>\n                    <div className={classes.tableSectionHeader}>\n                        <Typography variant={\"subtitle1\"}>\n                            Base info\n                        </Typography>\n                    </div>\n                    <Divider/>\n                    <Table>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell>\n                                    ModelFamily\n                                </TableCell>\n                                <TableCell>\n                                    {model.info?.modelFamily}\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    ModelName\n                                </TableCell>\n                                <TableCell>\n                                    {model.info?.modelName}\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    SerialNumber\n                                </TableCell>\n                                <TableCell>\n                                    {model.info?.serialNumber}\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </Paper>\n                <Paper className={classes.section} elevation={1}>\n                    <div className={classes.tableSectionHeader}>\n                        <Typography variant={\"subtitle1\"}>\n                            SMART\n                        </Typography>\n                    </div>\n                    <Divider/>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    ID\n                                </TableCell>\n                                <TableCell>\n                                    Name\n                                </TableCell>\n                                <TableCell>\n                                    Value\n                                </TableCell>\n                                <TableCell>\n                                    Worst\n                                </TableCell>\n                                <TableCell>\n                                    Threshold\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                (model.info?.attrs ?? []).map(attr => {\n                                    return (\n                                        <TableRow key={attr.id}>\n                                            <TableCell>\n                                                { attr.id }\n                                            </TableCell>\n                                            <TableCell>\n                                                { attr.name }\n                                            </TableCell>\n                                            <TableCell>\n                                                { attr.value }\n                                            </TableCell>\n                                            <TableCell>\n                                                { attr.worst }\n                                            </TableCell>\n                                            <TableCell>\n                                                { attr.threshold }\n                                            </TableCell>\n                                        </TableRow>\n                                    )\n                                },[])\n                            }\n                        </TableBody>\n                    </Table>\n                </Paper>\n            </div>\n        </div>\n    )\n}\n\nexport default DiskDetailPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/DiskDetail/model.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/NetworkDetail/model.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Disks/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Disks/model.ts",["760"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {Disk, fetchDisks} from \"../../api/disks\";\n\nconst DisksModel = () => {\n    const [disks,setDisks] = useState<Disk[]>([])\n    const initData = async () => {\n        const response = await fetchDisks()\n        if (response) {\n            setDisks(response.disks.sort((a, b) => a.name.localeCompare(b.name)))\n\n        }\n    }\n\n    return {\n        disks,initData\n    }\n}\nconst useDisksModel = createModel(DisksModel)\nexport default useDisksModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Network/model.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Storage/model.ts",["761"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {fetchStorageList, Storage, removeStorage, createStorage} from \"../../api/storage\";\n\nconst StorageModel = () => {\n    const [storages, setStorages] = useState<Storage[]>([])\n    const init = async () => {\n        const response = await fetchStorageList()\n        if (response) {\n            setStorages(response.storages)\n\n        }\n    }\n    const remove = async (id: string) => {\n        await removeStorage(id)\n        await init()\n    }\n    const addStorage = async (source:string,type:string) => {\n        await createStorage({source,type})\n        await init()\n    }\n\n    return {\n        storages, remove, addStorage,init\n    }\n}\nconst useStorageModel = createModel(StorageModel)\nexport default useStorageModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/ZFS/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/ZFS/model.ts",["762"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {createZFSPool, fetchZFSPools, removeZFSPool, ZFSPool} from \"../../api/zfs\";\nimport {showAPIResponseErrorMessage, showGlobalSnackMessage} from \"../../utils/message\";\n\nconst ZFSModel = () => {\n    const [pools,setPools] = useState<ZFSPool[]>([])\n    const refresh = async() => {\n        const response = await fetchZFSPools()\n        if (response) {\n            setPools(response.pools)\n        }\n    }\n    const removePool = async (name:string) => {\n        const response = await removeZFSPool(name)\n        if (response.success) {\n            showGlobalSnackMessage(\"remove zfs pool success\",{variant:\"success\"})\n        }else{\n            showAPIResponseErrorMessage(response)\n        }\n        await refresh()\n    }\n    const createPool = async (data:any) => {\n        await createZFSPool(data)\n        await refresh()\n    }\n    return {\n        pools,removePool,createPool,refresh\n    }\n}\nconst useZFSModel = createModel(ZFSModel)\nexport default useZFSModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Storage/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Parts/model.ts",["763","764"],"import {createModel} from \"hox\";\nimport {fetchDisks, fetchParts, Part} from \"../../api/disks\";\nimport {useEffect, useState} from \"react\";\nconst targetFS = [\"ext4\",\"ntfs\"]\nconst PartsPageModel = () => {\n    const [parts, setParts] = useState<Part[]>([])\n    const initData = async () => {\n        let result: Part[] = await fetchParts()\n        if (!result) {\n            return\n        }\n        result = result.filter(part => {\n            return targetFS.find(it => it === part.fs_type) !== undefined\n        })\n        setParts(result)\n    }\n    return {\n        parts,initData\n    }\n}\nconst usePartsPageModel = createModel(PartsPageModel)\nexport default usePartsPageModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Parts/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/PageHead/hook.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/model/layout.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/DiskDetail/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/NetworkDetail/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Network/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/api/network.ts",["765"],"import apiRequest from \"../utils/request\";\nimport {ApplicationConfig} from \"../config\";\nimport {DiskInfo} from \"./disks\";\nimport {BaseResponse} from \"./base\";\n\nexport interface IPv4 {\n    dhcp: boolean;\n    address?: any;\n}\n\nexport interface IPv6 {\n    dhcp: boolean;\n    address?: any;\n}\n\nexport interface Configuration {\n    autonegotiation: string;\n    broadcast: string;\n    driver: string;\n    driverversion: string;\n    duplex: string;\n    firmware: string;\n    ip: string;\n    latency: string;\n    link: string;\n    multicast: string;\n    port: string;\n    speed: string;\n}\n\nexport interface Capabilities {\n    pm: string;\n    msi: string;\n    pciexpress: string;\n    msix: string;\n    bus_master: string;\n    cap_list: string;\n    ethernet: boolean;\n    physical: string;\n    tp: string;\n    mii: string;\n    autonegotiation: string;\n}\n\nexport interface HardwareInfo {\n    id: string;\n    class: string;\n    claimed: boolean;\n    handle: string;\n    description: string;\n    product: string;\n    vendor: string;\n    physid: string;\n    businfo: string;\n    logicalname: string;\n    version: string;\n    serial: string;\n    units: string;\n    size: number;\n    capacity: number;\n    width: number;\n    clock: number;\n    configuration: Configuration;\n    capabilities: Capabilities;\n}\n\nexport interface Network {\n    name: string;\n    IPv4Address: string[];\n    IPv6Address: string[];\n    IPv4: IPv4;\n    IPv6: IPv6;\n    hardwareInfo: HardwareInfo;\n}\nexport const fetchNetworkStatus = async ():Promise<{ networks:Network[] } & BaseResponse> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.networkStatus,{\n\n    })\n}\n","/home/aren/Desktop/YouPlus/ypw/src/api/disks.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/api/storage.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/api/zfs.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/utils/message.ts",["766"],"import {OptionsObject, SnackbarMessage} from \"notistack\";\nimport {ResponseError} from \"umi-request\";\n\nexport const showGlobalSnackMessage = (message: SnackbarMessage, options?: OptionsObject) => {\n    document.dispatchEvent(new CustomEvent<{ message: SnackbarMessage, options?: OptionsObject }>(\"globalMessage\", {\n        detail: {\n            message,\n            options\n        }\n    }))\n}\nexport const showAPIResponseErrorMessage = (err:any) => {\n    console.log(err)\n    document.dispatchEvent(new CustomEvent<{ message: SnackbarMessage, options?: OptionsObject }>(\"globalMessage\", {\n        detail: {\n            message:`${err.data.reason} [${err.status}]`,\n            options: {variant: \"error\"}\n        }\n    }))\n}\n","/home/aren/Desktop/YouPlus/ypw/src/hooks/ConfirmDialog.ts",["767"],"import {useEffect, useState} from \"react\";\n\nexport interface ConfirmDialogController {\n    message?: string\n    open: boolean\n    openDialog: (option: ConfirmOption) => void\n    onClose: () => void\n    onOk?: () => void\n    title: string\n}\n\nexport interface ConfirmOption {\n    message: string\n    onOk?: () => void\n    title?: string\n}\n\nexport const useConfirmDialog = (): ConfirmDialogController => {\n    const [open, setOpen] = useState<boolean>(false)\n    const [option, setOption] = useState<ConfirmOption | undefined>()\n    const openDialog = (option: ConfirmOption) => {\n        setOption(option)\n        setOpen(true)\n    }\n    const onClose = () => {\n        setOpen(false)\n    }\n\n    return {\n        message: option?.message,\n        open: open,\n        openDialog,\n        onClose,\n        onOk: option?.onOk,\n        title: option?.title ?? \"Confirm\"\n    }\n}\n","/home/aren/Desktop/YouPlus/ypw/src/components/PageHead/index.tsx",["768"],"import useStyles from './style'\nimport clsx from 'clsx'\nimport React, {ReactElement, useState} from \"react\";\nimport {Avatar, Paper, Tab, Tabs} from \"@material-ui/core\";\nimport {PageHeadController} from \"./hook\";\nimport UserPopup from \"../UserPopup\";\nimport {useHistory} from \"react-router-dom\";\nimport useUserModel from \"../../model/user\";\nimport TaskPopup from \"../../layout/Base/parts/Task\";\n\nexport interface PageHeadPropsType {\n    className?: string\n    title: string\n    tabs?:string[]\n    controller:PageHeadController\n    actions?:ReactElement\n}\n\nconst PageHead = ({className, title,tabs,controller,actions}: PageHeadPropsType): React.ReactElement => {\n    const classes = useStyles()\n    const [userMenuEl, setUserMenuEl] = React.useState(null);\n    const history = useHistory();\n    const userModel = useUserModel()\n    const getUsername = () => {\n        const username = localStorage.getItem(\"username\")\n        if (username) {\n            return username\n        }\n        return \"Unknown\"\n    }\n    const handleUserMenuClick = (event:any) => {\n        setUserMenuEl(event.currentTarget);\n    };\n\n    const handleUserMenuClose = () => {\n        setUserMenuEl(null);\n    };\n    const onLogout = () => {\n        userModel.logout()\n        history.push(\"/\")\n    }\n    return (\n        <Paper className={clsx(classes.root, className)} elevation={0}>\n            <UserPopup\n                username={getUsername()}\n                open={Boolean(userMenuEl)}\n                anchorEl={userMenuEl}\n                onClose={handleUserMenuClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                onLogout={onLogout}\n            />\n            <div className={classes.top}>\n                <div className={classes.topLeft}>\n\n                </div>\n                <div className={classes.topRight}>\n                    <TaskPopup className={classes.actionIcon} />\n                    <Avatar className={classes.avatar} onClick={handleUserMenuClick}>\n                        { getUsername()[0] }\n                    </Avatar>\n                </div>\n            </div>\n            <div className={classes.titleContainer}>\n                <div className={classes.title}>\n                    {title}\n                </div>\n                { actions }\n            </div>\n\n            {\n                tabs && <Tabs value={controller.tabIndex} onChange={(e, idx) => controller.setTabIndex(idx)}>\n                    {\n                        tabs.map(label => (\n                            <Tab label={label} disableRipple/>\n                        ))\n                    }\n\n                </Tabs>\n            }\n\n        </Paper>\n    )\n}\n\nexport default PageHead","/home/aren/Desktop/YouPlus/ypw/src/components/ValueField/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/ListItemDialog/index.tsx",["769"],"import React, {ReactElement} from \"react\";\nimport {\n    Avatar, Button, Dialog, DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    ListItem,\n    ListItemAvatar,\n    ListItemText\n} from \"@material-ui/core\";\nimport {Dns} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface ListItemDialogPropsType {\n    open?: boolean\n    primary: string\n    secondary?: string\n    icon: ReactElement,\n    onClose: () => void\n    title: string\n    onOk: () => void\n    okText?: string,\n    text?:string\n}\n\nconst ListItemDialog = ({\n                            primary,\n                            icon,\n                            secondary,\n                            onOk,\n                            onClose,\n                            title,\n    text,\n                            okText = \"OK\",\n                            open = false\n                        }: ListItemDialogPropsType) => {\n    const classes = useStyles()\n    return (\n        <Dialog open={open} maxWidth={\"xl\"} onClose={onClose}>\n            <DialogTitle>\n                {title}\n            </DialogTitle>\n            <DialogContent className={classes.deleteDialogContent}>\n                <DialogContentText>\n                    {text}\n                </DialogContentText>\n                <ListItem className={classes.deleteDialogItem}>\n                    <ListItemAvatar>\n                        <Avatar>\n                            {icon}\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={primary} secondary={secondary}/>\n                </ListItem>\n            </DialogContent>\n            <DialogActions>\n                <Button color={\"secondary\"} onClick={onClose}>\n                    Cancel\n                </Button>\n                <Button color={\"secondary\"} onClick={onOk}>\n                    {okText}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default ListItemDialog;\n","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/index.tsx",["770","771","772","773","774"],"import {Button, Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\nimport React, {useEffect, useState} from \"react\";\nimport useStyles from \"./style\";\nimport {Disk, fetchDisks} from \"../../api/disks\";\nimport {CreateZPoolForm, useCreateZPoolForm} from \"./form\";\nimport PoolInfoStep from \"./step/info\";\nimport PoolSimpleEditStep from \"./step/simple\";\nimport PoolEditStep from \"./step/editor\";\nimport PoolConfirm from \"./step/confirm\";\nimport {createZFSPool} from \"../../api/zfs\";\n\nexport interface CreateZFSPoolDialogPropsType {\n    open?: boolean\n    onOk: () => void\n    onClose?: () => void\n}\n\n\nconst MAX_STEP = 3;\nconst StepName = [\n    \"Info\", \"Edit\", \"Confirm\"\n]\nconst CreateZFSPoolDialog = ({onClose, onOk, open = false}: CreateZFSPoolDialogPropsType) => {\n    const classes = useStyles()\n    const form = useCreateZPoolForm()\n    const [disks, setDisks] = useState<Disk[]>([])\n    const [stepIndex, setStepIndex] = useState<number>(0)\n\n    const loadDisks = async () => {\n        const response = await fetchDisks()\n        if (response) {\n            setDisks(response.disks)\n        }\n    }\n    useEffect(() => {\n        if (open) {\n            loadDisks()\n        }\n    }, [open])\n    const onDialogOk = () => {\n\n    }\n    const onFinish = async () => {\n        if (!form.name || !form.vdevTree) {\n            return\n        }\n        const response = await createZFSPool({\n            name:form.name,\n            conf:form.vdevTree\n        })\n        onOk()\n    }\n    const onNextClick = () => {\n        if (stepIndex === MAX_STEP - 1) {\n            onFinish()\n            return;\n        }\n        if (stepIndex > MAX_STEP - 1) {\n            return\n        }\n        if (stepIndex == 1) {\n            if (!form.advanceMode) {\n                form.setVDevTree({\n                    type: \"disk\",\n                    devices: form.pickupDisk.map(disk => {\n                        return {\n                            path: `/dev/${disk.name}`,\n                            type: \"disk\"\n                        }\n                    })\n                })\n            }\n        }\n        setStepIndex(stepIndex + 1)\n    }\n    const onPreviousClick = () => {\n        if (stepIndex == 0) {\n            return\n        }\n        setStepIndex(stepIndex - 1)\n    }\n    const isNextEnable = () => {\n        if (stepIndex === 0 && !form.name) {\n            return false\n        }\n        return stepIndex < MAX_STEP\n    }\n    const isPreviousEnable = () => {\n        return stepIndex !== 0\n    }\n    const getTitle = () => {\n        return `Create new pool > ${StepName[stepIndex]}`\n    }\n    const renderStep = () => {\n        switch (stepIndex) {\n            case 0:\n                return (\n                    <PoolInfoStep form={form} className={classes.stepView}/>\n                )\n            case 1:\n                if (form.advanceMode) {\n                    return <PoolEditStep className={classes.stepView}/>\n                } else {\n                    return <PoolSimpleEditStep form={form} disks={disks} className={classes.stepView}/>\n                }\n            case 2:\n                return (\n                    <PoolConfirm  form={form}/>\n                )\n        }\n    }\n    return (\n        <Dialog\n            open={open}\n            maxWidth='xl'\n            onClose={onClose}\n        >\n            <DialogTitle>\n                {getTitle()}\n            </DialogTitle>\n            <DialogContent className={classes.content}>\n                {renderStep()}\n            </DialogContent>\n            <DialogActions className={classes.action}>\n                <Button\n                    disabled={!isPreviousEnable()}\n                    onClick={onPreviousClick}\n                >Previous</Button>\n                <Button\n                    disabled={!isNextEnable()}\n                    onClick={onNextClick}\n                >{stepIndex === MAX_STEP - 1 ? \"Finish\" : \"Next\"}</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default CreateZFSPoolDialog;\n","/home/aren/Desktop/YouPlus/ypw/src/config.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/utils/request.ts",["775"],"import {extend, ResponseError} from 'umi-request'\nimport {ApplicationConfig} from '../config'\n\nlet URI = require('urijs');\nconst errorHandler = (error: ResponseError) => {\n    console.log(error)\n    if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.status);\n        console.log(error.response.headers);\n        console.log(error.data);\n        console.log(error.request);\n        return {status: error.response.status, data: error.data}\n    } else {\n        console.log(error.message);\n    }\n    // return {some: 'data'}; If return, return the value as a return. If you don't write it is equivalent to return undefined, you can judge whether the response has a value when processing the result.\n    // return {some: 'data'};\n};\nconst apiRequest = extend({\n    timeout: 10000,\n    credentials: 'omit',\n    errorHandler\n})\napiRequest.interceptors.request.use((url, options) => {\n    const token = localStorage.getItem(\"token\")\n    const apiUrl = localStorage.getItem(\"apiUrl\")\n    if (apiUrl) {\n      console.log(apiUrl)\n        const uri = new URI(apiUrl)\n        if (url === 'log') {\n            uri.port(8401)\n        }\n        url = uri.toString() + url\n    }\n\n    if (token) {\n        options.headers = {\n            ...options.headers,\n            \"Authorization\": `Bearer ${token}`\n        }\n    }\n    return {\n        url, options\n    }\n})\nexport default apiRequest\n","/home/aren/Desktop/YouPlus/ypw/src/model/user.ts",["776"],"import {createModel} from \"hox\";\nimport {fetchAuthToken} from \"../api/auth\";\nimport {ResponseError} from 'umi-request'\nimport {useLocalStorageState} from \"ahooks\";\n\nconst UserModel = () => {\n    const login = async (username: string, password: string) => {\n        try {\n            const response = await fetchAuthToken(username, password)\n            if (response.success) {\n                localStorage.setItem(\"token\", response.token)\n                localStorage.setItem(\"username\", username)\n                return {success: true}\n            }\n            return {success: false, message: response.reason}\n        }catch (e) {\n            const responseError : ResponseError = e\n            return {success: false, message: responseError.data.reason}\n        }\n    }\n    const logout = () => {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"username\")\n        localStorage.removeItem(\"apiUrl\")\n    }\n    return {\n        login,logout\n    }\n}\nconst useUserModel = createModel(UserModel)\nexport default useUserModel\n","/home/aren/Desktop/YouPlus/ypw/src/components/PageHead/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/form.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/ListItemDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/ValueField/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/api/auth.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/UserPopup/index.tsx",["777"],"import useStyles from \"./style\";\nimport {Avatar, Button, ButtonBase, Card, Divider, Popover, PopoverProps, Typography} from \"@material-ui/core\";\nimport {Person} from \"@material-ui/icons\";\n\nexport interface UserPopupPropsType  {\n    username: string\n    onLogout: () => void\n}\n\nconst UserPopup = ({onLogout,username,...other}: UserPopupPropsType & PopoverProps) => {\n    const classes = useStyles()\n    return (\n        <Popover {...other}>\n            <Card className={classes.root}>\n                <Avatar className={classes.avatar} >\n                    <Person />\n                </Avatar>\n                <Typography variant={\"h5\"}>\n                    {username}\n                </Typography>\n                <Divider/>\n                <Button variant={\"outlined\"} onClick={onLogout}>\n                    Sign out\n                </Button>\n            </Card>\n        </Popover>\n    )\n}\n\nexport default UserPopup;\n","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/editor/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/confirm/index.tsx",["778"],"import useStyles from './style'\nimport clsx from 'clsx'\nimport {Vdev} from \"../../../../api/zfs\";\nimport ZFSTreeView from \"../../../ZFSTreeView\";\nimport ValueField from \"../../../ValueField\";\nimport React from \"react\";\nimport {CreateZPoolForm} from \"../../form\";\nimport {Divider} from \"@material-ui/core\";\n\nexport interface PoolConfirmPropsType {\n    className?: string\n    form:CreateZPoolForm\n}\n\nconst PoolConfirm = ({className,form}: PoolConfirmPropsType): React.ReactElement => {\n    const classes = useStyles()\n    return (\n        <div className={clsx(className,classes.root)}>\n            <div className={classes.info}>\n                <ValueField label=\"name\" value={form.name} />\n            </div>\n            <Divider   />\n            <div className={classes.vdev}>\n                {\n                    form.vdevTree && <ZFSTreeView root={form.vdevTree} />\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default PoolConfirm\n","/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/simple/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/info/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/layout/Base/parts/Task/index.tsx",["779"],"import useStyles from \"./style\";\nimport {IconButton, Paper, Popover, Typography} from \"@material-ui/core\";\nimport {Report, ViewDay} from \"@material-ui/icons\";\nimport {SyntheticEvent, useState} from \"react\";\nimport clsx from \"clsx\";\nimport InstallAppTaskCard from \"../../../../components/InstallAppTaskCard\";\nimport useTaskModel from \"../../../../model/task\";\nimport {useInterval} from \"ahooks\";\nimport task from \"../../../../model/task\";\n\nexport interface TaskPopupPropsType {\n    className?:any\n}\n\nconst TaskPopup = ({className}: TaskPopupPropsType) => {\n    const classes = useStyles()\n    const taskModel = useTaskModel()\n    useInterval(() => {\n       taskModel.refresh()\n    },2000)\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event:SyntheticEvent<any>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n    return (\n        <>\n            <IconButton onClick={handleClick} className={clsx(className,classes.root)}>\n                <ViewDay />\n            </IconButton>\n            <Popover\n                id={id}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n               <Paper className={classes.content}>\n                   {\n                       taskModel.tasks.length > 0 && taskModel.tasks.map(it => {\n                           return (\n                               <InstallAppTaskCard className={classes.item} task={it}/>\n                           )\n                       })\n                   }\n                   {\n                       taskModel.tasks.length === 0 &&\n                           <div className={classes.empty}>\n                               <Report className={classes.icon}/>\n                               <Typography variant={\"subtitle1\"}>\n                                   No task\n                               </Typography>\n                           </div>\n                   }\n               </Paper>\n            </Popover>\n        </>\n    )\n}\n\nexport default TaskPopup;\n","/home/aren/Desktop/YouPlus/ypw/src/components/UserPopup/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/model/task.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/info/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/simple/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/confirm/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/CreateZFSPoolDialog/step/editor/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/layout/Base/parts/Task/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/api/task.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppTaskCard/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/DiskSelectTable/index.tsx",["780"],"import useStyles from './style'\nimport clsx from 'clsx'\nimport {Disk} from \"../../api/disks\";\nimport {IconButton, MenuItem, Select, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport filesize from \"filesize\";\nimport {Close} from \"@material-ui/icons\";\n\nexport interface DiskSelectTablePropsType {\n    className?: string\n    disks: Disk[]\n    selectedDisk: Disk[]\n    onDiskSelectChange: (disks: Disk[]) => void\n}\n\nconst DiskSelectTable = ({\n                             className,\n                             disks,\n                             selectedDisk,\n                             onDiskSelectChange\n                         }: DiskSelectTablePropsType): React.ReactElement => {\n    const classes = useStyles()\n    const getSelectDisk = () => {\n        return disks.filter(disk => selectedDisk.find(it => it.name === disk.name) === undefined)\n    }\n    const onDiskSelect = (diskName:any) => {\n        const disk = disks.find(it => it.name === diskName)\n        if (!disk) {\n            return\n        }\n        onDiskSelectChange([...selectedDisk,disk])\n    }\n    const onDeleteDisk = (diskName:string) => {\n        onDiskSelectChange(selectedDisk.filter(it => it.name !== diskName))\n    }\n    return (\n        <div>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            Name\n                        </TableCell>\n                        <TableCell>\n                            Model\n                        </TableCell>\n                        <TableCell>\n                            Size\n                        </TableCell>\n                        <TableCell>\n                           Action\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        selectedDisk.map(disk => {\n                            return (\n                                <TableRow key={disk.name}>\n                                    <TableCell>\n                                        { disk.name }\n                                    </TableCell>\n                                    <TableCell>\n                                        { disk.model }\n                                    </TableCell>\n                                    <TableCell>\n                                        {filesize(disk.size) }\n                                    </TableCell>\n                                    <TableCell>\n                                        <IconButton size={\"small\"} onClick={() => onDeleteDisk(disk.name)}>\n                                            <Close />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        })\n                    }\n                </TableBody>\n            </Table>\n            <Select fullWidth onChange={(e) => onDiskSelect(e.target.value)} variant={\"outlined\"} size={\"small\"} className={classes.select}>\n                {\n                    getSelectDisk().map(disk => {\n                        return (\n                            <MenuItem value={disk.name}>{`${disk.name} | ${ disk.model} | ${ filesize(disk.size)}`}</MenuItem>\n                        )\n                    })\n                }\n            </Select>\n        </div>\n    )\n}\n\nexport default DiskSelectTable\n","/home/aren/Desktop/YouPlus/ypw/src/components/ZFSTreeView/index.tsx",["781"],"import useStyles from './style'\nimport clsx from 'clsx'\nimport {TreeItem, TreeView} from \"@material-ui/lab\";\nimport {Vdev} from \"../../api/zfs\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport {randomText} from \"../../utils/random\";\nimport {\n    AppsRounded,\n    DnsRounded,\n    LayersRounded,\n    Memory,\n    SettingsBackupRestoreRounded,\n    StorageRounded\n} from \"@material-ui/icons\";\nexport interface ZFSTreeViewPropsType {\n    className?: string\n    root:Vdev\n}\n\nconst ZFSTreeView = ({className,root}: ZFSTreeViewPropsType): React.ReactElement => {\n    const classes = useStyles()\n    console.log(root)\n    const renderRootIcon = (node:Vdev) => {\n        switch (node.type) {\n            case \"disk\":\n                return (\n                    <StorageRounded />\n                )\n            case \"mirror\":\n                return (\n                    <LayersRounded />\n                )\n            case \"raidz\":\n                return (\n                    <DnsRounded />\n                )\n        }\n    }\n\n    const renderTree = (node:Vdev) => {\n        const getLabel = () => {\n            if (node.path) {\n                return node.path\n            }\n            return node.type\n        }\n        return (\n            <TreeItem nodeId={randomText()} label={getLabel()} icon={renderRootIcon(node)}>\n                {\n                    node.devices &&  <TreeItem nodeId={randomText()} label=\"devices\" icon={<AppsRounded />}>\n                        {\n                            node.devices?.map(it => renderTree(it))\n                        }\n                    </TreeItem>\n                }\n                {\n                    node.l2 &&  <TreeItem nodeId={randomText()} label=\"l2\" icon={<Memory />}>\n                        {\n                            node.l2?.map(it => renderTree(it))\n                        }\n                    </TreeItem>\n                }\n                {\n                    node.spares &&  <TreeItem nodeId={randomText()} label=\"spares\" icon={<SettingsBackupRestoreRounded />} >\n                        {\n                            node.spares?.map(it => renderTree(it))\n                        }\n                    </TreeItem>\n                }\n\n            </TreeItem>\n        )\n    }\n    return (\n        <TreeView\n            className={classes.root}\n            disableSelection\n            defaultCollapseIcon={<ExpandMoreIcon />}\n            defaultExpandIcon={<ChevronRightIcon />}\n\n        >\n            {\n                renderTree(root)\n            }\n        </TreeView>\n    );\n}\n\nexport default ZFSTreeView\n","/home/aren/Desktop/YouPlus/ypw/src/utils/random.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/ZFSTreeView/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/DiskSelectTable/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppTaskCard/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/layout/Base/index.tsx",["782"],"import * as React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppNavigation from \"./parts/Nav\";\nimport AuthLayout from \"../Auth\";\nimport Notification from \"../Notification\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        content: {\n            flexGrow: 1,\n            minHeight: \"100vh\",\n            backgroundColor: \"#EEEEEE\",\n        },\n    }),\n);\n\nconst BaseLayout = ({children}: { children: any }) => {\n    const classes = useStyles();\n    return (\n        <AuthLayout>\n            <Notification />\n            <div className={classes.root}>\n                <CssBaseline/>\n                {/*<AppBar position=\"fixed\" className={classes.appBar} elevation={1}>*/}\n                {/*  <AppToolbar />*/}\n                {/*</AppBar>*/}\n\n                <AppNavigation/>\n                <main className={classes.content}>\n                    {children}\n                </main>\n            </div>\n        </AuthLayout>\n    );\n};\nexport default BaseLayout\n","/home/aren/Desktop/YouPlus/ypw/src/pages/UserDetail/index.tsx",["783","784","785"],"import useStyles from './style'\nimport {\n    Button,\n    Divider,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography\n} from \"@material-ui/core\";\nimport React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport useUserDetailModel from \"./model\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport PageHead from \"../../components/PageHead\";\nimport {Delete} from \"@material-ui/icons\";\n\nexport interface UserDetailPropsType {\n    className?: string\n}\n\nconst UserDetail = ({className}: UserDetailPropsType): React.ReactElement => {\n    const classes = useStyles()\n    const {name}: any = useParams();\n    const model = useUserDetailModel()\n    const pageHeadController = usePageHeadController({})\n    useEffect(() => {\n        model.setUsername(name)\n        model.refreshShareFolders(name)\n    },[])\n    return (\n        <div className={classes.root}>\n            <PageHead\n                title={ model.username ?? \"\" }\n                controller={pageHeadController}\n            />\n            <div className={classes.content}>\n                <Paper>\n                    <div className={classes.tableSectionHeader}>\n                        <Typography variant={\"h5\"}>\n                            Folders\n                        </Typography>\n                    </div>\n                    <Divider />\n                    <TableContainer>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        Folder\n                                    </TableCell>\n                                    <TableCell>\n                                        Access\n                                    </TableCell>\n                                    <TableCell>\n                                        Read\n                                    </TableCell>\n                                    <TableCell>\n                                        Write\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    model.userShareFolder.map(folder => {\n                                        return (\n                                            <TableRow key={folder.name}>\n                                                <TableCell>\n                                                    {\n                                                        folder.name\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        folder.access ? \"yes\":\"no\"\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        folder.read ? \"yes\":\"no\"\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        folder.write ? \"yes\":\"no\"\n                                                    }\n                                                </TableCell>\n                                            </TableRow>\n                                        )\n                                    })\n                                }\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Paper>\n            </div>\n        </div>\n    )\n}\n\nexport default UserDetail\n","/home/aren/Desktop/YouPlus/ypw/src/pages/System/index.tsx",["786","787","788"],"import {Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Paper, Typography} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport useStyles from \"./style\";\nimport InfoCard from \"../../components/InfoCard\";\nimport {rebootDevice, shutdownDevice} from \"../../api/os\";\nimport {showAPIResponseErrorMessage, showGlobalSnackMessage} from \"../../utils/message\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\n\nexport interface SystemPagePropsType {\n\n}\ntype ActionTypes = \"Reboot\" | \"Shutdown\"\nconst SystemPage = ({}: SystemPagePropsType) => {\n    const classes = useStyles()\n    const [isConfirmOpen, setIsConfirmOpen] = useState(false)\n    const [confirmContent, setConfirmContent] = useState<string>()\n    const [confirmAction,setConfirmAction] = useState<ActionTypes>()\n    const pageHeadController = usePageHeadController({})\n    const openConfirmActionDialog = (content:string,action:ActionTypes) => {\n        setConfirmContent(content)\n        setConfirmAction(action)\n        setIsConfirmOpen(true)\n    }\n    const onConfirmOk = async () => {\n        setIsConfirmOpen(false)\n        if (!confirmAction) {\n            return\n        }\n        let response;\n        switch (confirmAction){\n            case \"Shutdown\":\n                response = await shutdownDevice();\n                break;\n            case \"Reboot\":\n                response = await rebootDevice();\n                return;\n        }\n        if (response) {\n            if (response.success) {\n                showGlobalSnackMessage(`${confirmAction} success`,{variant:\"success\"})\n            }else{\n                showAPIResponseErrorMessage(response)\n            }\n        }\n\n    }\n    return (\n        <div>\n            <Dialog open={isConfirmOpen} onClose={() => setIsConfirmOpen(false)}>\n                <DialogTitle>\n                    Confirm run\n                </DialogTitle>\n                <DialogContent>\n                    { confirmContent }\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setIsConfirmOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button onClick={onConfirmOk}>\n                        OK\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <PageHead\n                title={\"System\"}\n                controller={pageHeadController}\n            />\n            <Grid container>\n                <Grid item xs={12} sm={3} md={3} lg={2} xl={2} className={classes.item}>\n                    <InfoCard\n                        label={\"Action\"}\n                        value={\"Shutdown\"}\n                        valueSize={20}\n                        bottom={\n                            <>\n                                <Button onClick={() => openConfirmActionDialog(\"Device will shutdown!\",\"Shutdown\")}>\n                                    Run\n                                </Button>\n                            </>\n                        }\n                    />\n                </Grid>\n                <Grid item xs={12} sm={3} md={3} lg={2} xl={2} className={classes.item}>\n                    <InfoCard\n                        label={\"Action\"}\n                        value={\"Reboot\"}\n                        valueSize={20}\n                        bottom={\n                            <>\n                                <Button onClick={() => openConfirmActionDialog(\"Device will reboot!\",\"Reboot\")}>\n                                    Run\n                                </Button>\n                            </>\n                        }\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default SystemPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/PoolDetail/index.tsx",["789","790","791","792"],"import useStyles from \"./style\";\nimport {Grid, Paper, Typography} from \"@material-ui/core\";\nimport React, {useEffect} from \"react\";\nimport usePoolDetailModel from \"./model\";\nimport {useParams} from \"react-router-dom\";\nimport InfoCard from \"../../components/InfoCard\";\nimport filesize from \"filesize\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport {DecompositionTreeGraph} from \"@ant-design/charts\";\nimport {TreeGraphData} from \"@ant-design/charts/es/graphs/interface\";\nimport {ZFSTree} from \"../../api/zfs\";\nimport {useMount} from \"ahooks\";\n\nexport interface PoolDetailPagePropsType {\n\n}\n\n\nconst PoolDetailPage = ({}: PoolDetailPagePropsType) => {\n    const {name}: any = useParams();\n    const classes = useStyles()\n    const model = usePoolDetailModel()\n    const pageHeadController = usePageHeadController({})\n    useMount(() => {\n        model.refresh(name)\n    })\n\n    const getTreeData = () => {\n        const tree = model.pool?.tree\n        if (!tree) {\n            return {}\n        }\n        const generateData = (data: ZFSTree): any => {\n            return {\n                value: {\n                    title: `${data.name} (${data.type})`,\n                    items: [\n                        {\n                            text: 'Total',\n                            value: filesize(data.size ?? 0),\n                        },\n                        {\n                            text: 'free',\n                            value:  filesize(data.free ?? 0),\n                        },\n                        {\n                            text: 'alloc',\n                            value:  filesize(data.alloc ?? 0),\n                        },\n                    ],\n                },\n                children: [\n                    ...(data.devices ?? []).map(it => generateData(it)),\n                    ...(data.l2Cache ?? []).map(it => generateData(it)),\n                    ...(data.spares ?? []).map(it => generateData(it)),\n                ]\n            }\n        }\n        return generateData(tree)\n    }\n    const config = {\n        data:getTreeData(),\n        autoFit:false,\n        markerCfg: (cfg: any) => {\n            const {children} = cfg;\n            return {\n                show: children?.length,\n            };\n        },\n        behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n    };\n    return (\n        <div className={classes.root}>\n            <PageHead title={model.pool?.name ?? \"Pool\"} controller={pageHeadController}/>\n            <div className={classes.content}>\n                <Grid container spacing={4}>\n                    <Grid xs={2} item>\n                        <InfoCard label={\"Size\"} value={filesize(model.pool?.tree.size ?? 0)} valueSize={18}/>\n                    </Grid>\n                    <Grid xs={2} item>\n                        <InfoCard label={\"Used\"} value={filesize(model.pool?.tree.alloc ?? 0)} valueSize={18}/>\n                    </Grid>\n                    <Grid xs={2} item>\n                        <InfoCard label={\"Free\"} value={filesize(model.pool?.tree.free ?? 0)} valueSize={18}/>\n                    </Grid>\n                    <Grid xs={12} item>\n                        <Paper>\n                            <div className={classes.paperLabel}>\n                                VdevTree\n                            </div>\n                            {\n                                model.pool?.tree &&\n                                <Paper className={classes.devTreeContainer}>\n                                    <DecompositionTreeGraph {...config} />\n                                </Paper>\n                            }\n                        </Paper>\n\n                    </Grid>\n                </Grid>\n\n            </div>\n        </div>\n    )\n}\n\nexport default PoolDetailPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/GroupDetail/index.tsx",["793","794","795","796"],"import React, {ReactElement, useEffect} from \"react\";\nimport useStyles from \"./style\";\nimport useGroupDetailModel from \"./model\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {Button, Paper, Typography} from \"@material-ui/core\";\nimport UserListCard from \"../../components/UserListCard\";\nimport UserSelectDialog from \"../../components/UserSelectDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport {Delete} from \"@material-ui/icons\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\n\nexport interface GroupDetailPagePropsType {\n\n}\n\nconst GroupDetailPage = ({}: GroupDetailPagePropsType): ReactElement => {\n    const {name}: any = useParams()\n    const classes = useStyles()\n    const model = useGroupDetailModel()\n    const layoutModel = useLayoutModel()\n    const history = useHistory()\n    const pageHeadController = usePageHeadController({})\n\n    useEffect(() => {\n        model.setGroupName(name)\n    }, [])\n    return (\n        <div className={classes.root}>\n            <PageHead\n                title={model.groupDetail?.name ?? \"\"}\n                controller={pageHeadController}\n                actions={\n                    <>\n                        <Button\n                            variant={\"text\"}\n                            startIcon={<Delete/>}\n                            onClick={() => {\n                                layoutModel.showConfirmDialog({\n                                    title: \"Remove confirm\",\n                                    message:\"confirm remove\",\n                                    onOk:async () => {\n                                        await model.remove()\n                                        history.replace(\"/groups\")\n                                    }\n                                })\n                            }}\n                        >\n                            Remove\n                        </Button>\n                    </>\n                }\n            />\n            <UserSelectDialog\n                onCancel={() => layoutModel.switchDialog(\"group/addUser\")}\n                onOk={(username) => {\n                    layoutModel.switchDialog(\"group/addUser\")\n                    model.addUser([username])\n                }}\n                except={(model.groupDetail?.users ?? []).map(it => it.name)}\n                open={layoutModel.getDialogOpen(\"group/addUser\")}\n            />\n            <div className={classes.content}>\n                <UserListCard\n                    onRemove={(username) => {\n                        model.removeUser([username])\n                    }}\n                    className={classes.userList}\n                    users={\n                        model.groupDetail?.users ?? []\n                    }\n                    actions={<Button onClick={() => layoutModel.switchDialog(\"group/addUser\")}>Add user</Button>}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default GroupDetailPage\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Groups/index.tsx",["797","798","799"],"import React, {ReactElement, useEffect} from \"react\";\nimport ListPage from \"../../components/ListPage\";\nimport {Avatar, Button, List, ListItem, ListItemAvatar, ListItemText} from \"@material-ui/core\";\nimport {Add, Group} from \"@material-ui/icons\";\nimport useUserGroupsModel from \"./model\";\nimport NewGroupDialog from \"../../components/NewGroupDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport useStyles from \"./style\";\nimport {useHistory} from \"react-router-dom\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport PageHead from \"../../components/PageHead\";\n\nexport interface GroupsPagePropsType {\n\n}\n\nconst GroupsPage = ({}: GroupsPagePropsType): ReactElement => {\n    const classes = useStyles()\n    const model = useUserGroupsModel()\n    const layoutModel = useLayoutModel()\n    const history = useHistory()\n    useEffect(() => {\n        model.fetchData()\n    }, [])\n    const pageHeadController = usePageHeadController({})\n    return (\n        <div>\n            <NewGroupDialog\n                onOk={(name) => {\n                    model.create(name)\n                    layoutModel.switchDialog(\"newgroup\")\n                }}\n                onCancel={() => layoutModel.switchDialog(\"newgroup\")}\n                open={layoutModel.getDialogOpen(\"newgroup\")}\n            />\n            <PageHead\n                title={\"Groups\"}\n                controller={pageHeadController}\n                actions={\n                    <>\n                        <Button startIcon={<Add/>} variant={\"text\"}\n                                onClick={() => layoutModel.switchDialog(\"newgroup\")}>\n                            New user group\n                        </Button>\n                    </>\n                }\n\n            />\n            <List>\n                {\n                    model.groups.map(group => {\n                        return (\n                            <ListItem key={group.gid} button onClick={() => {\n                                history.push(`/group/${group.name}/info`)\n                            }}>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Group/>\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={group.name} secondary={group.type}/>\n                            </ListItem>\n                        )\n                    })\n\n                }\n            </List>\n\n\n        </div>\n    )\n}\n\nexport default GroupsPage\n","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolderDetail/index.tsx",["800","801","802"],"import React, {ReactElement, useEffect, useState} from \"react\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport useShareFolderDetailModel from \"./model\";\nimport useStyles from \"./style\";\nimport InfoCard from \"../../components/InfoCard\";\nimport {Button, Grid} from \"@material-ui/core\";\nimport UserListCard from \"../../components/UserListCard\";\nimport UserSelectDialog from \"../../components/UserSelectDialog\";\nimport SwitchSelectDialog from \"../../components/SwitchSelectDialog\";\nimport {Delete} from \"@material-ui/icons\";\nimport useLayoutModel from \"../../model/layout\";\nimport UserGroupSelectDialog from \"../../components/UserGroupSelectDialog\";\nimport UserAndGroupListCard from \"../../components/UserAndGroupListCard\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport PageHead from \"../../components/PageHead\";\n\nexport interface ShareFolderDetailPropsType {\n\n}\n\ntype UserAndGroupPickModeType =\n    \"readUsers\"\n    | \"writeUsers\"\n    | \"validUsers\"\n    | \"invalidUsers\"\n    | \"validGroup\"\n    | \"invalidGroup\"\n    | 'readGroup'\n    | 'writeGroup'\ntype SwitchSelectTargetType = \"public\" | 'readonly' | \"writable\" | 'enable'\nconst ShareFolderDetail = ({}: ShareFolderDetailPropsType): ReactElement => {\n    const {name}: any = useParams();\n    const classes = useStyles()\n    const model = useShareFolderDetailModel()\n    const layoutModel = useLayoutModel()\n    const history = useHistory()\n    useEffect(() => {\n        model.initData(name)\n    }, [])\n    const [pickUpUserMode, setPickUpUserMode] = useState<UserAndGroupPickModeType | undefined>()\n    const [pickUpGroupMode, setPickUpGroupMode] = useState<UserAndGroupPickModeType | undefined>()\n    const [pickUserExcept, setPickUserExcept] = useState<string[]>([])\n    const [pickGroupExcept, setPickGroupExcept] = useState<string[]>([])\n    const [switchSelectTarget, setSwitchSelectTarget] = useState<SwitchSelectTargetType | undefined>()\n    const pageHeadController = usePageHeadController({})\n    const onPickupUserOk = async (name: string) => {\n        if (!model.folder) {\n            return\n        }\n        const option = {\n            public: model.folder.public,\n            enable: model.folder.enable,\n            readonly: model.folder.readonly\n        }\n        switch (pickUpUserMode) {\n            case \"readUsers\":\n                model.update({\n                    ...option,\n                    readUsers: [...(model.folder?.readUsers ?? []).map(it => it.name), name]\n                })\n                break;\n            case \"writeUsers\":\n                model.update({\n                    ...option,\n                    writeUsers: [...(model.folder?.writeUsers ?? []).map(it => it.name), name]\n                })\n                break;\n            case \"validUsers\":\n                model.update({\n                    ...option,\n                    validUsers: [...(model.folder?.validUsers ?? []).map(it => it.name), name]\n                })\n                break;\n            case \"invalidUsers\":\n                model.update({\n                    ...option,\n                    invalidUsers: [...(model.folder?.invalidUsers ?? []).map(it => it.name), name]\n                })\n                break;\n            case 'validGroup':\n                model.update({\n                    ...option,\n                    validGroups: [...(model.folder?.validGroups ?? []).map(it => it.name), name]\n                })\n                break;\n        }\n        setPickUpUserMode(undefined)\n    }\n    const onPickupGroupOk = (name: string) => {\n        if (!model.folder) {\n            return\n        }\n        const option = {\n            public: model.folder.public,\n            enable: model.folder.enable,\n            readonly: model.folder.readonly\n        }\n        switch (pickUpGroupMode) {\n            case 'validGroup':\n                model.update({\n                    ...option,\n                    validGroups: [...(model.folder?.validGroups ?? []).map(it => it.name), name]\n                })\n                break;\n            case 'invalidGroup':\n                model.update({\n                    ...option,\n                    invalidGroups: [...(model.folder?.invalidGroups ?? []).map(it => it.name), name]\n                })\n                break;\n            case 'readGroup':\n                model.update({\n                    ...option,\n                    readGroups: [...(model.folder?.readGroups ?? []).map(it => it.name), name]\n                })\n                break;\n            case 'writeGroup':\n                model.update({\n                    ...option,\n                    writeGroups: [...(model.folder?.writeGroups ?? []).map(it => it.name), name]\n                })\n                break;\n        }\n        setPickUpGroupMode(undefined)\n    }\n    const onSwitchSelect = (value: boolean) => {\n        if (!model.folder) {\n            return\n        }\n        const option = {\n            public: model.folder.public,\n            enable: model.folder.enable,\n            readonly: model.folder.readonly\n        }\n        switch (switchSelectTarget) {\n            case \"public\":\n                option.public = value\n                break;\n            case 'readonly':\n                option.readonly = value\n                break;\n            case 'enable':\n                option.enable = value\n        }\n        model.update(option)\n        setSwitchSelectTarget(undefined)\n\n    }\n    return (\n        <div className={classes.root}>\n            <UserSelectDialog\n                onCancel={() => setPickUpUserMode(undefined)}\n                onOk={onPickupUserOk}\n                open={Boolean(pickUpUserMode)}\n                except={pickUserExcept}\n            />\n            <UserGroupSelectDialog\n                onCancel={() => setPickUpGroupMode(undefined)}\n                onOk={onPickupGroupOk}\n                open={Boolean(pickUpGroupMode)}\n                except={pickGroupExcept}\n            />\n            <SwitchSelectDialog\n                onOk={onSwitchSelect}\n                onClose={() => setSwitchSelectTarget(undefined)}\n                open={Boolean(switchSelectTarget)}\n            />\n\n            <PageHead\n                title={model.folder?.name ?? \"\"}\n                controller={pageHeadController}\n                actions={\n                    <>\n                        <Button\n                            variant={'text'}\n                            size={\"small\"}\n                            startIcon={<Delete/>}\n                            onClick={() => {\n                                layoutModel.showConfirmDialog({\n                                    title: 'Remove Confirm',\n                                    message: 'Remove folder will lost ALL DATA in folder',\n                                    onOk: async () => {\n                                        await model.remove()\n                                        history.goBack()\n                                    }\n                                })\n                            }}\n                        >\n                            Remove folder\n                        </Button>\n                    </>\n                }\n            />\n            <div className={classes.container}>\n                <div className={classes.content}>\n                    <Grid container spacing={4} className={classes.grid}>\n                        <Grid xs={12} sm={6} md={4} lg={3} xl={3} item>\n                            <InfoCard label={\"folder name\"} value={model.folder?.name} valueSize={18}\n                                      className={classes.infoCard}/>\n                        </Grid>\n                        <Grid xs={12} sm={6} md={4} lg={3} xl={3} item>\n                            <InfoCard label={\"storage\"} value={model.folder?.storage.id} valueSize={18}\n                                      className={classes.infoCard}/>\n                        </Grid>\n                        <Grid xs={12} sm={6} md={4} lg={3} xl={3} item>\n                            <InfoCard\n                                label={\"public\"}\n                                value={model.folder?.public ? \"yes\" : \"no\"}\n                                valueSize={18}\n                                className={classes.infoCard}\n                                onEdit={() => setSwitchSelectTarget(\"public\")}\n                            />\n                        </Grid>\n                        <Grid xs={12} sm={6} md={4} lg={3} xl={3} item>\n                            <InfoCard\n                                label={\"readonly\"}\n                                value={model.folder?.readonly ? \"yes\" : \"no\"}\n                                valueSize={18}\n                                className={classes.infoCard}\n                                onEdit={() => setSwitchSelectTarget(\"readonly\")}\n                            />\n                        </Grid>\n                        <Grid xs={12} sm={6} md={4} lg={3} xl={3} item>\n                            <InfoCard\n                                label={\"enable\"}\n                                value={model.folder?.enable ? \"yes\" : \"no\"}\n                                valueSize={18}\n                                className={classes.infoCard}\n                                onEdit={() => setSwitchSelectTarget(\"enable\")}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid className={classes.grid} container spacing={4}>\n                        <Grid xs={12} sm={6} xl={6} item>\n                            <UserAndGroupListCard\n                                users={model.folder?.validUsers}\n                                groups={model.folder?.validGroups}\n                                title={\"valid list\"}\n                                actions={\n                                    <>\n                                        <Button onClick={() => {\n                                            setPickUserExcept((model.folder?.validUsers ?? []).map(it => it.name))\n                                            setPickUpUserMode(\"validUsers\")\n                                        }}>\n                                            add user\n                                        </Button>\n                                        <Button onClick={() => {\n                                            setPickGroupExcept((model.folder?.validGroups ?? []).map(it => it.name))\n                                            setPickUpGroupMode(\"validGroup\")\n                                        }}>\n                                            add group\n                                        </Button>\n                                    </>\n                                }\n                                onRemoveUser={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        validUsers: model.folder?.validUsers.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                                onRemoveGroup={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        validGroups: model.folder?.validGroups.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                            />\n                        </Grid>\n                        <Grid xs={12} sm={6} xl={6} item>\n                            <UserAndGroupListCard\n                                users={model.folder?.invalidUsers}\n                                groups={model.folder?.invalidGroups}\n                                title={\"invalid list\"}\n                                actions={\n                                    <>\n                                        <Button onClick={() => {\n                                            setPickUserExcept((model.folder?.invalidUsers ?? []).map(it => it.name))\n                                            setPickUpUserMode(\"invalidUsers\")\n                                        }}>\n                                            add user\n                                        </Button>\n                                        <Button onClick={() => {\n                                            setPickGroupExcept((model.folder?.invalidGroups ?? []).map(it => it.name))\n                                            setPickUpGroupMode(\"invalidGroup\")\n                                        }}>\n                                            add group\n                                        </Button>\n                                    </>\n                                }\n                                onRemoveUser={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        public: model.folder.public,\n                                        enable: model.folder.enable,\n                                        readonly: model.folder.readonly,\n                                        invalidUsers: model.folder?.invalidUsers.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                                onRemoveGroup={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        public: model.folder.public,\n                                        enable: model.folder.enable,\n                                        readonly: model.folder.readonly,\n                                        invalidGroups: model.folder?.invalidGroups.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                            />\n                        </Grid>\n                        <Grid xs={12} sm={6} xl={6} item>\n                            <UserAndGroupListCard\n                                users={model.folder?.readUsers}\n                                groups={model.folder?.readGroups}\n                                title={\"read list\"}\n                                actions={\n                                    <>\n                                        <Button onClick={() => {\n                                            setPickUserExcept((model.folder?.readUsers ?? []).map(it => it.name))\n                                            setPickUpUserMode(\"readUsers\")\n                                        }}>\n                                            add user\n                                        </Button>\n                                        <Button onClick={() => {\n                                            setPickGroupExcept((model.folder?.readGroups ?? []).map(it => it.name))\n                                            setPickUpGroupMode(\"readGroup\")\n                                        }}>\n                                            add group\n                                        </Button>\n                                    </>\n                                }\n                                onRemoveUser={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        readUsers: model.folder?.readUsers.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                                onRemoveGroup={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        readGroups: model.folder?.readGroups.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                            />\n                        </Grid>\n                        <Grid xs={12} sm={6} xl={6} item>\n                            <UserAndGroupListCard\n                                users={model.folder?.writeUsers}\n                                groups={model.folder?.writeGroups}\n                                title={\"write list\"}\n                                onRemoveUser={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        writeUsers: model.folder?.writeUsers.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                                onRemoveGroup={(name) => {\n                                    if (!model.folder) {\n                                        return\n                                    }\n                                    model.update({\n                                        writeGroups: model.folder?.writeGroups.map(it => it.name).filter(it => it !== name)\n                                    })\n                                }}\n                                actions={\n                                    <>\n                                        <Button onClick={() => {\n                                            setPickUserExcept((model.folder?.writeUsers ?? []).map(it => it.name))\n                                            setPickUpUserMode(\"writeUsers\")\n                                        }}>\n                                            add user\n                                        </Button>\n                                        <Button onClick={() => {\n                                            setPickGroupExcept((model.folder?.writeGroups ?? []).map(it => it.name))\n                                            setPickUpGroupMode(\"writeGroup\")\n                                        }}>\n                                            add group\n                                        </Button>\n                                    </>\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default ShareFolderDetail\n","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/index.tsx",["803","804"],"import {ReactElement, useEffect} from \"react\";\nimport useStyles from \"./style\";\nimport {Grid} from \"@material-ui/core\";\nimport useDashboardModel from \"./model\";\nimport DiskIcon from \"../../components/Icons/DiskIcon\";\nimport {useInterval} from \"ahooks\";\nimport IconStatCard from \"../../components/IconStatCard\";\nimport {Apps, Archive, Dns, Folder, Person} from \"@material-ui/icons\";\nimport SystemInfoCard from \"./part/SystemInfoCard\";\nimport CpuMonitorCard from \"./part/CpuMonitorCard\";\nimport MemoryMonitorCard from \"./part/MemoryMonitorCard\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\n\nexport interface DashboardPagePropsType {\n\n}\n\nconst DashboardPage = ({}: DashboardPagePropsType): ReactElement => {\n    const classes = useStyles()\n    const model = useDashboardModel()\n    const pageHeadController = usePageHeadController({})\n    useInterval(() => {\n        model.initData()\n        model.refreshMonitorData()\n    },4000,{immediate:true})\n    useEffect(() => {\n        model.refreshSystemInfo()\n    },[])\n    return (\n        <div className={classes.root}>\n            <PageHead title={\"Dashboard\"} controller={pageHeadController} />\n            <div className={classes.content}>\n                <Grid container spacing={2}>\n                    <Grid item xs={6} sm={3} md={4} lg={2} xl={2}>\n                        <IconStatCard\n                            label={\"Disks\"}\n                            value={`${model.deviceInfo?.diskCount ?? 0} Disks`}\n                            icon={<DiskIcon />}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3} md={4} lg={2} xl={2}>\n                        <IconStatCard\n                            label={\"Storage\"}\n                            value={`${model.deviceInfo?.storageCount ?? 0} Storage`}\n                            icon={<Archive />}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3} md={4} lg={2} xl={2}>\n                        <IconStatCard\n                            label={\"Share Folder\"}\n                            value={`${model.deviceInfo?.shareFolderCount ?? 0} Share folders`}\n                            icon={<Folder />}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3} md={4} lg={2} xl={2}>\n                        <IconStatCard\n                            label={\"Users\"}\n                            value={`${model.deviceInfo?.userCount ?? 0} Users`}\n                            icon={<Person />}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3} md={4} lg={2} xl={2}>\n                        <IconStatCard\n                            label={\"ZFS pool\"}\n                            value={`${model.deviceInfo?.zfsCount ?? 0} Pool`}\n                            icon={<Dns />}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3} md={4} lg={2} xl={2}>\n                        <IconStatCard\n                            label={\"Apps\"}\n                            value={`${model.deviceInfo?.appCount ?? 0} apps`}\n                            icon={<Apps />}\n                        />\n                    </Grid>\n                    {\n                        model.systemInfo &&\n                        <Grid item xs={12} sm={12} md={12} lg={4} xl={3}>\n                            <SystemInfoCard systemInfo={model.systemInfo} />\n                        </Grid>\n                    }\n                    {\n                        model.systemMonitor &&\n                        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\n                            <CpuMonitorCard cpu={model.systemMonitor.monitor.cpu} />\n                        </Grid>\n                    }\n                    {\n                        model.systemMonitor &&\n                        <Grid item xs={12} sm={12} md={6} lg={4} xl={3}>\n                            <MemoryMonitorCard memory={model.systemMonitor.monitor.memory} />\n                        </Grid>\n                    }\n                </Grid>\n            </div>\n\n        </div>\n    )\n}\n\nexport default DashboardPage\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Login/index.tsx",["805","806"],"import useStyles from \"./style\";\nimport {Button, Paper, TextField} from \"@material-ui/core\";\nimport useUserModel from \"../../model/user\";\nimport {useEffect, useState} from \"react\";\nimport {useSnackbar} from \"notistack\";\nimport {useHistory} from \"react-router-dom\";\nimport {useLocalStorageState} from \"ahooks\";\n\nexport interface LoginPagePropsType {\n\n}\n\nconst LoginPage = ({}: LoginPagePropsType) => {\n    const history = useHistory()\n    const {enqueueSnackbar} = useSnackbar();\n    const [username, setUsername] = useState<string | undefined>()\n    const [password, setPassword] = useState<string | undefined>()\n    const [serviceUrl,setServiceUrl] = useState<string | undefined>()\n    const classes = useStyles()\n    const model = useUserModel()\n    useEffect(() => {\n        setServiceUrl(window.location.protocol +\"//\" + window.location.host.replace( window.location.port,\"8999\"))\n    },[])\n    const onLoginClick = async () => {\n        if (username && password && serviceUrl) {\n            localStorage.setItem(\"apiUrl\",serviceUrl)\n            const result = await model.login(username, password)\n            if (result.success) {\n                enqueueSnackbar(\"Login success\", {variant: 'success'})\n                history.replace(\"/home\")\n            } else {\n                enqueueSnackbar(`Login failed:${result.message}`, {variant: 'error'})\n            }\n        }\n    }\n    return (\n        <div className={classes.root}>\n\n            <Paper className={classes.loginContainer}>\n                <div className={classes.loginHeader}>\n                    <div className={classes.title}>\n                        YouPlus\n                    </div>\n                    <div className={classes.sub}>\n                        ProjectXPolaris\n                    </div>\n                </div>\n                <div className={classes.loginForm}>\n                    <TextField\n                        label={\"ServiceUrl\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        value={serviceUrl}\n                        className={classes.input}\n                        onChange={(e) => setServiceUrl(e.target.value)}\n                    />\n                    <TextField\n                        label={\"Username\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        value={username}\n                        className={classes.input}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <TextField\n                        label={\"Password\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        className={classes.input}\n                        type={\"password\"}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <Button variant={'contained'} fullWidth className={classes.loginBtn} onClick={onLoginClick}>Login\n                        in </Button>\n                </div>\n            </Paper>\n        </div>\n    )\n}\n\nexport default LoginPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Account/index.tsx",["807","808"],"import React, {ReactElement} from \"react\";\nimport useStyles from \"./style\";\nimport {Button, Grid, Typography} from \"@material-ui/core\";\nimport InfoCard from \"../../components/InfoCard\";\nimport useLayoutModel from \"../../model/layout\";\nimport ChangePasswordDialog from \"../../components/ChangePasswordDialog\";\nimport {changePassword} from \"../../api/account\";\nimport {useSnackbar} from \"notistack\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport PageHead from \"../../components/PageHead\";\n\nexport interface AccountPagePropsType {\n\n}\n\nconst AccountPage = ({}: AccountPagePropsType): ReactElement => {\n    const classes = useStyles()\n    const layoutModel = useLayoutModel()\n    const {enqueueSnackbar} = useSnackbar()\n    const pageHeadController = usePageHeadController({})\n\n    return (\n        <div className={classes.root}>\n            <ChangePasswordDialog\n                open={layoutModel.getDialogOpen(\"changePassword\")}\n                onCancel={() => layoutModel.switchDialog(\"changePassword\")}\n                onOk={async (password) => {\n                    await changePassword(password)\n                    enqueueSnackbar(\"password changed\", {variant: 'success'})\n                    layoutModel.switchDialog(\"changePassword\")\n                }}\n            />\n            <PageHead\n                title={localStorage.getItem(\"user\") ?? \"Account\"}\n                controller={pageHeadController}\n            />\n            <div className={classes.content}>\n                <Grid container spacing={4} >\n                    <Grid item>\n                        <InfoCard\n                            className={classes.card}\n                            label={\"Password\"}\n                            value={\"******\"}\n                            bottom={\n                                <>\n                                    <Button onClick={() => layoutModel.switchDialog(\"changePassword\")}>\n                                        Change\n                                    </Button>\n                                </>\n                            }\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n\n        </div>\n    )\n}\n\nexport default AccountPage\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Apps/index.tsx",["809"],"import React from 'react';\nimport {Box, Button, Chip, FormControl, IconButton, InputLabel, MenuItem, Paper, Select} from \"@material-ui/core\";\nimport useAppsPageModel from \"./model\";\nimport useStyles from \"./style\";\nimport InstallAppDialog from \"../../components/InstallAppDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport {Add, DeleteForever, PlayArrow, Stop} from \"@material-ui/icons\";\nimport {useInterval} from \"ahooks\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport {App} from \"../../api/apps\";\nimport {DataGrid, GridColDef} from \"@mui/x-data-grid\";\n\n\ninterface AppsPagePropsType {\n\n}\n\n\nexport default function AppsPage({}: AppsPagePropsType) {\n    const classes = useStyles();\n    const model = useAppsPageModel()\n    const layoutModel = useLayoutModel()\n    const pageHeadController = usePageHeadController({})\n    useInterval(() => {\n        model.loadApp();\n    }, 3000, {immediate: true})\n    const [typeFilter, setTypeFiler] = React.useState<string[]>([\"Service\",\"Container\"]);\n    const onTypeFilterChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setTypeFiler(event.target.value as string[]);\n    };\n    const getAppListRow = (): App[]  => {\n        return model.appList.filter(app => {\n            return typeFilter.find(it => it === app.type) !== undefined\n        })\n    }\n    const appColumns:GridColDef[] = [\n        {\n            field: 'id',\n            headerName: 'ID',\n            width: 150,\n            editable: false,\n        },\n        {\n            field: 'name',\n            headerName: 'Name',\n            width: 320,\n            editable: false,\n        },\n        {\n            field: 'type',\n            headerName: 'Type',\n            width: 150,\n            editable: false,\n        },\n        {\n            field: 'status',\n            headerName: 'Status',\n            type: 'number',\n            width: 150,\n            editable: false,\n        },\n        {\n            field: 'action',\n            headerName: 'Actions',\n            type: 'number',\n            flex: 1,\n            editable: false,\n            disableExport: true,\n            disableReorder: true,\n            disableColumnMenu: true,\n            renderCell:params => {\n                return (\n                    <div>\n                        {\n                            params.row.status === \"Stop\" &&\n                            <IconButton size={\"small\"} onClick={() => {\n                                model.start(params.row.id)\n\n                            }}>\n                                <PlayArrow />\n                            </IconButton>\n                        }\n                        {\n                            params.row.status === \"Running\" &&\n                            <IconButton size={\"small\"} onClick={() => {\n                                model.stop(params.row.id)\n\n                            }}>\n                                <Stop />\n                            </IconButton>\n                        }\n                        {\n                            params.row.status === \"Stop\" &&\n                            <IconButton size={\"small\"} onClick={() => {\n                                model.uninstall(params.row.id)\n                            }}>\n                                <DeleteForever />\n                            </IconButton>\n                        }\n                    </div>\n\n                )\n            }\n        },\n    ];\n    return (\n        <div className={classes.root}>\n            <InstallAppDialog\n                open={layoutModel.getDialogOpen('installApp')}\n                onClose={() => {\n                    layoutModel.switchDialog(\"installApp\")\n                }}\n                onOk={() => {\n                    layoutModel.switchDialog(\"installApp\")\n                }}\n            />\n            <PageHead\n                title={\"Apps\"}\n                className={classes.pageHead}\n                controller={pageHeadController}\n                actions={<>\n                    <Button\n                        variant=\"text\"\n                        onClick={() => layoutModel.switchDialog(\"installApp\")}\n                        color=\"secondary\"\n                        startIcon={<Add/>}\n                    >\n                        Install App\n                    </Button>\n                </>}\n            />\n            <div className={classes.content}>\n                <Paper className={classes.appListContainer}>\n\n                    <div className={classes.appListHeader}>\n                        <FormControl>\n                            <InputLabel variant=\"standard\">\n                                Filter by type\n                            </InputLabel>\n                        <Select\n                            className={classes.appTypeFilter}\n                            multiple\n                            value={typeFilter}\n                            onChange={onTypeFilterChange}\n                            renderValue={(selected) => (\n                                <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>\n                                    {selected.map((value) => (\n                                        <Chip key={value} label={value} />\n                                    ))}\n                                </Box>\n                            )}\n                        >\n                            <MenuItem\n                                key=\"1\"\n                                value=\"Service\"\n                            >\n                                Service\n                            </MenuItem>\n                            <MenuItem\n                                key=\"2\"\n                                value=\"Container\"\n                            >\n                                Container\n                            </MenuItem>\n                        </Select>\n                        </FormControl>\n\n                    </div>\n                    <div className={classes.appList}>\n                        <DataGrid\n                            rows={getAppListRow()}\n                            columns={appColumns}\n                            disableSelectionOnClick\n                            autoPageSize={false}\n                            disableColumnSelector\n                        />\n                    </div>\n                </Paper>\n            </div>\n\n        </div>\n    );\n}\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Users/index.tsx",["810","811","812"],"import React, {useEffect} from \"react\";\nimport useStyles from \"./style\";\nimport {\n    Avatar,\n    Button, IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText, Menu,\n    MenuItem,\n    Typography\n} from \"@material-ui/core\";\nimport useUsersModel from \"./model\";\nimport {Add, Delete, MoreVert, Person} from \"@material-ui/icons\";\nimport useLayoutModel from \"../../model/layout\";\nimport NewUserDialog from \"../../components/NewUserDialog\";\nimport {useContextMenu} from \"../../hooks/ContextMenu\";\nimport {useHistory} from \"react-router-dom\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\n\nexport interface UsersPagePropsType {\n\n}\nconst UsersPage = ({}: UsersPagePropsType) => {\n    const classes = useStyles()\n    const usersModel = useUsersModel()\n    const layoutModel = useLayoutModel()\n    const userContextMenu = useContextMenu<string>()\n    const history = useHistory()\n    const onSwitchNewUserDialog = layoutModel.getDialogSwitchHandler(\"newUser\")\n    const onUserClickItem = (username:string) => {\n        history.push(`/user/${username}`)\n    }\n    const pageHeadController = usePageHeadController({})\n    useEffect(() => {\n        usersModel.initData()\n    }, [])\n    return (\n        <div className={classes.root}>\n            <NewUserDialog\n                open={layoutModel.getDialogOpen(\"newUser\")}\n                onClose={onSwitchNewUserDialog}\n                onOk={(username, password) => {\n                    usersModel.newUser(username,password)\n                    onSwitchNewUserDialog()\n                }}\n            />\n            <Menu\n                open={userContextMenu.isOpen}\n                anchorEl={userContextMenu.anchor}\n                onClose={() => userContextMenu.close()}\n            >\n                <MenuItem onClick={async () => {\n                    if (userContextMenu.data) {\n                        userContextMenu.close()\n                        await usersModel.remove(userContextMenu.data)\n\n                    }\n                }}>\n                    <Delete/> Remove user\n                </MenuItem>\n            </Menu>\n            <PageHead\n                title={\"Users\"}\n                controller={pageHeadController}\n                actions={\n                    <>\n                        <Button\n                            variant=\"text\"\n                            color=\"secondary\"\n                            startIcon={<Add />}\n                            onClick={onSwitchNewUserDialog}\n                        >\n                            New user\n                        </Button>\n                    </>\n                }\n\n            />\n            <List>\n                {\n                    usersModel.users.map(it => {\n                        return (\n                            <ListItem key={it} button onClick={() => onUserClickItem(it)}>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Person />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it} />\n                                <ListItemSecondaryAction>\n                                    <IconButton onClick={(e) => userContextMenu.open(it,e.target)}>\n                                        <MoreVert />\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        )\n                    })\n                }\n\n            </List>\n        </div>\n    )\n}\n\nexport default UsersPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolder/index.tsx",["813","814","815","816","817","818","819"],"import React, {useEffect} from \"react\";\nimport useStyles from \"./style\";\nimport useShareFoldersModel from \"./model\";\nimport {Avatar, Button, List, ListItem, ListItemAvatar, ListItemText, Paper, Typography} from \"@material-ui/core\";\nimport {Add, Folder, Person} from \"@material-ui/icons\";\nimport NewShareDialog from \"../../components/NewShareDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport layout from \"../../model/layout\";\nimport {useHistory} from \"react-router-dom\";\nimport PageHead from \"../../components/PageHead\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport {DataGrid, GridColDef} from \"@mui/x-data-grid\";\n\nexport interface ShareFolderPropsType {\n\n}\n\nconst ShareFolder = ({}: ShareFolderPropsType) => {\n    const classes = useStyles()\n    const model = useShareFoldersModel()\n    const history = useHistory()\n    useEffect(() => {\n        model.initData()\n    }, [])\n    const layoutModel = useLayoutModel()\n    const pageHeadController = usePageHeadController({})\n    const newShareSwitchHandler = layoutModel.getDialogSwitchHandler(\"newShare\")\n    const columns: GridColDef[] = [\n        { field: 'id', headerName: 'ID', width: 120 },\n        {\n            field: 'name',\n            headerName: 'Name',\n            flex:1\n        },\n    ];\n    return (\n        <div>\n            {\n                layoutModel.getDialogOpen(\"newShare\") &&\n                <NewShareDialog\n                    open={true}\n                    onClose={newShareSwitchHandler}\n                    onCreateShare={async (data) => {\n                        await model.createShare(data)\n                        newShareSwitchHandler()\n                    }}\n                />\n            }\n            <PageHead\n                title={\"ShareFolders\"}\n                controller={pageHeadController}\n                actions={\n                    <>\n                        <Button\n                            variant=\"text\"\n                            color=\"secondary\"\n                            startIcon={<Add />}\n                            onClick={newShareSwitchHandler}\n                        >\n                            New share folder\n                        </Button>\n                    </>\n                }\n\n            />\n            <div className={classes.content}>\n                <Paper className={classes.listContainer}>\n                    <div className={classes.listHead}>\n                        <div className={classes.listTitle}>\n                            List\n                        </div>\n                    </div>\n                    <div className={classes.listContent}>\n                        <List>\n                            {\n                                model.folders.map(it => {\n                                    return (\n                                        <ListItem key={it.name} button onClick={() => history.push(`/folder/${it.name}/info`)}>\n                                            <ListItemAvatar>\n                                                <Avatar className={classes.avatar}>\n                                                    <Folder />\n                                                </Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={it.name}/>\n                                        </ListItem>\n                                    )\n                                })\n                            }\n                        </List>\n                    </div>\n\n                </Paper>\n\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default ShareFolder;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/UserDetail/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/UserDetail/model.ts",["820"],"import {createModel} from 'hox'\nimport {useEffect, useState} from \"react\";\nimport {fetchUserShareFolder, UserShareFolder} from \"../../api/users\";\n\nconst UserDetailModel = () => {\n    const [username,setUsername] = useState<string>()\n    const [userShareFolder,setUserShareFolder] = useState<UserShareFolder[]>([])\n    const refreshShareFolders = async (username:string) => {\n        if (!username) {\n            return;\n        }\n        const response = await fetchUserShareFolder(username)\n        setUserShareFolder(response.folders)\n    }\n\n    return {\n        username,setUsername,userShareFolder,refreshShareFolders\n    }\n}\nconst useUserDetailModel = createModel(UserDetailModel)\nexport default useUserDetailModel\n","/home/aren/Desktop/YouPlus/ypw/src/api/os.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/PoolDetail/model.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/GroupDetail/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/GroupDetail/model.ts",["821","822"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {\n    addUserToUserGroup,\n    fetchGroupDetail,\n    removeGroup,\n    removeUserFromUserGroup,\n    UserGroupDetail\n} from \"../../api/users\";\nimport {strict} from \"assert\";\nimport {hexToRgb} from \"@material-ui/core\";\n\nconst GroupDetailModel = () => {\n    const [groupDetail,setGroupDetail]  = useState<UserGroupDetail | undefined>()\n    const [groupName,setGroupName] = useState<string | undefined>()\n\n    const fetchData = async (name:string) => {\n        const detail = await fetchGroupDetail(name)\n        setGroupDetail(detail)\n    }\n    const removeUser = async (users:string[]) => {\n        if (groupName) {\n            await removeUserFromUserGroup(groupName,users)\n            await fetchData(groupName)\n        }\n    }\n    const addUser = async (users:string[]) => {\n        if (groupName) {\n            await addUserToUserGroup(groupName,users)\n            await fetchData(groupName)\n        }\n    }\n    const remove = async () => {\n        if (groupName) {\n            await removeGroup(groupName)\n        }\n    }\n    useEffect(() => {\n        if (groupName) {\n            fetchData(groupName)\n        }\n    },[groupName])\n    return {\n        groupDetail,setGroupName,addUser,removeUser,remove\n    }\n}\nconst useGroupDetailModel = createModel(GroupDetailModel)\nexport default useGroupDetailModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Groups/model.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Groups/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolderDetail/model.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolderDetail/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Apps/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Apps/model.ts",["823"],"import {createModel} from \"hox\";\nimport {useState} from \"react\";\nimport {App, fetchApps, removeAutoStart, setAutoStart, startApp, stopApp, unInstallAPP} from \"../../api/apps\";\n\nconst AppsPageModel = () => {\n    const [appList,setAppList] = useState<App[]>([])\n    const loadApp = async () => {\n        const response = await fetchApps()\n        if (response) {\n            setAppList(response.apps)\n        }\n    }\n\n    const start = async (appId:string) => {\n        await startApp(appId)\n    }\n    const stop = async (appId:string) => {\n        await stopApp(appId)\n    }\n    const addToAutoStart = async (appId:string) => {\n        await setAutoStart(appId)\n    }\n    const removeFromAutoStart = async (appId:string) => {\n        await removeAutoStart(appId)\n    }\n    const uninstall = async (id:string) => {\n        await unInstallAPP(id)\n    }\n    return {\n        appList,loadApp,start,stop,addToAutoStart,removeAutoStart,uninstall\n    }\n}\nconst useAppsPageModel = createModel(AppsPageModel)\nexport default useAppsPageModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolder/model.ts",["824","825"],"import {getUserList} from \"../../api/users\";\nimport {useEffect, useState} from \"react\";\nimport {createModel} from \"hox\";\nimport {createNewShare, getShareList, ShareFolder} from \"../../api/share\";\nimport {showAPIResponseErrorMessage, showGlobalSnackMessage} from \"../../utils/message\";\n\nconst ShareFoldersModel = () => {\n    const [folders, setFolders] = useState<ShareFolder[]>([])\n    const initData = async () => {\n        const response = await getShareList()\n        setFolders(response.folders)\n    }\n    const createShare = async (data: any) => {\n        const response:any = await createNewShare(data)\n        if (response.success) {\n            showGlobalSnackMessage(\"create share folder success\",{variant:\"success\"})\n        }else{\n            showAPIResponseErrorMessage(response)\n        }\n        await initData()\n    }\n\n    return {\n        folders, createShare, initData\n    }\n}\nconst useShareFoldersModel = createModel(ShareFoldersModel)\nexport default useShareFoldersModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/ShareFolder/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/hooks/ContextMenu.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Users/model.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Users/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/api/account.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Account/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/model.ts",["826","827","828","829","830"],"import {createModel} from \"hox\";\nimport {useInterval} from \"ahooks\";\nimport {useState} from \"react\";\nimport {\n    DeviceInfo,\n    fetchDeviceInfo,\n    fetchSystemInfo,\n    fetchSystemMonitor,\n    SystemInfo,\n    SystemMonitor\n} from \"../../api/system\";\nimport {fetchDisks} from \"../../api/disks\";\nimport {fetchStorageList} from \"../../api/storage\";\nimport {getShareList} from \"../../api/share\";\nimport {getUserList} from \"../../api/users\";\n\nconst DashboardModel = () => {\n    const [systemInfo,setSystemInfo] = useState<SystemInfo | undefined>()\n    const [systemMonitor,setSystemMonitor] = useState<SystemMonitor | undefined>()\n    const [deviceInfo,setDeviceInfo] = useState<DeviceInfo | undefined>()\n\n    const initData = async () => {\n        const info = await fetchDeviceInfo()\n        setDeviceInfo(info)\n    }\n    const refreshSystemInfo = async () => {\n        const response = await fetchSystemInfo()\n        setSystemInfo(response)\n    }\n    const refreshMonitorData = async () => {\n        const info = await fetchSystemMonitor()\n        setSystemMonitor(info)\n    }\n    return {\n        systemInfo,initData,refreshSystemInfo,systemMonitor,refreshMonitorData,deviceInfo\n    }\n}\nconst useDashboardModel = createModel(DashboardModel)\nexport default useDashboardModel\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Login/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/System/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/PoolDetail/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/Icons/DiskIcon.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/api/users.ts",["831"],"import apiRequest from \"../utils/request\";\nimport {ApplicationConfig} from \"../config\";\nimport {BaseResponse} from \"./base\";\nimport {useClickAway} from \"ahooks\";\n\nexport type UserGroupType = \"admin\" | \"normal\"\n\nexport interface UserGroup {\n    name: string\n    type: UserGroupType\n    gid: string\n}\n\nexport interface UserListResponse {\n    users: string[]\n}\n\nexport type UserGroupDetail = UserGroup & {\n    users: {\n        name: string\n        uid: string\n    }[]\n}\n\nexport interface UserShareFolder {\n    name: string\n    access: boolean\n    read: boolean\n    write: boolean\n}\nexport interface fetchUserShareFolderResponse {\n    folders: UserShareFolder[]\n}\n\nexport const getUserList = async (): Promise<UserListResponse> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.users)\n}\nexport const createUser = async (username: string, password: string): Promise<BaseResponse> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.users, {\n        data: {\n            username, password\n        }\n    })\n}\n\nexport const removeUser = async (username: string): Promise<BaseResponse> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.users, {\n        params: {\n            username\n        }\n    })\n}\nexport const fetchGroupList = async (): Promise<{ groups: UserGroup[] }> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.groups)\n}\nexport const createGroup = async (name: string): Promise<UserGroup> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.groups, {data: {name}})\n}\nexport const fetchGroupDetail = async (name: string): Promise<UserGroupDetail> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.group.replace(\":name\", name))\n}\nexport const removeGroup = async (name: string): Promise<UserGroupDetail> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.groups, {params: {name}})\n}\nexport const addUserToUserGroup = async (name: string, users: string[]): Promise<BaseResponse> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.groupUsers.replace(\":name\", name), {data: {users}})\n}\n\nexport const removeUserFromUserGroup = async (name: string, users: string[]): Promise<BaseResponse> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.groupUsers.replace(\":name\", name), {data: {users}})\n}\n\nexport const fetchUserShareFolder = async (username: string):Promise<BaseResponse & fetchUserShareFolderResponse> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.userShare,{\n        params:{\n            username\n        }\n    })\n}\n","/home/aren/Desktop/YouPlus/ypw/src/api/share.ts",["832"],"import apiRequest from \"../utils/request\";\nimport {ApplicationConfig} from \"../config\";\nimport {UserGroup, UserListResponse} from \"./users\";\nimport {BaseResponse} from \"./base\";\n\nexport interface ShareFolderUser {\n    uid: string\n    name: string\n}\n\nexport interface ShareFolder {\n    id: number\n    name: string\n    storage: {\n        id: string\n    },\n    validUsers: ShareFolderUser[],\n    invalidUsers: ShareFolderUser[],\n    readUsers: ShareFolderUser[],\n    writeUsers: ShareFolderUser[],\n    validGroups: UserGroup[]\n    invalidGroups: UserGroup[]\n    readGroups: UserGroup[]\n    writeGroups: UserGroup[]\n    public: boolean,\n    readonly: boolean\n    enable: boolean\n}\n\nexport interface FetchShareFoldersResponse {\n    folders: ShareFolder[]\n}\n\nexport const getShareList = async (): Promise<FetchShareFoldersResponse> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.share)\n}\n\nexport const createNewShare = async (data: any): Promise<BaseResponse> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.share, {\n        data\n    })\n}\n\nexport const removeShare = async (id: number): Promise<BaseResponse> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.share, {\n        params: {\n            id\n        }\n    })\n}\n\nexport interface ShareUpdateOption {\n    readUsers?: string[]\n    writeUsers?: string[]\n    validUsers?: string[]\n    invalidUsers?: string[]\n    readGroups?: string[]\n    writeGroups?: string[]\n    validGroups?: string[]\n    invalidGroups?: string[]\n    public?: boolean\n    readonly?: boolean\n    enable?: boolean\n}\n\nexport const updateShare = async (name: string, option: ShareUpdateOption): Promise<void> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.shareUpdate, {\n        data: {\n            name,\n            ...option\n        }\n    })\n}\n","/home/aren/Desktop/YouPlus/ypw/src/api/apps.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/api/system.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/layout/Notification/index.tsx",["833","834"],"import {useEffect} from \"react\";\nimport {DefaultNotificationManager} from \"../../ws\";\nimport {useSnackbar} from \"notistack\";\n\nexport interface NotificationPropsType {\n\n}\n\nconst Notification = ({}: NotificationPropsType) => {\n    const { enqueueSnackbar } = useSnackbar()\n    useEffect(() => {\n        DefaultNotificationManager.addListener(\"InstallError\", (event) => {\n            enqueueSnackbar(`${event.data.extra.appName} install error: ${event.data.errorMessage}`,{ variant:\"error\"  })\n        })\n        DefaultNotificationManager.addListener(\"InstallDone\", (event) => {\n            enqueueSnackbar(`${event.data.extra.appName} install success`,{ variant:\"success\"  })\n        })\n        DefaultNotificationManager.addListener(\"UninstallDone\", (event) => {\n            enqueueSnackbar(`${event.data.extra.appName} uninstall success`,{ variant:\"success\"  })\n        })\n        DefaultNotificationManager.addListener(\"UninstallError\", (event) => {\n            enqueueSnackbar(`${event.data.extra.appName} uninstall error: ${event.data.errorMessage}`,{ variant:\"success\"  })\n        })\n    },[])\n    return (<></>)\n}\n\nexport default Notification;\n","/home/aren/Desktop/YouPlus/ypw/src/layout/Base/parts/Nav/index.tsx",["835","836"],"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport {\n    Apps,\n    Archive,\n    Assignment,\n    Dashboard,\n    Dns,\n    Folder,\n    Group, InsertChart, Link,\n    NetworkCell,\n    Person,\n    Settings,\n    Storage\n} from \"@material-ui/icons\";\nimport {useHistory} from \"react-router-dom\";\nimport {useUpdate} from \"ahooks\";\nimport {ListSubheader, Typography, useMediaQuery} from \"@material-ui/core\";\nimport theme from \"../../../../theme\";\nimport useLayoutModel from \"../../../../model/layout\";\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles({\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n        boxSizing: 'border-box',\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n});\n\ninterface AppNavigationPropsType {\n\n}\n\n\nexport default function AppNavigation({}: AppNavigationPropsType) {\n    const classes = useStyles();\n    const history = useHistory();\n    const update = useUpdate();\n    const layoutModel = useLayoutModel()\n    const collapse = useMediaQuery(theme.breakpoints.down('md'));\n    const changeUrl = (urlPath: string) => {\n        layoutModel.setShowNav(false)\n        if (history.location.pathname !== urlPath) {\n            history.replace(urlPath)\n            update()\n        }\n    }\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant={collapse?'temporary' :\"permanent\"}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n            open={layoutModel.showNav}\n            onClose={() => layoutModel.setShowNav(false)}\n        >\n            <Toolbar title={\"YouPlus\"}>\n                <Typography variant={\"h6\"}>\n                    YouPlus\n                </Typography>\n            </Toolbar>\n            <div className={classes.drawerContainer}>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            General\n                        </ListSubheader>\n                    }\n                >\n                    <ListItem\n                        button\n                        key={\"dashboard\"}\n                        selected={history.location.pathname === \"/home\"}\n                        onClick={() => changeUrl(\"/home\")}\n                    >\n                        <ListItemIcon>\n                            <Dashboard/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Dashboard\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"apps\"}\n                        selected={history.location.pathname === \"/apps\"}\n                        onClick={() => changeUrl(\"/apps\")}\n                    >\n                        <ListItemIcon>\n                            <Apps/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Apps\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"network\"}\n                        selected={history.location.pathname === \"/network\"}\n                        onClick={() => changeUrl(\"/network\")}\n                    >\n                        <ListItemIcon>\n                            <Link/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Network\"}/>\n                    </ListItem>\n                </List>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            Data\n                        </ListSubheader>\n                    }\n                >\n\n                    <ListItem\n                        button\n                        key={\"disks\"}\n                        selected={history.location.pathname === \"/disks\"}\n                        onClick={() => changeUrl(\"/disks\")}\n                    >\n                        <ListItemIcon>\n                            <Storage/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Disks\"}/>\n                    </ListItem>\n                    {/*<ListItem*/}\n                    {/*    button*/}\n                    {/*    key={\"parts\"}*/}\n                    {/*    selected={history.location.pathname === \"/parts\"}*/}\n                    {/*    onClick={() => changeUrl(\"/parts\")}*/}\n                    {/*>*/}\n                    {/*    <ListItemIcon>*/}\n                    {/*        <Inbox/>*/}\n                    {/*    </ListItemIcon>*/}\n                    {/*    <ListItemText primary={\"Parts\"}/>*/}\n                    {/*</ListItem>*/}\n                    <ListItem\n                        button\n                        key={\"zfs\"}\n                        selected={history.location.pathname === \"/zfs\"}\n                        onClick={() => changeUrl(\"/zfs\")}\n                    >\n                        <ListItemIcon>\n                            <Dns/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"ZFS\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"storage\"}\n                        selected={history.location.pathname === \"/storage\"}\n                        onClick={() => changeUrl(\"/storage\")}\n                    >\n                        <ListItemIcon>\n                            <Archive/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Storage\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"shareFolder\"}\n                        selected={history.location.pathname === \"/folders\"}\n                        onClick={() => changeUrl(\"/folders\")}\n                    >\n                        <ListItemIcon>\n                            <Folder/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Share Folders\"}/>\n                    </ListItem>\n                </List>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            System\n                        </ListSubheader>\n                    }\n                >\n                    <ListItem\n                        button\n                        key={\"users\"}\n                        selected={history.location.pathname === \"/users\"}\n                        onClick={() => changeUrl(\"/users\")}\n                    >\n                        <ListItemIcon>\n                            <Person/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Users\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"groups\"}\n                        selected={history.location.pathname === \"/groups\"}\n                        onClick={() => changeUrl(\"/groups\")}\n                    >\n                        <ListItemIcon>\n                            <Group/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Groups\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"logs\"}\n                        selected={history.location.pathname === \"/logs\"}\n                        onClick={() => changeUrl(\"/logs\")}\n                    >\n                        <ListItemIcon>\n                            <InsertChart/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Logs\"}/>\n                    </ListItem>\n                </List>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            My\n                        </ListSubheader>\n                    }\n                >\n                    <ListItem\n                        button\n                        key={\"account\"}\n                        selected={history.location.pathname === \"/my/account\"}\n                        onClick={() => changeUrl(\"/my/account\")}\n                    >\n                        <ListItemIcon>\n                            <Assignment/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Account\"}/>\n                    </ListItem>\n                </List>\n\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            System\n                        </ListSubheader>\n                    }\n                >\n                    <ListItem\n                        button\n                        key={\"system\"}\n                        selected={history.location.pathname === \"/system\"}\n                        onClick={() => changeUrl(\"/system\")}\n                    >\n                        <ListItemIcon>\n                            <Settings />\n                        </ListItemIcon>\n                        <ListItemText primary={\"System\"}/>\n                    </ListItem>\n                </List>\n\n            </div>\n        </Drawer>\n    );\n}\n","/home/aren/Desktop/YouPlus/ypw/src/layout/Auth/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InfoCard/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/UserSelectDialog/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewGroupDialog/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/SwitchSelectDialog/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/UserListCard/index.tsx",["837","838"],"import React, {ReactElement} from \"react\";\nimport {\n    Avatar,\n    Button, IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Paper\n} from \"@material-ui/core\";\nimport {Delete, Person, Remove} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface UserListCardPropsType {\n    users?: { uid: string, name: string }[]\n    title?: string\n    actions?: ReactElement\n    onRemove: (name: string) => void\n    className?: any\n}\n\nconst UserListCard = ({\n                          className,\n                          onRemove,\n                          actions,\n                          users = [],\n                          title = \"users\"\n                      }: UserListCardPropsType): ReactElement => {\n    const classes = useStyles()\n    return (\n        <Paper className={className}>\n            <div className={classes.userListHeader}>\n                <div className={classes.usersListTitle}>\n                    {title}\n                </div>\n                {actions}\n            </div>\n            <List className={classes.userList} dense>\n                {\n                    users.map(it => {\n                        return (\n                            <ListItem key={it.uid} className={classes.userListItem}>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.userListIcon}>\n                                        <Person/>\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it.name} secondary={it.uid}/>\n                                <ListItemSecondaryAction>\n                                    <IconButton onClick={() => onRemove(it.name)} size={\"small\"}>\n                                        <Delete/>\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n\n        </Paper>\n    )\n}\n\nexport default UserListCard\n","/home/aren/Desktop/YouPlus/ypw/src/components/UserAndGroupListCard/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/index.tsx",["839","840","841","842","843","844","845"],"import {Button, Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\nimport {ReactElement, useEffect, useState} from \"react\";\nimport useStyles from \"./style\";\nimport UploadStep from \"./setp/upload\";\nimport InstallPackInfoStep from \"./setp/confirm\";\nimport {AppPackInfo, installApp, uploadAppPack} from \"../../api/apps\";\nimport {useInstallAppForm} from \"./hook\";\nimport {useSnackbar} from \"notistack\";\n\nexport interface InstallAppDialogPropsType {\n    open?: boolean\n    onClose: () => void\n    onOk: () => void\n}\n\nconst InstallAppDialog = ({onOk, onClose, open = false}: InstallAppDialogPropsType): ReactElement => {\n    const classes = useStyles()\n    const [file, setFile] = useState<File | undefined>()\n    const [stepIndex, setStepIndex] = useState<number>(0)\n    const [isUpload,setIsUpload] = useState(false)\n    const [packInfo,setPackInfo] = useState<AppPackInfo | undefined>()\n    const installForm = useInstallAppForm()\n    const { enqueueSnackbar } = useSnackbar()\n    const uploadFile = async () => {\n        if (!file) {\n            return\n        }\n        setIsUpload(true)\n        const result  = await uploadAppPack(file)\n        setIsUpload(false)\n        setPackInfo(result)\n        setStepIndex(stepIndex + 1)\n        installForm.clear()\n    }\n    const onFinish = async () => {\n        if (!packInfo) {\n            return\n        }\n        for (let installArg of packInfo.args) {\n            if (installArg.require && installForm.getArgValue(installArg.key) === undefined) {\n                enqueueSnackbar(`install arg [${installArg.name}] is require`,{variant:\"error\"})\n                return\n            }\n        }\n        const args:any[] = []\n        installForm.args.forEach(arg => {\n            const packArg = packInfo.args.find(it => it.key === arg.key)\n            if (!packArg) {\n                return\n            }\n            args.push({\n                key:arg.key,\n                value:arg.value,\n                source:packArg.source\n            })\n        })\n        await installApp(packInfo.id,{\n            args\n        })\n        enqueueSnackbar(\"add install app task success\",{\n            variant: \"success\"\n        })\n        onOk()\n    }\n    useEffect(() => {\n        uploadFile()\n    },[file])\n    const renderContent = () => {\n        if (stepIndex == 0) {\n            return (\n                <UploadStep\n                    onFileChange={(file) => {\n                        setFile(file)\n                    }}\n                    filename={file?.name}\n                    isUpload={isUpload}\n                />\n            )\n        }\n        if (stepIndex == 1) {\n            return (\n                <InstallPackInfoStep packInfo={packInfo} form={installForm}/>\n            )\n        }\n    }\n    const getTitleText = () => {\n        switch (stepIndex) {\n            case 0:\n                return \"Install App > Upload\"\n            case 1:\n                return \"Install App > Confirm\"\n        }\n        return \"Install App\"\n    }\n    const isNextDisable = () => {\n        if (stepIndex == 2) {\n            return true\n        }\n        // if (!packInfo && stepIndex == 0) {\n        //     return true\n        // }\n        return false\n    }\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth={\"xl\"}>\n            <DialogTitle>\n                {getTitleText()}\n            </DialogTitle>\n            <DialogContent className={classes.content}>\n                {renderContent()}\n            </DialogContent>\n            <DialogActions className={classes.actions}>\n                <Button\n                    disabled={stepIndex == 0}\n                    onClick={() => {\n                        setStepIndex(stepIndex - 1)\n                    }}\n                >\n                    Previous\n                </Button>\n                <Button\n                    disabled={isNextDisable()}\n                    onClick={() => {\n                        if (stepIndex == 1) {\n                            onFinish()\n                            return\n                        }\n                        setStepIndex(stepIndex + 1)\n                    }}\n                >\n                    {stepIndex == 1 ? \"Install\" : \"Next\" }\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default InstallAppDialog\n","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/index.tsx",["846"],"import React, {useState} from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogProps,\n    DialogTitle,\n    Step,\n    StepLabel,\n    Stepper\n} from \"@material-ui/core\";\nimport useStyles from \"./style\";\nimport ShareInfoStep, {InfoForm} from \"./step/info\";\nimport StorageStep from \"./step/storage\";\nimport {UsersForm} from \"./step/users\";\nimport CompleteStep from \"./step/complete\";\nimport {useForm} from \"./hook\";\nimport {Storage} from \"../../api/storage\";\n\nexport interface NewShareDialogPropsType {\n    onCreateShare: (data: any) => void\n}\n\nconst steps = [\n    \"info\", \"storage\", \"complete\"\n]\nconst NewShareDialog = ({onCreateShare, ...other}: NewShareDialogPropsType & DialogProps) => {\n    const [index, setIndex] = useState<number>(0)\n    const [selectStorage, setSelectStorage] = useState<Storage | undefined>()\n    const usersFormController = useForm<UsersForm>({\n        folderPublic: true\n    })\n    const infoForm = useForm<InfoForm>({})\n    const classes = useStyles()\n    const renderStepContent = () => {\n        switch (index) {\n            case 0:\n                return <ShareInfoStep controller={infoForm}/>\n            case 1:\n                return <StorageStep selectedStorage={selectStorage} onSelect={(part) => setSelectStorage(part)}/>\n            case 2:\n                return <CompleteStep\n                    name={infoForm.form.name}\n                    access={usersFormController.form.folderPublic ? \"Allow guest\" : \"Not allow guest\"}\n                    storage={selectStorage?.id}\n                    validateUsers={\n                        (usersFormController.form.readUsers ?? []).join(\",\")\n                    }\n                    writeUsers={\n                        (usersFormController.form.writeUsers ?? []).join(\",\")\n                    }\n                />\n            default:\n                return (<></>)\n        }\n    }\n    const validate = () => {\n        if (\n            infoForm.form.name === undefined ||\n            selectStorage == undefined\n        ) {\n            return false\n        }\n        return true\n    }\n    const onCreate = () => {\n        if (!validate()) {\n            return\n        }\n        const data = {\n            name: infoForm.form.name,\n            public: usersFormController.form.folderPublic,\n            storageId: selectStorage?.id\n        }\n        onCreateShare(data)\n\n    }\n    return (\n        <Dialog {...other} maxWidth={\"xl\"}>\n            <DialogTitle>\n                New Share\n                <Stepper activeStep={index} className={classes.stepper}>\n                    {\n                        steps.map((label, index) => {\n                            return (\n                                <Step key={index}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            )\n                        })\n                    }\n                </Stepper>\n            </DialogTitle>\n            <DialogContent className={classes.content}>\n\n                <div className={classes.stepContent}>\n                    {renderStepContent()}\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={index < 1}\n                    onClick={() => setIndex(index - 1)}\n                >Previous</Button>\n                {\n                    index === steps.length - 1 && <Button onClick={() => onCreate()}>Create</Button>\n                }\n                {\n                    index !== steps.length - 1 && <Button\n                        onClick={() => setIndex(index + 1)}\n                    >\n                        Next\n                    </Button>\n                }\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default NewShareDialog;\n","/home/aren/Desktop/YouPlus/ypw/src/components/NewUserDialog/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/ChangePasswordDialog/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/IconStatCard/index.tsx",["847"],"import useStyles from \"./style\";\nimport {Avatar, ButtonBase, Paper} from \"@material-ui/core\";\nimport DiskIcon from \"../Icons/DiskIcon\";\nimport clsx from \"clsx\";\nimport {ReactElement} from \"react\";\n\nexport interface IconStatCardPropsType {\n    className?:string\n    label:string\n    value:string\n    icon:ReactElement\n}\n\nconst IconStatCard = ({className,label,value,icon}: IconStatCardPropsType) => {\n    const classes = useStyles()\n    return (\n\n        <Paper className={clsx(className)}>\n            <ButtonBase className={classes.root}>\n                <div className={classes.info}>\n                    <div className={classes.label}>\n                        {label}\n                    </div>\n                    <div className={classes.value}>\n                        {value}\n                    </div>\n                </div>\n                <div>\n                    <Avatar className={classes.avatar}>\n                        { icon }\n                    </Avatar>\n                </div>\n            </ButtonBase>\n\n        </Paper>\n    )\n}\n\nexport default IconStatCard;\n","/home/aren/Desktop/YouPlus/ypw/src/components/UserGroupSelectDialog/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/CpuMonitorCard/index.tsx",["848"],"import React from 'react'\nimport useStyles from \"./style\";\nimport {Divider, Grid, Paper, Typography} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport {Pie, RingProgress} from '@ant-design/charts';\nimport {CpuStat} from \"../../../../api/system\";\n\nexport interface CpuMonitorCardPropsType {\n    className?: string\n    cpu: CpuStat\n}\n\nconst CpuMonitorCard = ({className, cpu}: CpuMonitorCardPropsType) => {\n    const classes = useStyles()\n    const getUsage = () => {\n        if (cpu.total == 0) {\n            return 0\n        }\n        return (cpu.user + cpu.system + cpu.iowait) / cpu.total\n    }\n    var config = {\n        height: 160,\n        width: 160,\n        autoFit: false,\n        percent: getUsage(),\n        color: ['#00701a', '#E8EDF3'],\n    };\n    return (\n        <Paper className={clsx(classes.root, className)}>\n            <div className={classes.header}>\n                <Typography variant={\"subtitle1\"}>\n                    CPU\n                </Typography>\n            </div>\n            <Divider/>\n            <Grid container className={classes.content}>\n                <Grid item className={classes.chart} xs={12} sm={12} md={12} lg={4} xl={4}>\n                    <RingProgress {...config} />\n                </Grid>\n                <Grid item className={classes.chart} xs={12} sm={12} md={12} lg={4} xl={4}>\n                    <Pie\n                        innerRadius={0.8}\n                        width={160}\n                        height={160}\n                        angleField={'value'}\n                        colorField={'label'}\n                        data={[\n                            {\n                                label: \"system\",\n                                value: cpu.system\n                            },\n                            {\n                                label: \"user\",\n                                value: cpu.user\n                            },\n                            {\n                                label: \"iowait\",\n                                value: cpu.iowait\n                            }\n                        ]}\n                    />\n                </Grid>\n                <Grid className={classes.info} xs={12} sm={12} md={12} lg={4} xl={4}>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            Idle\n                        </div>\n                        <div className={classes.value}>\n                            {cpu.idle}\n                        </div>\n                    </div>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            Total\n                        </div>\n                        <div className={classes.value}>\n                            {cpu.total}\n                        </div>\n                    </div>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            User\n                        </div>\n                        <div className={classes.value}>\n                            {cpu.user}\n                        </div>\n                    </div>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            System\n                        </div>\n                        <div className={classes.value}>\n                            {cpu.system}\n                        </div>\n                    </div>\n                </Grid>\n            </Grid>\n\n        </Paper>\n    )\n}\n\nexport default CpuMonitorCard;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/MemoryMonitorCard/index.tsx",["849"],"import useStyles from \"./style\";\nimport {Divider, Grid, Paper, Typography} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport {RingProgress} from \"@ant-design/charts\";\nimport React from \"react\";\nimport {Memory, MemoryStat} from \"../../../../api/system\";\nimport filesize from \"filesize\";\n\nexport interface MemoryMonitorCardPropsType {\n    className?:string\n    memory:MemoryStat\n}\n\nconst MemoryMonitorCard = ({ className,memory }: MemoryMonitorCardPropsType) => {\n    const classes = useStyles()\n    var config = {\n        height: 160,\n        width: 160,\n        autoFit: false,\n        percent: (memory.used) / memory.total,\n        color: ['#00701a', '#E8EDF3'],\n    };\n    return (\n        <Paper className={clsx(classes.root,className)}>\n            <div className={classes.header}>\n                <Typography variant={\"subtitle1\"}>\n                    Memory\n                </Typography>\n            </div>\n            <Divider />\n            <Grid container className={classes.content}>\n                <Grid item className={classes.chart} xs={12} sm={12} md={12} lg={6} xl={6}>\n                    <RingProgress {...config} />\n                </Grid>\n                <Grid item className={classes.info} xs={12} sm={12} md={12} lg={6} xl={6}>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            Total\n                        </div>\n                        <div className={classes.value}>\n                            { filesize(memory.total) }\n                        </div>\n                    </div>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            Free\n                        </div>\n                        <div className={classes.value}>\n                            { filesize(memory.free) }\n                        </div>\n                    </div>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            Used\n                        </div>\n                        <div className={classes.value}>\n                            { filesize(memory.used) }\n                        </div>\n                    </div>\n                    <div className={classes.item}>\n                        <div className={classes.label}>\n                            System\n                        </div>\n                        <div className={classes.value}>\n                            { filesize(memory.cache) }\n                        </div>\n                    </div>\n                </Grid>\n            </Grid>\n\n        </Paper>\n    )\n}\n\nexport default MemoryMonitorCard;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/SystemInfoCard/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/ws.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InfoCard/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/UserSelectDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/hook.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/hook.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/UserGroupSelectDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/UserAndGroupListCard/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewUserDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/ChangePasswordDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/UserListCard/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/SwitchSelectDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewGroupDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/IconStatCard/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/CpuMonitorCard/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/MemoryMonitorCard/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/DashBoard/part/SystemInfoCard/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/confirm/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/upload/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/complete/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/storage/index.tsx",["850","851","852","853","854"],"import React, {useEffect, useState} from \"react\";\nimport {fetchParts, Part} from \"../../../../api/disks\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText} from \"@material-ui/core\";\nimport {Inbox} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport usePartsPageModel from \"../../../../pages/Parts/model\";\nimport useStorageModel from \"../../../../pages/Storage/model\";\nimport {Storage} from \"../../../../api/storage\";\n\nexport interface StorageStepPropsType {\n    selectedStorage?:Storage\n    onSelect:(storage:Storage) => void\n}\nconst StorageStep = ({onSelect,selectedStorage}: StorageStepPropsType) => {\n    const classes = useStyles()\n    const partsModel = usePartsPageModel()\n    const storageModel = useStorageModel()\n    useEffect(() => {\n        storageModel.init()\n    },[])\n    return (\n        <div className={classes.root}>\n\n            <List>\n                {\n                    storageModel.storages.map(storage => {\n                        return (\n                            <ListItem\n                                key={storage.id}\n                                button\n                                selected={selectedStorage?.id === storage.id}\n                                onClick={() => onSelect(storage)}\n                            >\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Inbox />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={storage.id} secondary={storage.type}/>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n        </div>\n    )\n}\n\nexport default StorageStep;\n","/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/info/index.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/info/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/storage/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/upload/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/NewShareDialog/step/complete/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/InstallAppDialog/setp/confirm/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/PathPickDialog/index.tsx",["855","856","857"],"import useStyles from './style'\nimport clsx from 'clsx'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogTitle,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar, ListItemText,\n    TextField\n} from \"@material-ui/core\";\nimport {ArrowBack, Folder} from \"@material-ui/icons\";\nimport {useEffect, useState} from \"react\";\nimport {fetchDirContent, PathItem} from \"../../api/path\";\n\nexport interface PathPickDialogPropsType {\n    className?: string,\n    open?: boolean\n    onClose: () => void\n    onOk: (selectPath:string) => void\n}\n\nconst PathPickDialog = ({className,open = false,onClose,onOk}: PathPickDialogPropsType): React.ReactElement => {\n    const classes = useStyles()\n    const [content,setContent] = useState<PathItem[]>([])\n    const [inputPath,setInputPath] = useState<string>(\"/\")\n    const [currentPath,setCurrentPath] = useState<string>(inputPath)\n    const refreshContent = async (target = currentPath) => {\n        const response = await fetchDirContent(target)\n        setContent(response.filter(it => it.type === \"Directory\"))\n        setInputPath(target)\n        setCurrentPath(target)\n    }\n    const onDialogOk = () => {\n        if (currentPath !== \"/\") {\n            onOk(currentPath)\n        }\n    }\n    const onGoBack = () => {\n        let backPath = currentPath;\n        if (!backPath || backPath === \"/\") {\n            return\n        }\n        if (backPath.startsWith(\"/\")) {\n            backPath = backPath.slice(1)\n        }\n        const parts = backPath.split(\"/\")\n        parts.pop()\n        if (parts.length == 0) {\n            setCurrentPath(\"/\")\n            return\n        }\n        setCurrentPath(parts.join(\"/\"))\n    }\n    useEffect(() => {\n        refreshContent()\n    },[currentPath])\n    return (\n        <Dialog onClose={onClose} open={open} className={clsx(className,classes.root)}>\n            <div className={classes.header}>\n                <IconButton className={classes.backButton} size={\"small\"} onClick={() => onGoBack()}>\n                    <ArrowBack />\n                </IconButton>\n                <TextField\n                    className={classes.pathInput}\n                    size={\"small\"}\n                    value={inputPath}\n                    onChange={(e) => {\n                        setInputPath(e.target.value)\n                    }}\n                />\n                <Button\n                    className={classes.goButton}\n                    size={\"small\"}\n                    onClick={() => refreshContent(inputPath)}\n                >\n                    Go\n                </Button>\n            </div>\n            <List className={classes.list}>\n                {\n                    content.map(it => (\n                        <ListItem\n                            button key={it.path}\n                                  onClick={() => {\n                                      setInputPath(it.path)\n                                      setCurrentPath(it.path)\n                                  }}>\n                            <ListItemAvatar>\n                                <Folder />\n                            </ListItemAvatar>\n                            <ListItemText primary={it.name}/>\n                        </ListItem>\n                    ))\n                }\n            </List>\n            <DialogActions>\n                <Button onClick={onDialogOk}>\n                    Select\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default PathPickDialog","/home/aren/Desktop/YouPlus/ypw/src/api/path.ts",["858"],"import apiRequest from \"../utils/request\";\nimport {ApplicationConfig} from \"../config\";\nimport {BaseResponse} from \"./base\";\n\nexport interface PathItem {\n    name:string\n    type:string\n    path:string\n}\nexport const fetchDirContent = async (target:string):Promise<PathItem[]> => {\n    // @ts-ignore\n    return apiRequest.get(ApplicationConfig.apiPaths.readDir,{\n        params: {target}\n    })\n}","/home/aren/Desktop/YouPlus/ypw/src/components/PathPickDialog/style.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Logs/index.tsx",["859","860"],"import useStyles from \"./style\";\nimport PageHead from \"../../components/PageHead\";\nimport React, {useEffect} from \"react\";\nimport {usePageHeadController} from \"../../components/PageHead/hook\";\nimport {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow\n} from \"@material-ui/core\";\nimport useLogsModel from \"./model\";\nimport {getLogLevelText} from \"../../utils/log\";\nimport ChipSelectView from \"../../components/ChipSelectView\";\n\nexport interface LogsPagePropsType {\n\n}\n\nconst LogsPage = ({}: LogsPagePropsType) => {\n    const classes = useStyles()\n    const pageHeadController = usePageHeadController({})\n    const model = useLogsModel()\n    useEffect(() => {\n        model.initData()\n    }, [])\n    return (\n        <div>\n            <PageHead title={\"Logs\"} controller={pageHeadController}/>\n            <div className={classes.content}>\n                <div className={classes.filterRow}>\n                    <div className={classes.selectionChipContainer}>\n                        <ChipSelectView\n                            options={[\n                                {\n                                    name: 'debug',\n                                    value: '1'\n                                },\n                                {\n                                    name: 'info',\n                                    value: '2'\n                                },\n                                {\n                                    name: 'warn',\n                                    value: '3'\n                                },\n                                {\n                                    name: 'error',\n                                    value: '4'\n                                },\n                                {\n                                    name: 'fatal',\n                                    value: '5'\n                                }\n                            ]}\n                            selected={model.filter.levels}\n                            onChange={values => model.updateLevels(values)}\n                            label=\"Levels:\"\n                        />\n                    </div>\n\n                </div>\n\n                <Paper className={classes.listContainer}>\n                    <div className={classes.listHead}>\n                        <div className={classes.listTitle}>\n                            Data\n                        </div>\n                    </div>\n                    <div>\n                        <TableContainer className={classes.tableContainer}>\n                            <Table className={classes.table} size={\"small\"}>\n                                <TableHead>\n                                    <TableRow className={classes.thead}>\n                                        <TableCell>\n                                            Application\n                                        </TableCell>\n                                        <TableCell>\n                                            Message\n                                        </TableCell>\n                                        <TableCell>\n                                            Scope\n                                        </TableCell>\n                                        <TableCell>\n                                            Level\n                                        </TableCell>\n                                        <TableCell>\n                                            Time\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        model.logs.map(log => {\n                                            return (\n                                                <TableRow>\n                                                    <TableCell>\n                                                        {log.application}\n                                                    </TableCell>\n                                                    <TableCell>\n                                                        {log.message}\n                                                    </TableCell>\n                                                    <TableCell>\n                                                        {log.scope}\n                                                    </TableCell>\n                                                    <TableCell>\n                                                        {getLogLevelText(log.level)}\n                                                    </TableCell>\n                                                    <TableCell>\n                                                        {log.time}\n                                                    </TableCell>\n                                                </TableRow>\n                                            )\n                                        })\n                                    }\n                                </TableBody>\n                            </Table>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 20, 25, 50, 100, 200]}\n                                component=\"div\"\n                                count={model.total}\n                                rowsPerPage={model.filter.pageSize}\n                                page={model.filter.page - 1}\n                                onPageChange={(_, page) => {\n                                    model.updatePage(page)\n                                }}\n                                onRowsPerPageChange={(event) => {\n                                    model.updatePageSize(parseInt(event.target.value, 10))\n                                }}\n                            />\n                        </TableContainer>\n                    </div>\n                </Paper>\n            </div>\n        </div>\n    )\n}\n\nexport default LogsPage;\n","/home/aren/Desktop/YouPlus/ypw/src/pages/Logs/style.tsx",[],"/home/aren/Desktop/YouPlus/ypw/src/pages/Logs/model.ts",["861"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {fetchLogs, Log} from \"../../api/log\";\n\nexport interface LogsFilter {\n    page: number\n    pageSize: number\n    order: string\n    levels: string[]\n}\n\nconst LogsModel = () => {\n    const [logs, setLogs] = useState<Log[]>([])\n    const [filter, setFilter] = useState<LogsFilter>({\n        page: 1,\n        pageSize: 20,\n        order: '-time',\n        levels: ['2', '3', '4', '5']\n    })\n\n    const [total, setTotal] = useState<number>(0)\n    useEffect(() => {\n        initData()\n    }, [filter])\n    const initData = async () => {\n        const response = await fetchLogs({\n            page: filter.page,\n            pageSize: filter.pageSize,\n            order: filter.order,\n            level: filter.levels\n        })\n        setLogs(response.result)\n        setTotal(response.count)\n    }\n    const updatePage = (page: number) => {\n        setFilter({\n            ...filter,\n            page: page + 1\n        })\n    }\n    const updatePageSize = (pageSize: number) => {\n        console.log(pageSize)\n        setFilter({\n            ...filter,\n            pageSize,\n            page: 1\n        })\n    }\n    const updateLevels = (levels: string[]) => {\n        setFilter(\n            {\n                ...filter,\n                levels,\n                page: 1\n            }\n        )\n    }\n    return {\n        logs, initData, filter, total, updatePage, updatePageSize, updateLevels\n    }\n}\nconst useLogsModel = createModel(LogsModel)\nexport default useLogsModel\n","/home/aren/Desktop/YouPlus/ypw/src/api/log.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/utils/log.ts",[],"/home/aren/Desktop/YouPlus/ypw/src/components/ChipSelectView/index.tsx",["862","863"],"import useStyles from \"./style\";\nimport clsx from \"clsx\";\nimport {Card, Chip, IconButton, Paper, Popover, Typography} from \"@material-ui/core\";\nimport {Add} from \"@material-ui/icons\";\nimport {useState} from \"react\";\n\nexport interface SelectOption {\n    name: string\n    value: string\n}\n\nexport interface ChipSelectViewPropsType {\n    options: SelectOption[]\n    selected: string[]\n    className?: string\n    onChange: (value: string[]) => void\n    label:string\n}\n\nconst ChipSelectView = ({options, selected, className, onChange, label}: ChipSelectViewPropsType) => {\n    const classes = useStyles()\n    const [anchorEl,setAnchorEl] = useState<HTMLButtonElement | null>(null)\n    const getChipLabels = () => {\n        const labels: SelectOption[] = [];\n        selected.forEach(selected => {\n            const option = options.find(it => it.value === selected)\n            if (option) {\n                labels.push(option)\n            }\n        })\n        return labels\n    }\n    const getDisplayOption = () => {\n        return options.filter(option => {\n            return !selected.find(value => option.value === value)\n        })\n    }\n    return (\n        <div className={clsx(classes.root, className)}>\n\n            <Popover\n                open={Boolean(anchorEl)}\n                anchorEl={anchorEl}\n                onClose={() => setAnchorEl(null)}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n            >\n                <Paper className={classes.selectCard}>\n                    <Typography variant={\"h6\"}>Add</Typography>\n                    <div className={classes.optionContent}>\n                        {\n                            getDisplayOption().map(it => {\n                                return (\n                                    <Chip\n                                        label={it.name}\n                                        color={'primary'}\n                                        key={it.value}\n                                        className={classes.chip}\n                                        onClick={() => onChange([...selected,it.value])}\n                                    />\n                                )\n                            })\n                        }\n                    </div>\n\n                </Paper>\n            </Popover>\n            <div className={classes.label}>\n                <Typography variant={\"caption\"} >{label}</Typography>\n            </div>\n            {\n                getChipLabels().map(it => {\n                    return (\n                        <Chip\n                            color={'primary'}\n                            label={it.name}\n                            size={\"small\"}\n                            key={it.value}\n                            className={classes.chip}\n                            onDelete={() => onChange(selected.filter(selectedValue => selectedValue != it.value))}\n                        />\n                    )\n                })\n            }\n            <IconButton size={\"small\"} onClick={(e) => setAnchorEl(e.currentTarget)}>\n                <Add/>\n            </IconButton>\n        </div>\n    )\n}\n\nexport default ChipSelectView;\n","/home/aren/Desktop/YouPlus/ypw/src/components/ChipSelectView/style.tsx",[],{"ruleId":"864","replacedBy":"865"},{"ruleId":"866","replacedBy":"867"},{"ruleId":"868","severity":1,"message":"869","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":13},{"ruleId":"868","severity":1,"message":"872","line":2,"column":22,"nodeType":"870","messageId":"871","endLine":2,"endColumn":28},{"ruleId":"873","severity":1,"message":"874","line":33,"column":22,"nodeType":"875","messageId":"876","endLine":33,"endColumn":46},{"ruleId":"877","severity":1,"message":"878","line":42,"column":8,"nodeType":"879","endLine":42,"endColumn":10,"suggestions":"880"},{"ruleId":"881","severity":1,"message":"882","line":1,"column":1,"nodeType":"883","messageId":"876","fix":"884"},{"ruleId":"873","severity":1,"message":"874","line":11,"column":20,"nodeType":"875","messageId":"876","endLine":11,"endColumn":42},{"ruleId":"877","severity":1,"message":"885","line":16,"column":7,"nodeType":"879","endLine":16,"endColumn":9,"suggestions":"886"},{"ruleId":"868","severity":1,"message":"887","line":2,"column":8,"nodeType":"870","messageId":"871","endLine":2,"endColumn":16},{"ruleId":"868","severity":1,"message":"888","line":5,"column":13,"nodeType":"870","messageId":"871","endLine":5,"endColumn":19},{"ruleId":"868","severity":1,"message":"889","line":13,"column":9,"nodeType":"870","messageId":"871","endLine":13,"endColumn":12},{"ruleId":"873","severity":1,"message":"874","line":26,"column":22,"nodeType":"875","messageId":"876","endLine":26,"endColumn":46},{"ruleId":"877","severity":1,"message":"890","line":32,"column":8,"nodeType":"879","endLine":32,"endColumn":10,"suggestions":"891"},{"ruleId":"868","severity":1,"message":"887","line":21,"column":8,"nodeType":"870","messageId":"871","endLine":21,"endColumn":16},{"ruleId":"873","severity":1,"message":"874","line":37,"column":18,"nodeType":"875","messageId":"876","endLine":37,"endColumn":38},{"ruleId":"877","severity":1,"message":"892","line":45,"column":7,"nodeType":"879","endLine":45,"endColumn":9,"suggestions":"893"},{"ruleId":"868","severity":1,"message":"894","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":15},{"ruleId":"868","severity":1,"message":"895","line":2,"column":17,"nodeType":"870","messageId":"871","endLine":2,"endColumn":21},{"ruleId":"868","severity":1,"message":"896","line":2,"column":39,"nodeType":"870","messageId":"871","endLine":2,"endColumn":53},{"ruleId":"868","severity":1,"message":"897","line":2,"column":76,"nodeType":"870","messageId":"871","endLine":2,"endColumn":86},{"ruleId":"868","severity":1,"message":"898","line":5,"column":8,"nodeType":"870","messageId":"871","endLine":5,"endColumn":19},{"ruleId":"868","severity":1,"message":"899","line":9,"column":9,"nodeType":"870","messageId":"871","endLine":9,"endColumn":15},{"ruleId":"873","severity":1,"message":"874","line":15,"column":22,"nodeType":"875","messageId":"876","endLine":15,"endColumn":46},{"ruleId":"868","severity":1,"message":"900","line":18,"column":11,"nodeType":"870","messageId":"871","endLine":18,"endColumn":18},{"ruleId":"877","severity":1,"message":"901","line":22,"column":7,"nodeType":"879","endLine":22,"endColumn":9,"suggestions":"902"},{"ruleId":"873","severity":1,"message":"874","line":15,"column":20,"nodeType":"875","messageId":"876","endLine":15,"endColumn":42},{"ruleId":"877","severity":1,"message":"885","line":22,"column":8,"nodeType":"879","endLine":22,"endColumn":10,"suggestions":"903"},{"ruleId":"868","severity":1,"message":"897","line":2,"column":81,"nodeType":"870","messageId":"871","endLine":2,"endColumn":91},{"ruleId":"873","severity":1,"message":"874","line":14,"column":24,"nodeType":"875","messageId":"876","endLine":14,"endColumn":50},{"ruleId":"877","severity":1,"message":"904","line":22,"column":8,"nodeType":"879","endLine":22,"endColumn":10,"suggestions":"905"},{"ruleId":"873","severity":1,"message":"874","line":13,"column":25,"nodeType":"875","messageId":"876","endLine":13,"endColumn":52},{"ruleId":"877","severity":1,"message":"904","line":21,"column":8,"nodeType":"879","endLine":21,"endColumn":10,"suggestions":"906"},{"ruleId":"868","severity":1,"message":"907","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":18},{"ruleId":"868","severity":1,"message":"907","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":18},{"ruleId":"868","severity":1,"message":"907","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":18},{"ruleId":"868","severity":1,"message":"908","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":19},{"ruleId":"868","severity":1,"message":"907","line":3,"column":9,"nodeType":"870","messageId":"871","endLine":3,"endColumn":18},{"ruleId":"868","severity":1,"message":"909","line":3,"column":9,"nodeType":"870","messageId":"871","endLine":3,"endColumn":17},{"ruleId":"868","severity":1,"message":"910","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":22},{"ruleId":"868","severity":1,"message":"907","line":1,"column":9,"nodeType":"870","messageId":"871","endLine":1,"endColumn":18},{"ruleId":"868","severity":1,"message":"911","line":3,"column":30,"nodeType":"870","messageId":"871","endLine":3,"endColumn":38},{"ruleId":"868","severity":1,"message":"912","line":11,"column":9,"nodeType":"870","messageId":"871","endLine":11,"endColumn":12},{"ruleId":"868","severity":1,"message":"913","line":5,"column":9,"nodeType":"870","messageId":"871","endLine":5,"endColumn":24},{"ruleId":"868","severity":1,"message":"914","line":40,"column":11,"nodeType":"870","messageId":"871","endLine":40,"endColumn":21},{"ruleId":"868","severity":1,"message":"915","line":47,"column":15,"nodeType":"870","messageId":"871","endLine":47,"endColumn":23},{"ruleId":"916","severity":1,"message":"917","line":61,"column":23,"nodeType":"918","messageId":"876","endLine":61,"endColumn":25},{"ruleId":"916","severity":1,"message":"917","line":77,"column":23,"nodeType":"918","messageId":"876","endLine":77,"endColumn":25},{"ruleId":"868","severity":1,"message":"919","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":26},{"ruleId":"868","severity":1,"message":"920","line":4,"column":9,"nodeType":"870","messageId":"871","endLine":4,"endColumn":29},{"ruleId":"868","severity":1,"message":"921","line":2,"column":25,"nodeType":"870","messageId":"871","endLine":2,"endColumn":35},{"ruleId":"868","severity":1,"message":"922","line":3,"column":9,"nodeType":"870","messageId":"871","endLine":3,"endColumn":13},{"ruleId":"868","severity":1,"message":"923","line":9,"column":8,"nodeType":"870","messageId":"871","endLine":9,"endColumn":12},{"ruleId":"868","severity":1,"message":"924","line":2,"column":8,"nodeType":"870","messageId":"871","endLine":2,"endColumn":12},{"ruleId":"868","severity":1,"message":"924","line":2,"column":8,"nodeType":"870","messageId":"871","endLine":2,"endColumn":12},{"ruleId":"868","severity":1,"message":"925","line":8,"column":7,"nodeType":"870","messageId":"871","endLine":8,"endColumn":18},{"ruleId":"868","severity":1,"message":"888","line":3,"column":5,"nodeType":"870","messageId":"871","endLine":3,"endColumn":11},{"ruleId":"868","severity":1,"message":"926","line":19,"column":9,"nodeType":"870","messageId":"871","endLine":19,"endColumn":15},{"ruleId":"877","severity":1,"message":"904","line":33,"column":7,"nodeType":"879","endLine":33,"endColumn":9,"suggestions":"927"},{"ruleId":"868","severity":1,"message":"928","line":1,"column":74,"nodeType":"870","messageId":"871","endLine":1,"endColumn":79},{"ruleId":"868","severity":1,"message":"897","line":1,"column":81,"nodeType":"870","messageId":"871","endLine":1,"endColumn":91},{"ruleId":"873","severity":1,"message":"874","line":14,"column":21,"nodeType":"875","messageId":"876","endLine":14,"endColumn":44},{"ruleId":"868","severity":1,"message":"897","line":2,"column":22,"nodeType":"870","messageId":"871","endLine":2,"endColumn":32},{"ruleId":"868","severity":1,"message":"907","line":3,"column":16,"nodeType":"870","messageId":"871","endLine":3,"endColumn":25},{"ruleId":"868","severity":1,"message":"929","line":11,"column":9,"nodeType":"870","messageId":"871","endLine":11,"endColumn":22},{"ruleId":"873","severity":1,"message":"874","line":20,"column":25,"nodeType":"875","messageId":"876","endLine":20,"endColumn":52},{"ruleId":"868","severity":1,"message":"928","line":5,"column":17,"nodeType":"870","messageId":"871","endLine":5,"endColumn":22},{"ruleId":"868","severity":1,"message":"897","line":5,"column":24,"nodeType":"870","messageId":"871","endLine":5,"endColumn":34},{"ruleId":"873","severity":1,"message":"874","line":17,"column":26,"nodeType":"875","messageId":"876","endLine":17,"endColumn":54},{"ruleId":"877","severity":1,"message":"904","line":27,"column":8,"nodeType":"879","endLine":27,"endColumn":10,"suggestions":"930"},{"ruleId":"868","severity":1,"message":"887","line":2,"column":8,"nodeType":"870","messageId":"871","endLine":2,"endColumn":16},{"ruleId":"873","severity":1,"message":"874","line":17,"column":21,"nodeType":"875","messageId":"876","endLine":17,"endColumn":44},{"ruleId":"877","severity":1,"message":"885","line":24,"column":8,"nodeType":"879","endLine":24,"endColumn":10,"suggestions":"931"},{"ruleId":"868","severity":1,"message":"932","line":7,"column":8,"nodeType":"870","messageId":"871","endLine":7,"endColumn":20},{"ruleId":"873","severity":1,"message":"874","line":31,"column":28,"nodeType":"875","messageId":"876","endLine":31,"endColumn":58},{"ruleId":"877","severity":1,"message":"904","line":39,"column":8,"nodeType":"879","endLine":39,"endColumn":10,"suggestions":"933"},{"ruleId":"873","severity":1,"message":"874","line":19,"column":24,"nodeType":"875","messageId":"876","endLine":19,"endColumn":50},{"ruleId":"877","severity":1,"message":"885","line":29,"column":7,"nodeType":"879","endLine":29,"endColumn":9,"suggestions":"934"},{"ruleId":"868","severity":1,"message":"920","line":7,"column":9,"nodeType":"870","messageId":"871","endLine":7,"endColumn":29},{"ruleId":"873","severity":1,"message":"874","line":13,"column":20,"nodeType":"875","messageId":"876","endLine":13,"endColumn":42},{"ruleId":"868","severity":1,"message":"897","line":3,"column":23,"nodeType":"870","messageId":"871","endLine":3,"endColumn":33},{"ruleId":"873","severity":1,"message":"874","line":16,"column":22,"nodeType":"875","messageId":"876","endLine":16,"endColumn":46},{"ruleId":"873","severity":1,"message":"874","line":20,"column":34,"nodeType":"875","messageId":"876","endLine":20,"endColumn":55},{"ruleId":"868","severity":1,"message":"897","line":12,"column":5,"nodeType":"870","messageId":"871","endLine":12,"endColumn":15},{"ruleId":"873","severity":1,"message":"874","line":26,"column":20,"nodeType":"875","messageId":"876","endLine":26,"endColumn":42},{"ruleId":"877","severity":1,"message":"935","line":39,"column":8,"nodeType":"879","endLine":39,"endColumn":10,"suggestions":"936"},{"ruleId":"868","severity":1,"message":"897","line":4,"column":78,"nodeType":"870","messageId":"871","endLine":4,"endColumn":88},{"ruleId":"868","severity":1,"message":"937","line":5,"column":22,"nodeType":"870","messageId":"871","endLine":5,"endColumn":28},{"ruleId":"868","severity":1,"message":"938","line":8,"column":8,"nodeType":"870","messageId":"871","endLine":8,"endColumn":14},{"ruleId":"868","severity":1,"message":"939","line":12,"column":9,"nodeType":"870","messageId":"871","endLine":12,"endColumn":17},{"ruleId":"873","severity":1,"message":"874","line":18,"column":22,"nodeType":"875","messageId":"876","endLine":18,"endColumn":46},{"ruleId":"877","severity":1,"message":"885","line":24,"column":8,"nodeType":"879","endLine":24,"endColumn":10,"suggestions":"940"},{"ruleId":"868","severity":1,"message":"941","line":28,"column":11,"nodeType":"870","messageId":"871","endLine":28,"endColumn":32},{"ruleId":"868","severity":1,"message":"907","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":18},{"ruleId":"868","severity":1,"message":"942","line":10,"column":9,"nodeType":"870","messageId":"871","endLine":10,"endColumn":15},{"ruleId":"868","severity":1,"message":"943","line":11,"column":9,"nodeType":"870","messageId":"871","endLine":11,"endColumn":17},{"ruleId":"868","severity":1,"message":"944","line":23,"column":11,"nodeType":"870","messageId":"871","endLine":23,"endColumn":30},{"ruleId":"868","severity":1,"message":"945","line":1,"column":9,"nodeType":"870","messageId":"871","endLine":1,"endColumn":20},{"ruleId":"868","severity":1,"message":"907","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":18},{"ruleId":"868","severity":1,"message":"946","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":20},{"ruleId":"868","severity":1,"message":"908","line":12,"column":9,"nodeType":"870","messageId":"871","endLine":12,"endColumn":19},{"ruleId":"868","severity":1,"message":"947","line":13,"column":9,"nodeType":"870","messageId":"871","endLine":13,"endColumn":25},{"ruleId":"868","severity":1,"message":"948","line":14,"column":9,"nodeType":"870","messageId":"871","endLine":14,"endColumn":21},{"ruleId":"868","severity":1,"message":"945","line":15,"column":9,"nodeType":"870","messageId":"871","endLine":15,"endColumn":20},{"ruleId":"868","severity":1,"message":"949","line":4,"column":9,"nodeType":"870","messageId":"871","endLine":4,"endColumn":21},{"ruleId":"868","severity":1,"message":"950","line":3,"column":20,"nodeType":"870","messageId":"871","endLine":3,"endColumn":36},{"ruleId":"873","severity":1,"message":"874","line":9,"column":23,"nodeType":"875","messageId":"876","endLine":9,"endColumn":48},{"ruleId":"877","severity":1,"message":"951","line":24,"column":7,"nodeType":"879","endLine":24,"endColumn":9,"suggestions":"952"},{"ruleId":"868","severity":1,"message":"953","line":17,"column":5,"nodeType":"870","messageId":"871","endLine":17,"endColumn":16},{"ruleId":"873","severity":1,"message":"874","line":48,"column":39,"nodeType":"875","messageId":"876","endLine":48,"endColumn":65},{"ruleId":"868","severity":1,"message":"888","line":4,"column":5,"nodeType":"870","messageId":"871","endLine":4,"endColumn":11},{"ruleId":"868","severity":1,"message":"954","line":12,"column":25,"nodeType":"870","messageId":"871","endLine":12,"endColumn":31},{"ruleId":"877","severity":1,"message":"955","line":67,"column":7,"nodeType":"879","endLine":67,"endColumn":13,"suggestions":"956"},{"ruleId":"916","severity":1,"message":"917","line":69,"column":23,"nodeType":"918","messageId":"876","endLine":69,"endColumn":25},{"ruleId":"916","severity":1,"message":"917","line":80,"column":23,"nodeType":"918","messageId":"876","endLine":80,"endColumn":25},{"ruleId":"916","severity":1,"message":"917","line":96,"column":23,"nodeType":"918","messageId":"876","endLine":96,"endColumn":25},{"ruleId":"916","severity":1,"message":"917","line":114,"column":41,"nodeType":"918","messageId":"876","endLine":114,"endColumn":43},{"ruleId":"916","severity":1,"message":"917","line":124,"column":39,"nodeType":"918","messageId":"876","endLine":124,"endColumn":41},{"ruleId":"916","severity":1,"message":"917","line":131,"column":32,"nodeType":"918","messageId":"876","endLine":131,"endColumn":34},{"ruleId":"916","severity":1,"message":"917","line":61,"column":27,"nodeType":"918","messageId":"876","endLine":61,"endColumn":29},{"ruleId":"868","severity":1,"message":"957","line":3,"column":8,"nodeType":"870","messageId":"871","endLine":3,"endColumn":16},{"ruleId":"916","severity":1,"message":"917","line":16,"column":23,"nodeType":"918","messageId":"876","endLine":16,"endColumn":25},{"ruleId":"868","severity":1,"message":"958","line":6,"column":9,"nodeType":"870","messageId":"871","endLine":6,"endColumn":15},{"ruleId":"868","severity":1,"message":"911","line":1,"column":27,"nodeType":"870","messageId":"871","endLine":1,"endColumn":35},{"ruleId":"868","severity":1,"message":"959","line":2,"column":9,"nodeType":"870","messageId":"871","endLine":2,"endColumn":19},{"ruleId":"868","severity":1,"message":"960","line":2,"column":21,"nodeType":"870","messageId":"871","endLine":2,"endColumn":25},{"ruleId":"868","severity":1,"message":"961","line":16,"column":11,"nodeType":"870","messageId":"871","endLine":16,"endColumn":21},{"ruleId":"877","severity":1,"message":"890","line":20,"column":7,"nodeType":"879","endLine":20,"endColumn":9,"suggestions":"962"},{"ruleId":"868","severity":1,"message":"963","line":7,"column":5,"nodeType":"870","messageId":"871","endLine":7,"endColumn":16},{"ruleId":"916","severity":1,"message":"917","line":51,"column":26,"nodeType":"918","messageId":"876","endLine":51,"endColumn":28},{"ruleId":"877","severity":1,"message":"964","line":59,"column":7,"nodeType":"879","endLine":59,"endColumn":20,"suggestions":"965"},{"ruleId":"868","severity":1,"message":"966","line":3,"column":9,"nodeType":"870","messageId":"871","endLine":3,"endColumn":21},{"ruleId":"873","severity":1,"message":"874","line":23,"column":19,"nodeType":"875","messageId":"876","endLine":23,"endColumn":40},{"ruleId":"877","severity":1,"message":"885","line":29,"column":8,"nodeType":"879","endLine":29,"endColumn":10,"suggestions":"967"},{"ruleId":"877","severity":1,"message":"968","line":24,"column":8,"nodeType":"879","endLine":24,"endColumn":16,"suggestions":"969"},{"ruleId":"868","severity":1,"message":"970","line":3,"column":9,"nodeType":"870","messageId":"871","endLine":3,"endColumn":13},{"ruleId":"916","severity":1,"message":"971","line":82,"column":101,"nodeType":"918","messageId":"876","endLine":82,"endColumn":103},"no-native-reassign",["972"],"no-negated-in-lhs",["973"],"@typescript-eslint/no-unused-vars","'blue' is defined but never used.","Identifier","unusedVar","'indigo' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onGlobalSnackMessage'. Either include it or remove the dependency array.","ArrayExpression",["974"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"975","text":"976"},"React Hook useEffect has a missing dependency: 'model'. Either include it or remove the dependency array.",["977"],"'ListPage' is defined but never used.","'Button' is defined but never used.","'Add' is defined but never used.","React Hook useEffect has a missing dependency: 'storageModel'. Either include it or remove the dependency array.",["978"],"React Hook useEffect has a missing dependency: 'zfsModel'. Either include it or remove the dependency array.",["979"],"'Avatar' is defined but never used.","'Grid' is defined but never used.","'ListItemAvatar' is defined but never used.","'Typography' is defined but never used.","'NetworkCard' is defined but never used.","'Folder' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'networkModel'. Either include it or remove the dependency array.",["980"],["981"],"React Hook useEffect has missing dependencies: 'model' and 'name'. Either include them or remove the dependency array.",["982"],["983"],"'useEffect' is defined but never used.","'fetchDisks' is defined but never used.","'DiskInfo' is defined but never used.","'ResponseError' is defined but never used.","'useState' is defined but never used.","'Dns' is defined but never used.","'CreateZPoolForm' is defined but never used.","'onDialogOk' is assigned a value but never used.","'response' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'ApplicationConfig' is defined but never used.","'useLocalStorageState' is defined but never used.","'ButtonBase' is defined but never used.","'Vdev' is defined but never used.","'task' is defined but never used.","'clsx' is defined but never used.","'drawerWidth' is assigned a value but never used.","'Delete' is defined but never used.",["984"],"'Paper' is defined but never used.","'TreeGraphData' is defined but never used.",["985"],["986"],"'UserListCard' is defined but never used.",["987"],["988"],"React Hook useEffect has a missing dependency: 'usersModel'. Either include it or remove the dependency array.",["989"],"'Person' is defined but never used.","'layout' is defined but never used.","'DataGrid' is defined but never used.",["990"],"'columns' is assigned a value but never used.","'strict' is defined but never used.","'hexToRgb' is defined but never used.","'removeFromAutoStart' is assigned a value but never used.","'getUserList' is defined but never used.","'useInterval' is defined but never used.","'fetchStorageList' is defined but never used.","'getShareList' is defined but never used.","'useClickAway' is defined but never used.","'UserListResponse' is defined but never used.","React Hook useEffect has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.",["991"],"'NetworkCell' is defined but never used.","'Remove' is defined but never used.","React Hook useEffect has a missing dependency: 'uploadFile'. Either include it or remove the dependency array.",["992"],"'DiskIcon' is defined but never used.","'Memory' is defined but never used.","'fetchParts' is defined but never used.","'Part' is defined but never used.","'partsModel' is assigned a value but never used.",["993"],"'DialogTitle' is defined but never used.","React Hook useEffect has a missing dependency: 'refreshContent'. Either include it or remove the dependency array.",["994"],"'BaseResponse' is defined but never used.",["995"],"React Hook useEffect has a missing dependency: 'initData'. Either include it or remove the dependency array.",["996"],"'Card' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"997","fix":"998"},[-1,0],"",{"desc":"999","fix":"1000"},{"desc":"1001","fix":"1002"},{"desc":"1003","fix":"1004"},{"desc":"1005","fix":"1006"},{"desc":"999","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1008","fix":"1010"},{"desc":"1008","fix":"1011"},{"desc":"1008","fix":"1012"},{"desc":"999","fix":"1013"},{"desc":"1008","fix":"1014"},{"desc":"999","fix":"1015"},{"desc":"1016","fix":"1017"},{"desc":"999","fix":"1018"},{"desc":"1019","fix":"1020"},{"desc":"1021","fix":"1022"},{"desc":"1001","fix":"1023"},{"desc":"1024","fix":"1025"},{"desc":"999","fix":"1026"},{"desc":"1027","fix":"1028"},"Update the dependencies array to be: [onGlobalSnackMessage]",{"range":"1029","text":"1030"},"Update the dependencies array to be: [model]",{"range":"1031","text":"1032"},"Update the dependencies array to be: [storageModel]",{"range":"1033","text":"1034"},"Update the dependencies array to be: [zfsModel]",{"range":"1035","text":"1036"},"Update the dependencies array to be: [networkModel]",{"range":"1037","text":"1038"},{"range":"1039","text":"1032"},"Update the dependencies array to be: [model, name]",{"range":"1040","text":"1041"},{"range":"1042","text":"1041"},{"range":"1043","text":"1041"},{"range":"1044","text":"1041"},{"range":"1045","text":"1032"},{"range":"1046","text":"1041"},{"range":"1047","text":"1032"},"Update the dependencies array to be: [usersModel]",{"range":"1048","text":"1049"},{"range":"1050","text":"1032"},"Update the dependencies array to be: [enqueueSnackbar]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [file, uploadFile]",{"range":"1053","text":"1054"},{"range":"1055","text":"1034"},"Update the dependencies array to be: [currentPath, refreshContent]",{"range":"1056","text":"1057"},{"range":"1058","text":"1032"},"Update the dependencies array to be: [filter, initData]",{"range":"1059","text":"1060"},[1833,1835],"[onGlobalSnackMessage]",[470,472],"[model]",[975,977],"[storageModel]",[1310,1312],"[zfsModel]",[810,812],"[networkModel]",[774,776],[782,784],"[model, name]",[748,750],[909,911],[1008,1010],[906,908],[1492,1494],[1083,1085],[1288,1290],"[usersModel]",[917,919],[1095,1097],"[enqueueSnackbar]",[2260,2266],"[file, uploadFile]",[805,807],[1725,1738],"[currentPath, refreshContent]",[762,764],[568,576],"[filter, initData]"]