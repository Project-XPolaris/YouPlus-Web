[{"/home/aren/Desktop/ypw/src/index.tsx":"1","/home/aren/Desktop/ypw/src/reportWebVitals.ts":"2","/home/aren/Desktop/ypw/src/App.tsx":"3","/home/aren/Desktop/ypw/src/layout/Base/index.tsx":"4","/home/aren/Desktop/ypw/src/pages/Apps/index.tsx":"5","/home/aren/Desktop/ypw/src/pages/ShareFolder/index.tsx":"6","/home/aren/Desktop/ypw/src/layout/Base/parts/Nav/index.tsx":"7","/home/aren/Desktop/ypw/src/pages/Users/index.tsx":"8","/home/aren/Desktop/ypw/src/pages/Disks/index.tsx":"9","/home/aren/Desktop/ypw/src/pages/Storage/index.tsx":"10","/home/aren/Desktop/ypw/src/pages/Parts/index.tsx":"11","/home/aren/Desktop/ypw/src/pages/ZFS/index.tsx":"12","/home/aren/Desktop/ypw/src/pages/Apps/style.ts":"13","/home/aren/Desktop/ypw/src/pages/Apps/model.ts":"14","/home/aren/Desktop/ypw/src/pages/ShareFolder/style.ts":"15","/home/aren/Desktop/ypw/src/pages/ShareFolder/model.ts":"16","/home/aren/Desktop/ypw/src/pages/Users/model.ts":"17","/home/aren/Desktop/ypw/src/pages/Users/style.ts":"18","/home/aren/Desktop/ypw/src/pages/Disks/model.ts":"19","/home/aren/Desktop/ypw/src/pages/Disks/style.ts":"20","/home/aren/Desktop/ypw/src/pages/Storage/model.ts":"21","/home/aren/Desktop/ypw/src/pages/Storage/style.ts":"22","/home/aren/Desktop/ypw/src/pages/Parts/model.ts":"23","/home/aren/Desktop/ypw/src/pages/ZFS/style.ts":"24","/home/aren/Desktop/ypw/src/pages/ZFS/model.ts":"25","/home/aren/Desktop/ypw/src/pages/Parts/style.ts":"26","/home/aren/Desktop/ypw/src/model/layout.ts":"27","/home/aren/Desktop/ypw/src/api/users.ts":"28","/home/aren/Desktop/ypw/src/api/apps.ts":"29","/home/aren/Desktop/ypw/src/api/share.ts":"30","/home/aren/Desktop/ypw/src/api/disks.ts":"31","/home/aren/Desktop/ypw/src/api/storage.ts":"32","/home/aren/Desktop/ypw/src/api/zfs.ts":"33","/home/aren/Desktop/ypw/src/components/AppCard/index.tsx":"34","/home/aren/Desktop/ypw/src/components/NewShareDialog/index.tsx":"35","/home/aren/Desktop/ypw/src/components/ListPage/index.tsx":"36","/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/index.tsx":"37","/home/aren/Desktop/ypw/src/components/NewUserDialog/index.tsx":"38","/home/aren/Desktop/ypw/src/components/ListItemDialog/index.tsx":"39","/home/aren/Desktop/ypw/src/config.ts":"40","/home/aren/Desktop/ypw/src/utils/request.ts":"41","/home/aren/Desktop/ypw/src/components/ListItemDialog/style.ts":"42","/home/aren/Desktop/ypw/src/components/NewUserDialog/style.ts":"43","/home/aren/Desktop/ypw/src/components/NewShareDialog/hook.ts":"44","/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/style.ts":"45","/home/aren/Desktop/ypw/src/components/ListPage/style.ts":"46","/home/aren/Desktop/ypw/src/components/NewShareDialog/style.ts":"47","/home/aren/Desktop/ypw/src/components/DiskSelectField/index.tsx":"48","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/index.tsx":"49","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/index.tsx":"50","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/index.tsx":"51","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/index.tsx":"52","/home/aren/Desktop/ypw/src/components/DiskSelectField/style.ts":"53","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/style.ts":"54","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/style.ts":"55","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/style.ts":"56","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/style.ts":"57","/home/aren/Desktop/ypw/src/components/UserSelectField/index.tsx":"58","/home/aren/Desktop/ypw/src/components/ValueField/index.tsx":"59","/home/aren/Desktop/ypw/src/components/ValueField/style.ts":"60","/home/aren/Desktop/ypw/src/components/UserSelectField/style.ts":"61","/home/aren/Desktop/ypw/src/layout/Blank/index.tsx":"62","/home/aren/Desktop/ypw/src/layout/Auth/index.tsx":"63","/home/aren/Desktop/ypw/src/pages/Login/index.tsx":"64","/home/aren/Desktop/ypw/src/pages/Login/style.ts":"65","/home/aren/Desktop/ypw/src/api/auth.ts":"66","/home/aren/Desktop/ypw/src/theme.ts":"67","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/index.tsx":"68","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/style.ts":"69","/home/aren/Desktop/ypw/src/model/user.ts":"70","/home/aren/Desktop/ypw/src/utils/app.ts":"71","/home/aren/Desktop/ypw/src/components/AppCard/style.ts":"72","/home/aren/Desktop/ypw/src/hooks/ContextMenu.ts":"73","/home/aren/Desktop/ypw/src/pages/Account/index.tsx":"74","/home/aren/Desktop/ypw/src/pages/Account/style.ts":"75","/home/aren/Desktop/ypw/src/components/InfoCard/index.tsx":"76","/home/aren/Desktop/ypw/src/components/InfoCard/style.ts":"77","/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/index.tsx":"78","/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/style.ts":"79","/home/aren/Desktop/ypw/src/api/account.ts":"80","/home/aren/Desktop/ypw/src/pages/DashBoard/index.tsx":"81","/home/aren/Desktop/ypw/src/pages/DashBoard/style.ts":"82","/home/aren/Desktop/ypw/src/pages/DashBoard/model.ts":"83","/home/aren/Desktop/ypw/src/api/style.ts":"84","/home/aren/Desktop/ypw/src/pages/ShareFolderDetail/index.tsx":"85","/home/aren/Desktop/ypw/src/pages/ShareFolderDetail/style.ts":"86","/home/aren/Desktop/ypw/src/pages/ShareFolderDetail/model.ts":"87","/home/aren/Desktop/ypw/src/components/StorageCard/index.tsx":"88","/home/aren/Desktop/ypw/src/components/StorageCard/style.ts":"89","/home/aren/Desktop/ypw/src/components/UserListCard/index.tsx":"90","/home/aren/Desktop/ypw/src/components/UserListCard/style.ts":"91","/home/aren/Desktop/ypw/src/components/UserSelectDialog/index.tsx":"92","/home/aren/Desktop/ypw/src/components/UserSelectDialog/style.ts":"93","/home/aren/Desktop/ypw/src/utils/values.ts":"94","/home/aren/Desktop/ypw/src/components/SwitchSelectDialog/index.tsx":"95","/home/aren/Desktop/ypw/src/components/SwitchSelectDialog/style.ts":"96","/home/aren/Desktop/ypw/src/hooks/ConfirmDialog.ts":"97","/home/aren/Desktop/ypw/src/pages/Groups/index.tsx":"98","/home/aren/Desktop/ypw/src/pages/Groups/model.ts":"99","/home/aren/Desktop/ypw/src/components/NewGroupDialog/index.tsx":"100","/home/aren/Desktop/ypw/src/components/NewGroupDialog/style.ts":"101","/home/aren/Desktop/ypw/src/pages/Groups/style.ts":"102","/home/aren/Desktop/ypw/src/pages/GroupDetail/index.tsx":"103","/home/aren/Desktop/ypw/src/pages/GroupDetail/style.ts":"104","/home/aren/Desktop/ypw/src/pages/GroupDetail/model.ts":"105"},{"size":500,"mtime":1614998296833,"results":"106","hashOfConfig":"107"},{"size":425,"mtime":1614998296846,"results":"108","hashOfConfig":"107"},{"size":516,"mtime":1614998296815,"results":"109","hashOfConfig":"107"},{"size":1404,"mtime":1618400994714,"results":"110","hashOfConfig":"107"},{"size":1249,"mtime":1614998296837,"results":"111","hashOfConfig":"107"},{"size":2489,"mtime":1618127409825,"results":"112","hashOfConfig":"107"},{"size":7426,"mtime":1618621871663,"results":"113","hashOfConfig":"107"},{"size":3282,"mtime":1618406056531,"results":"114","hashOfConfig":"107"},{"size":1323,"mtime":1615994728821,"results":"115","hashOfConfig":"107"},{"size":3458,"mtime":1618406318905,"results":"116","hashOfConfig":"107"},{"size":1277,"mtime":1615994728785,"results":"117","hashOfConfig":"107"},{"size":7300,"mtime":1615994728805,"results":"118","hashOfConfig":"107"},{"size":242,"mtime":1614998296838,"results":"119","hashOfConfig":"107"},{"size":977,"mtime":1618409639751,"results":"120","hashOfConfig":"107"},{"size":524,"mtime":1614998296839,"results":"121","hashOfConfig":"107"},{"size":684,"mtime":1615994728793,"results":"122","hashOfConfig":"107"},{"size":754,"mtime":1618317796644,"results":"123","hashOfConfig":"107"},{"size":534,"mtime":1614998296840,"results":"124","hashOfConfig":"107"},{"size":442,"mtime":1615994728809,"results":"125","hashOfConfig":"107"},{"size":342,"mtime":1614998296841,"results":"126","hashOfConfig":"107"},{"size":762,"mtime":1615994728765,"results":"127","hashOfConfig":"107"},{"size":345,"mtime":1614998296844,"results":"128","hashOfConfig":"107"},{"size":676,"mtime":1615994728781,"results":"129","hashOfConfig":"107"},{"size":540,"mtime":1614998296843,"results":"130","hashOfConfig":"107"},{"size":763,"mtime":1615994728829,"results":"131","hashOfConfig":"107"},{"size":342,"mtime":1614998296842,"results":"132","hashOfConfig":"107"},{"size":1154,"mtime":1618638961214,"results":"133","hashOfConfig":"107"},{"size":2112,"mtime":1618666430109,"results":"134","hashOfConfig":"107"},{"size":1054,"mtime":1614998296815,"results":"135","hashOfConfig":"107"},{"size":1380,"mtime":1618406582547,"results":"136","hashOfConfig":"107"},{"size":813,"mtime":1615031782224,"results":"137","hashOfConfig":"107"},{"size":690,"mtime":1614998296817,"results":"138","hashOfConfig":"107"},{"size":736,"mtime":1614998296816,"results":"139","hashOfConfig":"107"},{"size":3384,"mtime":1614998296818,"results":"140","hashOfConfig":"107"},{"size":4365,"mtime":1614998296821,"results":"141","hashOfConfig":"107"},{"size":641,"mtime":1614998296829,"results":"142","hashOfConfig":"107"},{"size":1948,"mtime":1614998296828,"results":"143","hashOfConfig":"107"},{"size":1956,"mtime":1614998296820,"results":"144","hashOfConfig":"107"},{"size":2006,"mtime":1614998296832,"results":"145","hashOfConfig":"107"},{"size":477,"mtime":1618664838601,"results":"146","hashOfConfig":"107"},{"size":605,"mtime":1614998296847,"results":"147","hashOfConfig":"107"},{"size":390,"mtime":1614998296832,"results":"148","hashOfConfig":"107"},{"size":329,"mtime":1614998296820,"results":"149","hashOfConfig":"107"},{"size":467,"mtime":1614998296825,"results":"150","hashOfConfig":"107"},{"size":533,"mtime":1614998296828,"results":"151","hashOfConfig":"107"},{"size":440,"mtime":1614998296830,"results":"152","hashOfConfig":"107"},{"size":518,"mtime":1614998296825,"results":"153","hashOfConfig":"107"},{"size":3355,"mtime":1614998296831,"results":"154","hashOfConfig":"107"},{"size":1361,"mtime":1614998296824,"results":"155","hashOfConfig":"107"},{"size":2748,"mtime":1614998296823,"results":"156","hashOfConfig":"107"},{"size":1804,"mtime":1614998296822,"results":"157","hashOfConfig":"107"},{"size":818,"mtime":1614998296821,"results":"158","hashOfConfig":"107"},{"size":463,"mtime":1614998296830,"results":"159","hashOfConfig":"107"},{"size":243,"mtime":1614998296821,"results":"160","hashOfConfig":"107"},{"size":317,"mtime":1614998296822,"results":"161","hashOfConfig":"107"},{"size":800,"mtime":1614998296823,"results":"162","hashOfConfig":"107"},{"size":271,"mtime":1614998296824,"results":"163","hashOfConfig":"107"},{"size":3020,"mtime":1614998296826,"results":"164","hashOfConfig":"107"},{"size":657,"mtime":1614998296827,"results":"165","hashOfConfig":"107"},{"size":361,"mtime":1614998296827,"results":"166","hashOfConfig":"107"},{"size":463,"mtime":1614998296826,"results":"167","hashOfConfig":"107"},{"size":4916,"mtime":1618637303133,"results":"168","hashOfConfig":"107"},{"size":374,"mtime":1614998296836,"results":"169","hashOfConfig":"107"},{"size":3020,"mtime":1618235277999,"results":"170","hashOfConfig":"107"},{"size":1215,"mtime":1614998296846,"results":"171","hashOfConfig":"107"},{"size":345,"mtime":1614998296817,"results":"172","hashOfConfig":"107"},{"size":329,"mtime":1614998296849,"results":"173","hashOfConfig":"107"},{"size":1817,"mtime":1618235425632,"results":"174","hashOfConfig":"107"},{"size":371,"mtime":1614998296835,"results":"175","hashOfConfig":"107"},{"size":1006,"mtime":1618235277991,"results":"176","hashOfConfig":"107"},{"size":195,"mtime":1614998296847,"results":"177","hashOfConfig":"107"},{"size":562,"mtime":1614998296819,"results":"178","hashOfConfig":"107"},{"size":811,"mtime":1617439977423,"results":"179","hashOfConfig":"107"},{"size":1917,"mtime":1617455734543,"results":"180","hashOfConfig":"107"},{"size":328,"mtime":1617450625164,"results":"181","hashOfConfig":"107"},{"size":971,"mtime":1618153852451,"results":"182","hashOfConfig":"107"},{"size":465,"mtime":1618134529596,"results":"183","hashOfConfig":"107"},{"size":1952,"mtime":1617455487598,"results":"184","hashOfConfig":"107"},{"size":197,"mtime":1617451780712,"results":"185","hashOfConfig":"107"},{"size":304,"mtime":1617455718575,"results":"186","hashOfConfig":"107"},{"size":1451,"mtime":1617458220573,"results":"187","hashOfConfig":"107"},{"size":175,"mtime":1617457252845,"results":"188","hashOfConfig":"107"},{"size":518,"mtime":1618236106199,"results":"189","hashOfConfig":"107"},{"size":1863,"mtime":1617458018841,"results":"190","hashOfConfig":"107"},{"size":7588,"mtime":1618406582535,"results":"191","hashOfConfig":"107"},{"size":1180,"mtime":1618400205506,"results":"192","hashOfConfig":"107"},{"size":921,"mtime":1618406598175,"results":"193","hashOfConfig":"107"},{"size":674,"mtime":1618128896492,"results":"194","hashOfConfig":"195"},{"size":311,"mtime":1618128896500,"results":"196","hashOfConfig":"195"},{"size":2152,"mtime":1618638719359,"results":"197","hashOfConfig":"107"},{"size":731,"mtime":1618148273380,"results":"198","hashOfConfig":"107"},{"size":1855,"mtime":1618146892937,"results":"199","hashOfConfig":"107"},{"size":260,"mtime":1618134786875,"results":"200","hashOfConfig":"107"},{"size":195,"mtime":1618153706292,"results":"201","hashOfConfig":"107"},{"size":1174,"mtime":1618154094921,"results":"202","hashOfConfig":"107"},{"size":194,"mtime":1618154120289,"results":"203","hashOfConfig":"107"},{"size":872,"mtime":1618406056539,"results":"204","hashOfConfig":"107"},{"size":2387,"mtime":1618637319805,"results":"205","hashOfConfig":"107"},{"size":603,"mtime":1618635476844,"results":"206","hashOfConfig":"107"},{"size":1394,"mtime":1618634847936,"results":"207","hashOfConfig":"107"},{"size":192,"mtime":1618628941576,"results":"208","hashOfConfig":"107"},{"size":203,"mtime":1618635356861,"results":"209","hashOfConfig":"107"},{"size":2596,"mtime":1618666309661,"results":"210","hashOfConfig":"107"},{"size":317,"mtime":1618666015007,"results":"211","hashOfConfig":"107"},{"size":1388,"mtime":1618666014991,"results":"212","hashOfConfig":"107"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},"ojcpn2",{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"215"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"215"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"215"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"215"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"215"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"215"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"215"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"243","usedDeprecatedRules":"215"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"215"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"215"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"215"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"215"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"215"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"215"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"215"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"215"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"215"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"215"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"215"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"215"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"215"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"215"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"215"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"215"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"215"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"215"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"215"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"215"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"215"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"215"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"215"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"215"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"215"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"215"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ftl189",{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"215"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"215"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"215"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"215"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"215"},"/home/aren/Desktop/ypw/src/index.tsx",[],["464","465"],"/home/aren/Desktop/ypw/src/reportWebVitals.ts",[],"/home/aren/Desktop/ypw/src/App.tsx",[],"/home/aren/Desktop/ypw/src/layout/Base/index.tsx",["466","467"],"import * as React from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport AppNavigation from \"./parts/Nav\";\nimport AuthLayout from \"../Auth\";\nimport AppToolbar from \"./parts/Tool\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        content: {\n            flexGrow: 1,\n            minHeight: \"100vh\",\n            paddingTop: theme.spacing(3),\n            backgroundColor: \"#EEEEEE\"\n        },\n    }),\n);\n\nconst BaseLayout = ({children}: { children: any }) => {\n    const classes = useStyles();\n    console.log(children)\n    return (\n        <AuthLayout>\n            <div className={classes.root}>\n                <CssBaseline/>\n                <AppBar position=\"fixed\" className={classes.appBar}>\n                  <AppToolbar />\n                </AppBar>\n\n                <AppNavigation/>\n                <main className={classes.content}>\n                    <Toolbar/>\n                    {children}\n                </main>\n            </div>\n        </AuthLayout>\n    );\n};\nexport default BaseLayout\n","/home/aren/Desktop/ypw/src/pages/Apps/index.tsx",["468","469","470"],"import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Grid, Typography} from \"@material-ui/core\";\nimport AppCard from \"../../components/AppCard\";\nimport useAppsPageModel from \"./model\";\nimport {App} from \"../../api/apps\";\nimport useStyles from \"./style\";\n\n\n\ninterface AppsPagePropsType {\n\n}\n\n\nexport default function AppsPage({}: AppsPagePropsType) {\n    const classes = useStyles();\n    const model = useAppsPageModel()\n    return (\n        <div className={classes.root}>\n            <Typography variant={\"h5\"}>\n                <Grid container spacing={2}>\n                    {model.appList.map((app: App) => (\n                        <Grid xs={2} item>\n                            <AppCard\n                                app={app}\n                                onStart={() => model.start(app.id)}\n                                onStop={() => model.stop(app.id)}\n                                enableAutoStart={() => model.addToAutoStart(app.id)}\n                                disableAutoStart={() => model.removeAutoStart(app.id)}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Typography>\n        </div>\n    );\n}\n","/home/aren/Desktop/ypw/src/pages/ShareFolder/index.tsx",["471","472","473","474"],"import React, {useEffect} from \"react\";\nimport useStyles from \"./style\";\nimport useShareFoldersModel from \"./model\";\nimport {Avatar, Button, List, ListItem, ListItemAvatar, ListItemText, Typography} from \"@material-ui/core\";\nimport {Add, Folder, Person} from \"@material-ui/icons\";\nimport NewShareDialog from \"../../components/NewShareDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport layout from \"../../model/layout\";\nimport {useHistory} from \"react-router-dom\";\n\nexport interface ShareFolderPropsType {\n\n}\n\nconst ShareFolder = ({}: ShareFolderPropsType) => {\n    const classes = useStyles()\n    const model = useShareFoldersModel()\n    const history = useHistory()\n    useEffect(() => {\n        model.initData()\n    }, [])\n    const layoutModel = useLayoutModel()\n    const newShareSwitchHandler = layoutModel.getDialogSwitchHandler(\"newShare\")\n    return (\n        <div>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Folders\n            </Typography>\n            {\n                layoutModel.getDialogOpen(\"newShare\") &&\n                <NewShareDialog\n                    open={true}\n                    onClose={newShareSwitchHandler}\n                    onCreateShare={async (data) => {\n                        await model.createShare(data)\n                        newShareSwitchHandler()\n                    }}\n                />\n            }\n\n            <div className={classes.actions}>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<Add />}\n                    onClick={newShareSwitchHandler}\n                >\n                    New share folder\n                </Button>\n            </div>\n            <List>\n                {\n                    model.folders.map(it => {\n                        return (\n                            <ListItem key={it.name} button onClick={() => history.push(`/folder/${it.name}/info`)}>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Folder />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it.name}/>\n                            </ListItem>\n                        )\n                    })\n                }\n\n            </List>\n        </div>\n    )\n}\n\nexport default ShareFolder;\n","/home/aren/Desktop/ypw/src/layout/Base/parts/Nav/index.tsx",["475","476","477","478"],"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport {\n    Apps,\n    Archive,\n    Assignment,\n    Dashboard,\n    Dns,\n    Folder,\n    Inbox,\n    Person,\n    Storage,\n    Store,\n    SwapCalls\n} from \"@material-ui/icons\";\nimport {useHistory} from \"react-router-dom\";\nimport {useUpdate} from \"ahooks\";\nimport {ListSubheader} from \"@material-ui/core\";\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles({\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n        boxSizing: 'border-box',\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n});\n\ninterface AppNavigationPropsType {\n\n}\n\n\nexport default function AppNavigation({}: AppNavigationPropsType) {\n    const classes = useStyles();\n    const history = useHistory();\n    const update = useUpdate();\n    const changeUrl = (urlPath: string) => {\n        if (history.location.pathname !== urlPath) {\n            history.replace(urlPath)\n            update()\n        }\n    }\n    console.log(history.location.pathname)\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n        >\n            <Toolbar/>\n            <div className={classes.drawerContainer}>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            General\n                        </ListSubheader>\n                    }\n                >\n                    <ListItem\n                        button\n                        key={\"dashboard\"}\n                        selected={history.location.pathname === \"/\"}\n                        onClick={() => changeUrl(\"/\")}\n                    >\n                        <ListItemIcon>\n                            <Dashboard/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Dashboard\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"apps\"}\n                        selected={history.location.pathname === \"/apps\"}\n                        onClick={() => changeUrl(\"/apps\")}\n                    >\n                        <ListItemIcon>\n                            <Apps/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Apps\"}/>\n                    </ListItem>\n                </List>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            Data\n                        </ListSubheader>\n                    }\n                >\n\n                    <ListItem\n                        button\n                        key={\"disks\"}\n                        selected={history.location.pathname === \"/disks\"}\n                        onClick={() => changeUrl(\"/disks\")}\n                    >\n                        <ListItemIcon>\n                            <Storage/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Disks\"}/>\n                    </ListItem>\n                    {/*<ListItem*/}\n                    {/*    button*/}\n                    {/*    key={\"parts\"}*/}\n                    {/*    selected={history.location.pathname === \"/parts\"}*/}\n                    {/*    onClick={() => changeUrl(\"/parts\")}*/}\n                    {/*>*/}\n                    {/*    <ListItemIcon>*/}\n                    {/*        <Inbox/>*/}\n                    {/*    </ListItemIcon>*/}\n                    {/*    <ListItemText primary={\"Parts\"}/>*/}\n                    {/*</ListItem>*/}\n                    <ListItem\n                        button\n                        key={\"zfs\"}\n                        selected={history.location.pathname === \"/zfs\"}\n                        onClick={() => changeUrl(\"/zfs\")}\n                    >\n                        <ListItemIcon>\n                            <Dns/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"ZFS\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"storage\"}\n                        selected={history.location.pathname === \"/storage\"}\n                        onClick={() => changeUrl(\"/storage\")}\n                    >\n                        <ListItemIcon>\n                            <Archive/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Storage\"}/>\n                    </ListItem>\n                    <ListItem\n                        button\n                        key={\"shareFolder\"}\n                        selected={history.location.pathname === \"/folders\"}\n                        onClick={() => changeUrl(\"/folders\")}\n                    >\n                        <ListItemIcon>\n                            <Folder/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Share Folders\"}/>\n                    </ListItem>\n                </List>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            System\n                        </ListSubheader>\n                    }\n                >\n                    <ListItem\n                        button\n                        key={\"users\"}\n                        selected={history.location.pathname === \"/users\"}\n                        onClick={() => changeUrl(\"/users\")}\n                    >\n                        <ListItemIcon>\n                            <Person/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Users\"}/>\n                    </ListItem>\n                </List>\n                <List\n                    subheader={\n                        <ListSubheader component=\"div\">\n                            My\n                        </ListSubheader>\n                    }\n                >\n                    <ListItem\n                        button\n                        key={\"account\"}\n                        selected={history.location.pathname === \"/my/account\"}\n                        onClick={() => changeUrl(\"/my/account\")}\n                    >\n                        <ListItemIcon>\n                            <Assignment/>\n                        </ListItemIcon>\n                        <ListItemText primary={\"Account\"}/>\n                    </ListItem>\n                </List>\n\n            </div>\n        </Drawer>\n    );\n}\n","/home/aren/Desktop/ypw/src/pages/Users/index.tsx",["479","480"],"import React, {useEffect} from \"react\";\nimport useStyles from \"./style\";\nimport {\n    Avatar,\n    Button, IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText, Menu,\n    MenuItem,\n    Typography\n} from \"@material-ui/core\";\nimport useUsersModel from \"./model\";\nimport {Add, Delete, MoreVert, Person} from \"@material-ui/icons\";\nimport useLayoutModel from \"../../model/layout\";\nimport NewUserDialog from \"../../components/NewUserDialog\";\nimport {useContextMenu} from \"../../hooks/ContextMenu\";\n\nexport interface UsersPagePropsType {\n\n}\nconst UsersPage = ({}: UsersPagePropsType) => {\n    const classes = useStyles()\n    const usersModel = useUsersModel()\n    const layoutModel = useLayoutModel()\n    const userContextMenu = useContextMenu<string>()\n    const onSwitchNewUserDialog = layoutModel.getDialogSwitchHandler(\"newUser\")\n    useEffect(() => {\n        usersModel.initData()\n    }, [])\n    return (\n        <div className={classes.root}>\n            <NewUserDialog\n                open={layoutModel.getDialogOpen(\"newUser\")}\n                onClose={onSwitchNewUserDialog}\n                onOk={(username, password) => {\n                    usersModel.newUser(username,password)\n                    onSwitchNewUserDialog()\n                }}\n            />\n            <Menu\n                open={userContextMenu.isOpen}\n                anchorEl={userContextMenu.anchor}\n                onClose={() => userContextMenu.close()}\n            >\n                <MenuItem onClick={() => {\n                    if (userContextMenu.data) {\n                        usersModel.remove(userContextMenu.data)\n                        userContextMenu.close()\n                    }\n                }}>\n                    <Delete/> Remove user\n                </MenuItem>\n            </Menu>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Users\n            </Typography>\n            <div className={classes.actions}>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<Add />}\n                    onClick={onSwitchNewUserDialog}\n                >\n                    New user\n                </Button>\n            </div>\n            <List>\n                {\n                    usersModel.users.map(it => {\n                        return (\n                            <ListItem key={it}>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Person />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it} />\n                                <ListItemSecondaryAction>\n                                    <IconButton onClick={(e) => userContextMenu.open(it,e.target)}>\n                                        <MoreVert />\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        )\n                    })\n                }\n\n            </List>\n        </div>\n    )\n}\n\nexport default UsersPage;\n","/home/aren/Desktop/ypw/src/pages/Disks/index.tsx",["481","482","483"],"import React, {useEffect} from \"react\";\nimport useDisksModel from \"./model\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography} from \"@material-ui/core\";\nimport {Storage, Store} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface DisksPagePropsType {\n\n}\n\nconst DisksPage = ({}: DisksPagePropsType) => {\n    const classes = useStyles()\n    const model = useDisksModel()\n    useEffect(() => {\n        model.initData()\n    },[])\n    return (\n        <div>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Disks\n            </Typography>\n            <List>\n                {\n                    model.disks.map(it => {\n                        return (\n                            <ListItem key={it.name} button>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Storage />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it.name} secondary={it.model}/>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n        </div>\n    )\n}\n\nexport default DisksPage;\n","/home/aren/Desktop/ypw/src/pages/Storage/index.tsx",["484","485","486","487"],"import React, {useEffect, useState} from \"react\";\nimport ListPage from \"../../components/ListPage\";\nimport useStorageModel from \"./model\";\nimport {\n    Avatar, Dialog,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText\n} from \"@material-ui/core\";\nimport {Archive, Delete} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport ListItemDialog from \"../../components/ListItemDialog\";\nimport {Storage} from \"../../api/storage\";\nimport useLayoutModel from \"../../model/layout\";\nimport layout from \"../../model/layout\";\nimport {useSnackbar} from \"notistack\";\n\nexport interface StoragePagePropsType {\n\n}\n\nconst StoragePage = ({}: StoragePagePropsType) => {\n    const storageModel = useStorageModel()\n    const layoutModel = useLayoutModel()\n    const classes = useStyles()\n    useEffect(() => {\n        storageModel.init()\n    }, [])\n    const { enqueueSnackbar } = useSnackbar();\n    const [contextStorage, setContextStorage] = useState<Storage>()\n    const switchDeleteConfirmDialog = layoutModel.getDialogSwitchHandler('deleteStorageConfirm')\n    const openDeleteDialog = (storage: Storage) => {\n        setContextStorage(storage)\n        switchDeleteConfirmDialog()\n    }\n    return (\n        <div>\n\n            <ListPage\n                title={\"Storages\"}\n                actions={<></>}\n            >\n                <>\n                <ListItemDialog\n                    primary={contextStorage?.id ?? \"unknown\"}\n                    icon={<Archive/>}\n                    onClose={switchDeleteConfirmDialog}\n                    title={\"Delete\"}\n                    onOk={async () => {\n                        if (contextStorage) {\n                            await storageModel.remove(contextStorage?.id)\n                            enqueueSnackbar(`storage ${contextStorage?.id} removed`,{variant:\"success\"})\n                        }\n                        switchDeleteConfirmDialog()\n                    }}\n                    open={layoutModel.getDialogOpen('deleteStorageConfirm')}\n                    secondary={contextStorage?.type ?? \"unknown\"}\n                    text={\"Remove action will remove all SHARE FOLDER in this storage!\"}\n                />\n                    <List className={classes.list}>\n                        {\n                            storageModel.storages.map(storage => {\n                                return (\n                                    <ListItem key={storage.id} button>\n                                        <ListItemAvatar>\n                                            <Avatar className={classes.avatar}>\n                                                <Archive/>\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText primary={storage.id} secondary={storage.type}/>\n                                        <ListItemSecondaryAction>\n                                            <IconButton onClick={() => openDeleteDialog(storage)}>\n                                                <Delete/>\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                )\n                            })\n                        }\n                    </List>\n                </>\n            </ListPage>\n        </div>\n    )\n}\n\nexport default StoragePage;\n","/home/aren/Desktop/ypw/src/pages/Parts/index.tsx",["488","489","490"],"﻿import React, {useEffect} from \"react\";\nimport usePartsPageModel from \"./model\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography} from \"@material-ui/core\";\nimport {Inbox} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface PartsPagePropsType {\n\n}\n\nconst PartsPage = ({}: PartsPagePropsType) => {\n    const model = usePartsPageModel()\n    const classes = useStyles()\n    useEffect(() => {\n        model.initData()\n    },[])\n    return (\n        <div>\n            <Typography variant={\"h4\"} className={classes.title}>\n                Parts\n            </Typography>\n            <List>\n            {\n                model.parts.map(part => {\n                    return (\n                        <ListItem key={part.name} button>\n                            <ListItemAvatar>\n                                <Avatar className={classes.avatar}>\n                                    <Inbox />\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={part.name} secondary={part.fs_type}/>\n                        </ListItem>\n                    )\n                })\n            }\n            </List>\n        </div>\n    )\n}\n\nexport default PartsPage;\n","/home/aren/Desktop/ypw/src/pages/ZFS/index.tsx",["491","492"],"import React, {useEffect, useState} from \"react\";\nimport {\n    Avatar,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Menu,\n    MenuItem\n} from \"@material-ui/core\";\nimport useZFSModel from \"./model\";\nimport {Add, Delete, Dns, MoreVert} from \"@material-ui/icons\";\nimport ListPage from \"../../components/ListPage\";\nimport CreateZFSPoolDialog from \"../../components/CreateZFSPoolDialog\";\nimport useStyles from \"./style\";\nimport useLayoutModel from \"../../model/layout\";\nimport ListItemDialog from \"../../components/ListItemDialog\";\nimport {ZFSPool} from \"../../api/zfs\";\nimport useStorageModel from \"../Storage/model\";\nimport {useSnackbar} from \"notistack\";\n\nexport interface ZFSPagePropsType {\n\n}\n\nconst ZFSPage = ({}: ZFSPagePropsType) => {\n    const zfsModel = useZFSModel()\n    const layoutModel = useLayoutModel()\n    const storageModel = useStorageModel()\n    const classes = useStyles()\n    useEffect(() => {\n        zfsModel.refresh()\n    },[])\n    const [moreMenuEl, setMoreMenuEl] = React.useState(null);\n    const createPoolDialogSwitchHandler = layoutModel.getDialogSwitchHandler(\"newZFSPool\")\n    const [contextPool, setContextPool] = useState<ZFSPool>()\n    const [deleteConfirmDialog, setDeleteConfirmDialog] = useState<{\n        name: string,\n        open: boolean\n    }>({name: \"\", open: false})\n    const {enqueueSnackbar} = useSnackbar();\n\n    const openDeleteConfirm = (name: string) => {\n        setDeleteConfirmDialog({\n            name,\n            open: true\n        })\n    }\n    const closeDeleteConfirm = () => {\n        setDeleteConfirmDialog({\n            ...deleteConfirmDialog,\n            open: false\n        })\n    }\n    const onRemoveHandler = async () => {\n        if (deleteConfirmDialog?.name) {\n            await zfsModel.removePool(deleteConfirmDialog.name)\n            enqueueSnackbar(\"delete success\", {variant: 'success'})\n            closeDeleteConfirm()\n        }\n    }\n    const handleMoreMenuClick = (event: any) => {\n        setMoreMenuEl(event.currentTarget);\n    };\n    const handleMoreMenuClose = () => {\n        setMoreMenuEl(null);\n    };\n    const asStorageSwitchHandler = layoutModel.getDialogSwitchHandler('poolAsStorageDialog')\n    return (\n        <ListPage\n            title={\"Pools\"}\n            actions={\n                <>\n                    <Button\n                        variant={\"contained\"}\n                        color={'secondary'}\n                        startIcon={<Add/>}\n                        onClick={createPoolDialogSwitchHandler}\n                    >New pool</Button>\n                </>\n            }\n        >\n            <>\n                <Menu\n                    anchorEl={moreMenuEl}\n                    keepMounted\n                    open={Boolean(moreMenuEl)}\n                    onClose={handleMoreMenuClose}\n                >\n                    <MenuItem onClick={() => {\n                        asStorageSwitchHandler()\n                        handleMoreMenuClose()\n                    }}>Use as storage</MenuItem>\n\n                </Menu>\n                <ListItemDialog\n                    primary={contextPool?.name ?? \"unknown\"}\n                    icon={<Dns/>}\n                    onClose={asStorageSwitchHandler}\n                    title={\"As storage\"}\n                    onOk={async () => {\n                        await storageModel.addStorage(`/${contextPool?.name}`, \"ZFSPool\")\n                        asStorageSwitchHandler()\n                        enqueueSnackbar(\"storage created\", {\n                            variant: 'success'\n                        })\n                    }}\n                    text={\"Use this pool to create new storage\"}\n                    open={layoutModel.getDialogOpen('poolAsStorageDialog')}\n                />\n                <CreateZFSPoolDialog\n                    open={layoutModel.getDialogOpen(\"newZFSPool\")}\n                    onClose={createPoolDialogSwitchHandler}\n                    onOk={async (form) => {\n                        await zfsModel.createPool({\n                            name: form.name,\n                            disks: form.disks.map(it => `/dev/${it}`)\n                        })\n                        enqueueSnackbar(\"create pool success\", {\n                            variant: 'success'\n                        })\n                        createPoolDialogSwitchHandler()\n                    }}\n                />\n                <Dialog open={Boolean(deleteConfirmDialog.open)} maxWidth={\"xl\"}>\n                    <DialogTitle>\n                        Remove\n                    </DialogTitle>\n                    <DialogContent className={classes.deleteDialogContent}>\n                        <DialogContentText>\n                            ALL DATA in pool will deleted,please confirm!\n                        </DialogContentText>\n                        <ListItem className={classes.deleteDialogItem}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <Dns/>\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={deleteConfirmDialog.name}/>\n                        </ListItem>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color={\"secondary\"} onClick={closeDeleteConfirm}>\n                            Cancel\n                        </Button>\n                        <Button color={\"secondary\"} onClick={onRemoveHandler}>\n                            Delete\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <List className={classes.list}>\n                    {\n                        zfsModel.pools.map(pool => {\n                            return (\n                                <ListItem key={pool.name} button>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <Dns/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText primary={pool.name}/>\n                                    <ListItemSecondaryAction>\n\n                                        <IconButton>\n                                            <Delete onClick={() => openDeleteConfirm(pool.name)}/>\n                                        </IconButton>\n                                        <IconButton onClick={(e) => {\n                                            setContextPool(pool)\n                                            handleMoreMenuClick(e)\n                                        }}>\n                                            <MoreVert/>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })\n                    }\n\n                </List>\n            </>\n        </ListPage>\n    )\n}\n\nexport default ZFSPage;\n","/home/aren/Desktop/ypw/src/pages/Apps/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Apps/model.ts",["493"],"import {createModel} from \"hox\";\nimport {useState} from \"react\";\nimport {App, fetchApps, removeAutoStart, setAutoStart, startApp, stopApp} from \"../../api/apps\";\nimport {useInterval} from \"ahooks\";\n\nconst AppsPageModel = () => {\n    const [appList,setAppList] = useState<App[]>([])\n    const loadApp = async () => {\n        const response = await fetchApps()\n        setAppList(response.apps)\n    }\n    useInterval(() => {\n        loadApp();\n    },1000)\n    const start = async (appId:string) => {\n        await startApp(appId)\n    }\n    const stop = async (appId:string) => {\n        await stopApp(appId)\n    }\n    const addToAutoStart = async (appId:string) => {\n        await setAutoStart(appId)\n    }\n    const removeFromAutoStart = async (appId:string) => {\n        await removeAutoStart(appId)\n    }\n    return {\n        appList,loadApp,start,stop,addToAutoStart,removeAutoStart\n    }\n}\nconst useAppsPageModel = createModel(AppsPageModel)\nexport default useAppsPageModel\n","/home/aren/Desktop/ypw/src/pages/ShareFolder/style.ts",[],"/home/aren/Desktop/ypw/src/pages/ShareFolder/model.ts",["494","495"],"import {getUserList} from \"../../api/users\";\nimport {useEffect, useState} from \"react\";\nimport {createModel} from \"hox\";\nimport {createNewShare, getShareList, ShareFolder} from \"../../api/share\";\n\nconst ShareFoldersModel = () => {\n    const [folders, setFolders] = useState<ShareFolder[]>([])\n    const initData = async () => {\n        const response = await getShareList()\n        setFolders(response.folders)\n    }\n    const createShare = async (data:any) => {\n        await createNewShare(data)\n        await initData()\n    }\n\n    return {\n        folders,createShare,initData\n    }\n}\nconst useShareFoldersModel = createModel(ShareFoldersModel)\nexport default useShareFoldersModel\n","/home/aren/Desktop/ypw/src/pages/Users/model.ts",["496"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {createUser, getUserList} from \"../../api/users\";\n\nconst UsersModel = () => {\n    const [users, setUsers] = useState<string[]>([])\n    const initData = async () => {\n        const response = await getUserList()\n        console.log(response)\n        setUsers(response.users)\n    }\n\n    const newUser = async (username:string,password:string) => {\n        await createUser(username,password)\n        await initData()\n    }\n    return {\n        users,newUser,initData\n    }\n\n}\nconst useUsersModel = createModel(UsersModel)\nexport default useUsersModel\n","/home/aren/Desktop/ypw/src/pages/Users/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Disks/model.ts",["497"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {Disk, fetchDisks} from \"../../api/disks\";\n\nconst DisksModel = () => {\n    const [disks,setDisks] = useState<Disk[]>([])\n    const initData = async () => {\n        const response = await fetchDisks()\n        setDisks(response.disks)\n    }\n\n    return {\n        disks,initData\n    }\n}\nconst useDisksModel = createModel(DisksModel)\nexport default useDisksModel\n","/home/aren/Desktop/ypw/src/pages/Disks/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Storage/model.ts",["498"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {fetchStorageList, Storage, removeStorage, createStorage} from \"../../api/storage\";\n\nconst StorageModel = () => {\n    const [storages, setStorages] = useState<Storage[]>([])\n    const init = async () => {\n        const response = await fetchStorageList()\n        setStorages(response.storages)\n    }\n    const remove = async (id: string) => {\n        await removeStorage(id)\n        await init()\n    }\n    const addStorage = async (source:string,type:string) => {\n        await createStorage({source,type})\n        await init()\n    }\n\n    return {\n        storages, remove, addStorage,init\n    }\n}\nconst useStorageModel = createModel(StorageModel)\nexport default useStorageModel\n","/home/aren/Desktop/ypw/src/pages/Storage/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Parts/model.ts",["499","500"],"import {createModel} from \"hox\";\nimport {fetchDisks, fetchParts, Part} from \"../../api/disks\";\nimport {useEffect, useState} from \"react\";\nconst targetFS = [\"ext4\",\"ntfs\"]\nconst PartsPageModel = () => {\n    const [parts, setParts] = useState<Part[]>([])\n    const initData = async () => {\n        let result: Part[] = await fetchParts()\n        if (!result) {\n            return\n        }\n        result = result.filter(part => {\n            return targetFS.find(it => it === part.fs_type) !== undefined\n        })\n        setParts(result)\n    }\n    return {\n        parts,initData\n    }\n}\nconst usePartsPageModel = createModel(PartsPageModel)\nexport default usePartsPageModel\n","/home/aren/Desktop/ypw/src/pages/ZFS/style.ts",[],"/home/aren/Desktop/ypw/src/pages/ZFS/model.ts",[],"/home/aren/Desktop/ypw/src/pages/Parts/style.ts",[],"/home/aren/Desktop/ypw/src/model/layout.ts",[],"/home/aren/Desktop/ypw/src/api/users.ts",["501"],"import apiRequest from \"../utils/request\";\nimport {ApplicationConfig} from \"../config\";\nimport {BaseResponse} from \"./base\";\nimport {useClickAway} from \"ahooks\";\n\nexport type UserGroupType = \"admin\" | \"normal\"\n\nexport interface UserGroup {\n    name: string\n    type: UserGroupType\n    gid: string\n}\n\nexport interface UserListResponse {\n    users: string[]\n}\n\nexport type UserGroupDetail = UserGroup & {\n    users: {\n        name: string\n        uid: string\n    }[]\n}\nexport const getUserList = async (): Promise<UserListResponse> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.users)\n}\nexport const createUser = async (username: string, password: string): Promise<void> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.users, {\n        data: {\n            username, password\n        }\n    })\n}\n\nexport const removeUser = async (username: string): Promise<void> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.users, {\n        params: {\n            username\n        }\n    })\n}\nexport const fetchGroupList = async (): Promise<{ groups: UserGroup[] }> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.groups)\n}\nexport const createGroup = async (name: string): Promise<UserGroup> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.groups, {data: {name}})\n}\nexport const fetchGroupDetail = async (name: string): Promise<UserGroupDetail> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.group.replace(\":name\", name))\n}\nexport const removeGroup = async (name: string): Promise<UserGroupDetail> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.groups,{params:{name}})\n}\nexport const addUserToUserGroup = async (name: string, users: string[]): Promise<BaseResponse> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.groupUsers.replace(\":name\", name), {data: {users}})\n}\n\nexport const removeUserFromUserGroup = async (name: string, users: string[]): Promise<BaseResponse> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.groupUsers.replace(\":name\", name), {data: {users}})\n}\n","/home/aren/Desktop/ypw/src/api/apps.ts",[],"/home/aren/Desktop/ypw/src/api/share.ts",["502"],"import apiRequest from \"../utils/request\";\nimport {ApplicationConfig} from \"../config\";\nimport {UserListResponse} from \"./users\";\nexport interface  ShareFolder {\n    id:number\n    name:string\n    storage:{\n        id:string\n    },\n    validateUsers:{\n        uid:string\n        name:string\n    }[],\n    writeableUsers:{\n        uid:string\n        name:string\n    }[],\n    public:string,\n    readonly:string\n    writable:string\n}\nexport interface FetchShareFoldersResponse {\n    folders:ShareFolder[]\n}\nexport const getShareList = async ():Promise<FetchShareFoldersResponse> => {\n    return await apiRequest.get(ApplicationConfig.apiPaths.share)\n}\n\nexport const createNewShare = async (data:any):Promise<void> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.share,{\n        data\n    })\n}\n\nexport const removeShare = async (id : number):Promise<void> => {\n    return await apiRequest.delete(ApplicationConfig.apiPaths.share,{\n        params:{\n            id\n        }\n    })\n}\nexport interface ShareUpdateOption {\n    validUsers?:string[]\n    writeList?:string[]\n    public?:string\n    readonly?:string\n    writable?:string\n}\nexport const updateShare = async (name:string,option:ShareUpdateOption):Promise<void> => {\n    return await apiRequest.post(ApplicationConfig.apiPaths.shareUpdate,{\n        data:{\n            name,\n            ...option\n        }\n    })\n}\n","/home/aren/Desktop/ypw/src/api/disks.ts",[],"/home/aren/Desktop/ypw/src/api/storage.ts",[],"/home/aren/Desktop/ypw/src/api/zfs.ts",[],"/home/aren/Desktop/ypw/src/components/AppCard/index.tsx",["503","504","505","506"],"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {\n    Avatar,\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    IconButton,\n    Menu,\n    MenuItem,\n    Typography\n} from \"@material-ui/core\";\nimport {Apps, MoreVert} from \"@material-ui/icons\";\nimport {App} from \"../../api/apps\";\nimport {getAppIconUrl} from \"../../utils/app\";\nimport useStyles from \"./style\";\n\n\n\ninterface AppCardPropsType {\n    app: App\n    onStart?: () => void\n    onStop?: () => void\n    enableAutoStart?: () => void\n    disableAutoStart?: () => void\n}\n\n\nexport default function AppCard({app, onStart, onStop, enableAutoStart, disableAutoStart}: AppCardPropsType) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    const renderMenu = () => {\n        return (\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {\n                    app.auto_start ?\n                        <MenuItem\n                            onClick={() => {\n                                if (disableAutoStart){\n                                    disableAutoStart()\n                                }\n                                handleClose()\n                            }}\n                        >\n                            Disable autostart\n                        </MenuItem>\n                        :\n                        <MenuItem\n                            onClick={\n                                () => {\n                                    if (enableAutoStart) {\n                                        enableAutoStart()\n                                    }\n                                    handleClose()\n                                }\n                            }\n                        >\n                            Enable autostart\n                        </MenuItem>\n                }\n            </Menu>\n        )\n    }\n    return (\n        <Card className={classes.main}>\n            {renderMenu()}\n            <CardContent>\n                <div className={classes.header}>\n                    <Avatar className={classes.icon}>\n                        <img src={getAppIconUrl(app.id)} className={classes.appicon}  />\n                    </Avatar>\n                    <div className={classes.title}>\n                        {app.name}\n                    </div>\n                    <IconButton onClick={handleClick}>\n                        <MoreVert/>\n                    </IconButton>\n                </div>\n\n                <div className={classes.status}>\n                    {app.status}\n                </div>\n            </CardContent>\n            <CardActions>\n                {\n                    app.status === \"Stop\" &&\n                    <Button size=\"small\" onClick={onStart}>Start</Button>\n                }\n                {\n                    app.status === \"Running\" &&\n                    <Button size=\"small\" onClick={onStop}>Stop</Button>\n                }\n            </CardActions>\n        </Card>\n    );\n}\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/index.tsx",["507","508"],"import React, {useState} from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogProps,\n    DialogTitle,\n    Step,\n    StepLabel,\n    Stepper\n} from \"@material-ui/core\";\nimport useStyles from \"./style\";\nimport ShareInfoStep, {InfoForm} from \"./step/info\";\nimport StorageStep from \"./step/storage\";\nimport {Part} from \"../../api/disks\";\nimport UsersStep, {UsersForm} from \"./step/users\";\nimport CompleteStep from \"./step/complete\";\nimport {useForm} from \"./hook\";\nimport {Storage} from \"../../api/storage\";\n\nexport interface NewShareDialogPropsType {\n    onCreateShare:(data:any) => void\n}\nconst steps = [\n    \"info\",\"storage\",\"users\",\"complete\"\n]\nconst NewShareDialog = ({onCreateShare ,...other}: NewShareDialogPropsType & DialogProps) => {\n    const [index, setIndex] = useState<number>(0)\n    const [selectStorage,setSelectStorage] = useState<Storage | undefined>()\n    const usersFormController = useForm<UsersForm>({\n        useValidateUsers:false,\n        useWriteUsers:false,\n        folderPublic:true\n    })\n    const infoForm = useForm<InfoForm>({})\n    const classes = useStyles()\n    const renderStepContent = () => {\n        switch (index) {\n            case 0:\n                return <ShareInfoStep controller={infoForm}/>\n            case 1:\n                return <StorageStep selectedStorage={selectStorage} onSelect={(part) => setSelectStorage(part)} />\n            case 2:\n                return <UsersStep controller={usersFormController}/>\n            case 3:\n                return <CompleteStep\n                    name={infoForm.form.name}\n                    access={usersFormController.form.folderPublic ? \"Allow guest\" : \"Not allow guest\"}\n                    storage={selectStorage?.id}\n                    validateUsers={\n                        usersFormController.form.useValidateUsers && usersFormController.form.validateUsers ?\n                        usersFormController.form.validateUsers?.join(\",\") : \"disable\"\n                    }\n                    writeUsers={\n                        usersFormController.form.useWriteUsers && usersFormController.form.writeUsers ?\n                        usersFormController.form.writeUsers?.join(\",\") : 'disable'\n                    }\n                />\n            default:\n                return (<></>)\n        }\n    }\n    const validate = () => {\n        if (\n            infoForm.form.name === undefined ||\n            selectStorage == undefined\n        ){\n            return false\n        }\n        return true\n    }\n    const onCreate = () => {\n        if (!validate()){\n            return\n        }\n        const data = {\n            name:infoForm.form.name,\n            public:usersFormController.form.folderPublic,\n            valid_users:usersFormController.form.validateUsers,\n            write_list:usersFormController.form.writeUsers,\n            storageId:selectStorage?.id\n        }\n        onCreateShare(data)\n\n    }\n    return (\n        <Dialog {...other}>\n            <DialogTitle>\n                New Share\n                <Stepper activeStep={index} className={classes.stepper}>\n                    {\n                        steps.map((label,index) => {\n                            return (\n                                <Step key={index}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            )\n                        })\n                    }\n                </Stepper>\n            </DialogTitle>\n            <DialogContent className={classes.content}>\n\n                <div className={classes.stepContent}>\n                    {renderStepContent()}\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={index < 1}\n                    onClick={() => setIndex(index - 1)}\n                >Previous</Button>\n                {\n                    index === steps.length - 1 && <Button onClick={() => onCreate()}>Create</Button>\n                }\n                {\n                    index !== steps.length - 1 && <Button\n                        onClick={() => setIndex(index + 1)}\n                    >\n                        Next\n                    </Button>\n                }\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default NewShareDialog;\n","/home/aren/Desktop/ypw/src/components/ListPage/index.tsx",[],"/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/NewUserDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/ListItemDialog/index.tsx",["509"],"import React, {ReactElement} from \"react\";\nimport {\n    Avatar, Button, Dialog, DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    ListItem,\n    ListItemAvatar,\n    ListItemText\n} from \"@material-ui/core\";\nimport {Dns} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface ListItemDialogPropsType {\n    open?: boolean\n    primary: string\n    secondary?: string\n    icon: ReactElement,\n    onClose: () => void\n    title: string\n    onOk: () => void\n    okText?: string,\n    text?:string\n}\n\nconst ListItemDialog = ({\n                            primary,\n                            icon,\n                            secondary,\n                            onOk,\n                            onClose,\n                            title,\n    text,\n                            okText = \"OK\",\n                            open = false\n                        }: ListItemDialogPropsType) => {\n    const classes = useStyles()\n    return (\n        <Dialog open={open} maxWidth={\"xl\"} onClose={onClose}>\n            <DialogTitle>\n                {title}\n            </DialogTitle>\n            <DialogContent className={classes.deleteDialogContent}>\n                <DialogContentText>\n                    {text}\n                </DialogContentText>\n                <ListItem className={classes.deleteDialogItem}>\n                    <ListItemAvatar>\n                        <Avatar>\n                            {icon}\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={primary} secondary={secondary}/>\n                </ListItem>\n            </DialogContent>\n            <DialogActions>\n                <Button color={\"secondary\"} onClick={onClose}>\n                    Cancel\n                </Button>\n                <Button color={\"secondary\"} onClick={onOk}>\n                    {okText}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default ListItemDialog;\n","/home/aren/Desktop/ypw/src/config.ts",[],"/home/aren/Desktop/ypw/src/utils/request.ts",["510"],"import { extend } from 'umi-request'\nimport { ApplicationConfig } from '../config'\n\nconst apiRequest = extend({\n  timeout: 2000,\n  credentials: 'omit'\n})\napiRequest.interceptors.request.use((url,options) => {\n  const token = localStorage.getItem(\"token\")\n  const apiUrl = localStorage.getItem(\"apiUrl\")\n  console.log(url)\n  console.log(apiUrl)\n  if (apiUrl) {\n    url  = apiUrl + url\n  }\n  console.log(url)\n  // console.log(url)\n  if (token) {\n    options.headers = {\n      ...options.headers,\n      \"Authorization\" :`Bearer ${token}`\n    }\n  }\n  return {\n    url,options\n  }\n})\nexport default apiRequest\n","/home/aren/Desktop/ypw/src/components/ListItemDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewUserDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/hook.ts",["511"],"import {useState} from \"react\";\nimport {UsersForm } from \"./step/users\";\n\nexport interface FormController<T> {\n    form: T\n    updateValue: (values: any) => void\n}\n\nexport const useForm = <T>(init:T): FormController<T> => {\n    const [form, setForm] = useState<T>(init)\n\n    const updateValue = (values: any) => {\n        console.log(values)\n        setForm({\n            ...form,\n            ...values\n        })\n    }\n    return {\n        form, updateValue\n    }\n}\n","/home/aren/Desktop/ypw/src/components/CreateZFSPoolDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/ListPage/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/style.ts",[],"/home/aren/Desktop/ypw/src/components/DiskSelectField/index.tsx",["512","513"],"import React, {useEffect, useState} from \"react\";\nimport {useDynamicList} from \"ahooks\";\nimport {Chip, IconButton, MenuItem, Select, Typography} from \"@material-ui/core\";\nimport {Add, Storage} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport {Disk} from \"../../api/disks\";\nimport filesize from \"filesize\";\n\nexport interface DiskSelectFieldPropsType {\n    disks?:Disk[]\n    onChange?: (disks : Disk[]) => void\n    initValue?:Disk[]\n}\n\nconst DiskSelectField = ({onChange,disks = [],initValue = []}: DiskSelectFieldPropsType) => {\n    const disksController = useDynamicList<Disk>(initValue);\n\n    const getSelectOption = ():Disk[] => {\n        return disks.filter(it => disksController.list.find(selected => selected.name === it.name) === undefined)\n    }\n    const classes = useStyles()\n    const [diskSelect,setDiskSelect] = useState<string | undefined>(getSelectOption().length > 0?getSelectOption()[0].name:undefined)\n    useEffect(() => {\n        if (onChange) {\n            onChange(disksController.list)\n        }\n    },[disksController.list])\n\n    return (\n        <div>\n            <div>\n                {\n                    disksController.list.map(it => {\n                        return (\n                            <Chip\n                                label={`${it.model} | ${it.name} | ${filesize(Number(it.size))}`}\n                                key={it.name}\n                                className={classes.chip}\n                                color={'primary'}\n                                icon={<Storage />}\n                                onDelete={() => {\n                                    const index = disksController.list.indexOf(it)\n                                    if (index !== -1) {\n                                        disksController.remove(index)\n                                    }\n                                }}\n                            />\n                        )\n                    })\n                }\n            </div>\n            <div className={classes.addAction}>\n\n                <Select\n                    variant={\"outlined\"}\n                    value={diskSelect}\n                    size={\"small\"}\n                    onChange={(e) => setDiskSelect(e.target.value)}\n                    displayEmpty={true}\n                >\n                    {\n                        getSelectOption().map(disk => {\n                            return (\n                                <MenuItem value={disk.name}>{`${disk.model} | ${disk.name} | ${filesize(Number(disk.size))}`}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n                <IconButton\n                    className={classes.addButton}\n                    size={\"small\"}\n                    onClick={() => {\n                        if (diskSelect && disksController.list.find(it => it.name ===  diskSelect) === undefined){\n                            const target = disks.find(it => it.name ===  diskSelect)\n                            if (target) {\n                                disksController.push(target)\n                            }\n                        }\n                    }}\n                >\n                    <Add />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default DiskSelectField;\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/index.tsx",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/index.tsx",["514","515"],"import React, {useEffect, useState} from \"react\";\nimport useStyles from \"./style\";\nimport {Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport useUsersModel from \"../../../../pages/Users/model\";\nimport UserSelectField from \"../../../UserSelectField\";\nimport clsx from \"clsx\";\nimport {FormController} from \"../../hook\";\n\nexport interface UsersForm {\n    folderPublic: boolean\n    validateUsers?: string[]\n    writeUsers?: string[]\n    useValidateUsers: boolean\n    useWriteUsers: boolean\n}\n\nexport interface UsersStepPropsType {\n    controller: FormController<UsersForm>\n}\n\nconst UsersStep = ({controller}: UsersStepPropsType) => {\n    const classes = useStyles()\n    const userModel = useUsersModel()\n    return (\n        <div>\n            <div className={classes.field}>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            name=\"checkedB\"\n                            color=\"primary\"\n                            size={\"small\"}\n                            checked={controller.form.folderPublic}\n                            onChange={(e) => controller.updateValue({folderPublic: e.target.checked})}\n                        />\n                    }\n                    label=\"Allow guest\"\n                />\n            </div>\n            <div className={clsx(classes.field, classes.fieldArea)}>\n                <div className={classes.label}>\n                    <Checkbox\n                        size={\"small\"}\n                        checked={controller.form.useValidateUsers}\n                        onChange={(e) => controller.updateValue({useValidateUsers: e.target.checked})}\n                    />\n                    validate users\n                </div>\n                <UserSelectField\n                    users={userModel.users}\n                    onChange={(users) => controller.updateValue({validateUsers: users})}\n                    initValue={controller.form.validateUsers}\n                />\n            </div>\n            <div className={clsx(classes.field, classes.fieldArea)}>\n                <div className={classes.label}>\n                    <Checkbox\n                        size={\"small\"}\n                        checked={controller.form.useWriteUsers}\n                        onChange={(e) => controller.updateValue({useWriteUsers: e.target.checked})}\n                    />\n                    write user\n                </div>\n                <UserSelectField\n                    users={userModel.users}\n                    onChange={(users) => controller.updateValue({writeUsers: users})}\n                    initValue={controller.form.writeUsers}\n                />\n            </div>\n\n        </div>\n    )\n}\n\nexport default UsersStep;\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/index.tsx",["516","517","518","519"],"import React, {useEffect, useState} from \"react\";\nimport {fetchParts, Part} from \"../../../../api/disks\";\nimport {Avatar, List, ListItem, ListItemAvatar, ListItemText} from \"@material-ui/core\";\nimport {Inbox} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\nimport usePartsPageModel from \"../../../../pages/Parts/model\";\nimport useStorageModel from \"../../../../pages/Storage/model\";\nimport {Storage} from \"../../../../api/storage\";\n\nexport interface StorageStepPropsType {\n    selectedStorage?:Storage\n    onSelect:(storage:Storage) => void\n}\nconst StorageStep = ({onSelect,selectedStorage}: StorageStepPropsType) => {\n    const classes = useStyles()\n    const partsModel = usePartsPageModel()\n    const storageModel = useStorageModel()\n    useEffect(() => {\n\n    },[])\n    return (\n        <div className={classes.root}>\n\n            <List>\n                {\n                    storageModel.storages.map(storage => {\n                        return (\n                            <ListItem\n                                key={storage.id}\n                                button\n                                selected={selectedStorage?.id === storage.id}\n                                onClick={() => onSelect(storage)}\n                            >\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        <Inbox />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={storage.id} secondary={storage.type}/>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n        </div>\n    )\n}\n\nexport default StorageStep;\n","/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/index.tsx",[],"/home/aren/Desktop/ypw/src/components/DiskSelectField/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/info/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/storage/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/users/style.ts",[],"/home/aren/Desktop/ypw/src/components/NewShareDialog/step/complete/style.ts",[],"/home/aren/Desktop/ypw/src/components/UserSelectField/index.tsx",["520"],"import React, {useEffect, useState} from \"react\";\nimport {useDynamicList} from \"ahooks\";\nimport {Chip, IconButton, MenuItem, Select} from \"@material-ui/core\";\nimport {Add, Person} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface UserSelectFieldPropsType {\n    users?:string[]\n    onChange?: (users : string[]) => void\n    initValue?:string[]\n}\n\nconst UserSelectField = ({onChange,users = [],initValue = []}: UserSelectFieldPropsType) => {\n    const classes = useStyles()\n    const usersController = useDynamicList<string>(initValue);\n    const [userSelect,setUserSelect] = useState<string | undefined>()\n    useEffect(() => {\n        if (onChange) {\n            onChange(usersController.list)\n        }\n    },[usersController.list])\n    return (\n        <div>\n            <div>\n                {\n                    usersController.list.map(it => {\n                        return (\n                            <Chip\n                                label={it}\n                                key={it}\n                                className={classes.chip}\n                                color={'primary'}\n                                size=\"small\"\n                                icon={<Person />}\n                                onDelete={() => {\n                                    const index = usersController.list.indexOf(it)\n                                    if (index !== -1) {\n                                        usersController.remove(index)\n                                    }\n                                }}\n                            />\n                        )\n                    })\n                }\n            </div>\n            <div className={classes.addAction}>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    variant={\"outlined\"}\n                    size={\"small\"}\n                    fullWidth\n                    value={userSelect}\n                    onChange={(e) => setUserSelect(e.target.value)}\n                >\n                    {\n                        users.filter(it => usersController.list.find(selected => selected === it) === undefined).map(user => {\n                            return (\n                                <MenuItem value={user}>{user}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n                <IconButton\n                    className={classes.addButton}\n                    size={\"small\"}\n                    onClick={() => {\n                        if (userSelect && usersController.list.find(it => it ===  userSelect) === undefined){\n                            usersController.push(userSelect)\n                            setUserSelect(undefined)\n                        }\n                    }}\n                >\n                    <Add />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default UserSelectField;\n","/home/aren/Desktop/ypw/src/components/ValueField/index.tsx",[],"/home/aren/Desktop/ypw/src/components/ValueField/style.ts",[],["521","522"],"/home/aren/Desktop/ypw/src/components/UserSelectField/style.ts",[],"/home/aren/Desktop/ypw/src/layout/Blank/index.tsx",["523"],"import {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport ZFSPage from \"../../pages/ZFS\";\nimport StoragePage from \"../../pages/Storage\";\nimport PartsPage from \"../../pages/Parts\";\nimport DisksPage from \"../../pages/Disks\";\nimport UsersPage from \"../../pages/Users\";\nimport ShareFolder from \"../../pages/ShareFolder\";\nimport AppsPage from \"../../pages/Apps\";\nimport * as React from \"react\";\nimport BaseLayout from \"../Base\";\nimport LoginPage from \"../../pages/Login\";\nimport AccountPage from \"../../pages/Account\";\nimport DashboardPage from \"../../pages/DashBoard\";\nimport ShareFolderDetail from \"../../pages/ShareFolderDetail\";\nimport useLayoutModel from \"../../model/layout\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport GroupsPage from \"../../pages/Groups\";\nimport GroupDetailPage from \"../../pages/GroupDetail\";\n\nexport interface BlankLayoutPropsType {\n\n}\n\nconst BlankLayout = ({}: BlankLayoutPropsType) => {\n    const layoutModel = useLayoutModel()\n    return (\n        <div>\n            <Dialog open={layoutModel.confirmDialogController.open} onClose={layoutModel.confirmDialogController.onClose}>\n                <DialogTitle>\n                    { layoutModel.confirmDialogController.title }\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        { layoutModel.confirmDialogController.message }\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    {\n                        layoutModel.confirmDialogController.onOk &&\n                            <Button onClick={() => {\n                                if (layoutModel.confirmDialogController.onOk) {\n                                    layoutModel.confirmDialogController.onOk()\n                                }\n                                layoutModel.confirmDialogController.onClose()\n                            }}>\n                                OK\n                            </Button>\n                    }\n                    {\n                        <Button onClick={layoutModel.confirmDialogController.onClose}>\n                           Cancel\n                        </Button>\n                    }\n                </DialogActions>\n            </Dialog>\n            <Router>\n                <Switch>\n                    <Route path=\"/login\">\n                        <LoginPage/>\n                    </Route>\n\n                    <Route path=\"/zfs\">\n                        <BaseLayout>\n                            <ZFSPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/storage\">\n                        <BaseLayout>\n                            <StoragePage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/parts\">\n                        <BaseLayout>\n                            <PartsPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/disks\">\n                        <BaseLayout>\n                            <DisksPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/users\">\n                        <BaseLayout>\n                            <UsersPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/folders\">\n                        <BaseLayout>\n                            <ShareFolder/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/folder/:name/info\">\n                        <BaseLayout>\n                            <ShareFolderDetail/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/my/account\">\n                        <BaseLayout>\n                            <AccountPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/apps\">\n                        <BaseLayout>\n                            <AppsPage/>\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/groups\">\n                        <BaseLayout>\n                            <GroupsPage />\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/group/:name/info\">\n                        <BaseLayout>\n                            <GroupDetailPage />\n                        </BaseLayout>\n                    </Route>\n                    <Route path=\"/\">\n                        <BaseLayout>\n                            <DashboardPage/>\n                        </BaseLayout>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n\nexport default BlankLayout;\n","/home/aren/Desktop/ypw/src/layout/Auth/index.tsx",[],"/home/aren/Desktop/ypw/src/pages/Login/index.tsx",["524","525"],"import useStyles from \"./style\";\nimport {Button, Paper, TextField} from \"@material-ui/core\";\nimport useUserModel from \"../../model/user\";\nimport {useState} from \"react\";\nimport {useSnackbar} from \"notistack\";\nimport {useHistory} from \"react-router-dom\";\nimport {useLocalStorageState} from \"ahooks\";\n\nexport interface LoginPagePropsType {\n\n}\n\nconst LoginPage = ({}: LoginPagePropsType) => {\n    const history = useHistory()\n    const {enqueueSnackbar} = useSnackbar();\n    const [username, setUsername] = useState<string | undefined>()\n    const [password, setPassword] = useState<string | undefined>()\n    const [serviceUrl,setServiceUrl] = useState<string | undefined>(\"http://localhost:8999\")\n    const classes = useStyles()\n    const model = useUserModel()\n    const onLoginClick = async () => {\n        if (username && password && serviceUrl) {\n            localStorage.setItem(\"apiUrl\",serviceUrl)\n            const result = await model.login(username, password)\n            if (result.success) {\n                enqueueSnackbar(\"Login success\", {variant: 'success'})\n                history.replace(\"/\")\n            } else {\n                enqueueSnackbar(`Login failed:${result.message}`, {variant: 'error'})\n            }\n        }\n    }\n    return (\n        <div className={classes.root}>\n\n            <Paper className={classes.loginContainer}>\n                <div className={classes.loginHeader}>\n                    <div className={classes.title}>\n                        YouPlus\n                    </div>\n                    <div className={classes.sub}>\n                        ProjectXPolaris\n                    </div>\n                </div>\n                <div className={classes.loginForm}>\n                    <TextField\n                        label={\"ServiceUrl\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        value={serviceUrl}\n                        className={classes.input}\n                        onChange={(e) => setServiceUrl(e.target.value)}\n                    />\n                    <TextField\n                        label={\"Username\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        value={username}\n                        className={classes.input}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <TextField\n                        label={\"Password\"}\n                        fullWidth\n                        variant={\"outlined\"}\n                        className={classes.input}\n                        type={\"password\"}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <Button variant={'contained'} fullWidth className={classes.loginBtn} onClick={onLoginClick}>Login\n                        in </Button>\n                </div>\n            </Paper>\n        </div>\n    )\n}\n\nexport default LoginPage;\n","/home/aren/Desktop/ypw/src/pages/Login/style.ts",[],"/home/aren/Desktop/ypw/src/api/auth.ts",[],"/home/aren/Desktop/ypw/src/theme.ts",["526","527"],"import {createMuiTheme} from '@material-ui/core/styles';\nimport {blue, green, indigo, yellow} from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: green[700],\n        },\n        secondary: {\n            main: yellow[800],\n        },\n\n    },\n});\nexport default theme","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/index.tsx",["528","529","530","531"],"import Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport * as React from \"react\";\nimport useStyles from \"./style\";\nimport {Avatar, ButtonBase, Menu, MenuItem} from \"@material-ui/core\";\nimport {Person} from \"@material-ui/icons\";\nimport useUserModel from \"../../../../model/user\";\nimport {useHistory} from \"react-router-dom\";\n\nexport interface AppToolbarPropsType {\n\n}\n\nconst AppToolbar = ({}: AppToolbarPropsType) => {\n    const classes = useStyles()\n    const [userMenuEl, setUserMenuEl] = React.useState(null);\n    const userModel = useUserModel()\n    const history = useHistory()\n    const handleUserMenuClick = (event:any) => {\n        setUserMenuEl(event.currentTarget);\n    };\n\n    const handleUserMenuClose = () => {\n        setUserMenuEl(null);\n    };\n    const getUsername = () => {\n        const username = localStorage.getItem(\"username\")\n        if (username) {\n            return username\n        }\n        return \"Unknown\"\n    }\n    return (\n        <Toolbar>\n            <Menu\n                anchorEl={userMenuEl}\n                keepMounted\n                open={Boolean(userMenuEl)}\n                onClose={handleUserMenuClose}\n            >\n                <MenuItem onClick={() => {\n                    handleUserMenuClose()\n                    userModel.logout()\n                    history.replace(\"/login\")\n                }}>Logout</MenuItem>\n            </Menu>\n            <Typography variant=\"h6\" noWrap component=\"div\" className={classes.title}>\n                YouPlus\n            </Typography>\n            <Avatar className={classes.avatar} onClick={handleUserMenuClick}>\n                { getUsername()[0] }\n            </Avatar>\n        </Toolbar>\n    )\n}\n\nexport default AppToolbar;\n","/home/aren/Desktop/ypw/src/layout/Base/parts/Tool/style.ts",[],"/home/aren/Desktop/ypw/src/model/user.ts",["532"],"import {createModel} from \"hox\";\nimport {fetchAuthToken} from \"../api/auth\";\nimport {ResponseError} from 'umi-request'\nimport {useLocalStorageState} from \"ahooks\";\n\nconst UserModel = () => {\n    const login = async (username: string, password: string) => {\n        try {\n            const response = await fetchAuthToken(username, password)\n            if (response.success) {\n                localStorage.setItem(\"token\", response.token)\n                localStorage.setItem(\"username\", username)\n                return {success: true}\n            }\n            return {success: false, message: response.reason}\n        }catch (e) {\n            const responseError : ResponseError = e\n            return {success: false, message: responseError.data.reason}\n        }\n    }\n    const logout = () => {\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"username\")\n    }\n    return {\n        login,logout\n    }\n}\nconst useUserModel = createModel(UserModel)\nexport default useUserModel\n","/home/aren/Desktop/ypw/src/utils/app.ts",[],"/home/aren/Desktop/ypw/src/components/AppCard/style.ts",[],"/home/aren/Desktop/ypw/src/hooks/ContextMenu.ts",[],"/home/aren/Desktop/ypw/src/pages/Account/index.tsx",["533"],"import {ReactElement} from \"react\";\nimport useStyles from \"./style\";\nimport {Button, Grid, Typography} from \"@material-ui/core\";\nimport InfoCard from \"../../components/InfoCard\";\nimport useLayoutModel from \"../../model/layout\";\nimport ChangePasswordDialog from \"../../components/ChangePasswordDialog\";\nimport {changePassword} from \"../../api/account\";\nimport {useSnackbar} from \"notistack\";\n\nexport interface AccountPagePropsType {\n\n}\n\nconst AccountPage = ({}: AccountPagePropsType): ReactElement => {\n    const classes = useStyles()\n    const layoutModel = useLayoutModel()\n    const {enqueueSnackbar} = useSnackbar()\n    return (\n        <div className={classes.root}>\n            <ChangePasswordDialog\n                open={layoutModel.getDialogOpen(\"changePassword\")}\n                onCancel={() => layoutModel.switchDialog(\"changePassword\")}\n                onOk={async (password) => {\n                    await changePassword(password)\n                    enqueueSnackbar(\"password changed\", {variant: 'success'})\n                    layoutModel.switchDialog(\"changePassword\")\n                }}\n            />\n            <Typography variant={\"h5\"}>\n                {localStorage.getItem(\"user\")}\n            </Typography>\n            <Grid container spacing={4} className={classes.content}>\n                <Grid item>\n                    <InfoCard\n                        className={classes.card}\n                        label={\"Password\"}\n                        value={\"******\"}\n                        bottom={\n                            <>\n                                <Button onClick={() => layoutModel.switchDialog(\"changePassword\")}>\n                                    Change\n                                </Button>\n                            </>\n                        }\n                    />\n                </Grid>\n            </Grid>\n\n        </div>\n    )\n}\n\nexport default AccountPage\n","/home/aren/Desktop/ypw/src/pages/Account/style.ts",[],"/home/aren/Desktop/ypw/src/components/InfoCard/index.tsx",[],"/home/aren/Desktop/ypw/src/components/InfoCard/style.ts",[],"/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/ChangePasswordDialog/style.ts",[],"/home/aren/Desktop/ypw/src/api/account.ts",[],"/home/aren/Desktop/ypw/src/pages/DashBoard/index.tsx",["534"],"import {ReactElement} from \"react\";\nimport useStyles from \"./style\";\nimport InfoCard from \"../../components/InfoCard\";\nimport {Grid} from \"@material-ui/core\";\nimport useDashboardModel from \"./model\";\n\nexport interface DashboardPagePropsType {\n\n}\n\nconst DashboardPage = ({}: DashboardPagePropsType): ReactElement => {\n    const classes = useStyles()\n    const model = useDashboardModel()\n    return (\n        <div className={classes.root}>\n            {\n                model.systemInfo &&\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <InfoCard label={\"Hostname\"} value={model.systemInfo.node.hostname} valueSize={20} />\n                    </Grid>\n                    <Grid item>\n                        <InfoCard label={\"OS\"} value={model.systemInfo.os.name} valueSize={20} />\n                    </Grid>\n                    <Grid item>\n                        <InfoCard label={\"Board\"} value={model.systemInfo.board.vendor} valueSize={20}/>\n                    </Grid>\n                    <Grid item>\n                        <InfoCard label={\"CPU\"} value={model.systemInfo.cpu.model} valueSize={20}/>\n                    </Grid>\n                    <Grid item>\n                        <InfoCard label={\"Memory\"} value={`${model.systemInfo.memory.size}MB`} valueSize={20}/>\n                    </Grid>\n                </Grid>\n            }\n\n        </div>\n    )\n}\n\nexport default DashboardPage\n","/home/aren/Desktop/ypw/src/pages/DashBoard/style.ts",[],"/home/aren/Desktop/ypw/src/pages/DashBoard/model.ts",[],"/home/aren/Desktop/ypw/src/api/style.ts",[],"/home/aren/Desktop/ypw/src/pages/ShareFolderDetail/index.tsx",["535","536","537","538"],"import React, {ReactElement, useEffect, useState} from \"react\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport useShareFolderDetailModel from \"./model\";\nimport useStyles from \"./style\";\nimport InfoCard from \"../../components/InfoCard\";\nimport {Button, Grid} from \"@material-ui/core\";\nimport UserListCard from \"../../components/UserListCard\";\nimport UserSelectDialog from \"../../components/UserSelectDialog\";\nimport SwitchSelectDialog from \"../../components/SwitchSelectDialog\";\nimport {getSwitchText} from \"../../utils/values\";\nimport {Delete} from \"@material-ui/icons\";\nimport useLayoutModel from \"../../model/layout\";\n\nexport interface ShareFolderDetailPropsType {\n\n}\n\ntype UserPickModeType = \"valid user\" | \"write list\"\ntype SwitchSelectTargetType = \"public\" | 'readonly'  | \"writable\"\nconst ShareFolderDetail = ({}: ShareFolderDetailPropsType): ReactElement => {\n    const {name}: any = useParams();\n    const classes = useStyles()\n    const model = useShareFolderDetailModel()\n    const layoutModel = useLayoutModel()\n    const history = useHistory()\n    useEffect(() => {\n        model.initData(name)\n    }, [])\n    const [pickUpUserMode, setPickUpUserMode] = useState<UserPickModeType | undefined>()\n    const [pickUserExcept, setPickUserExcept] = useState<string[]>([])\n    const [switchSelectTarget, setSwitchSelectTarget] = useState<SwitchSelectTargetType | undefined>()\n    const onOk = async (user: string) => {\n        if (!model.folder) {\n            return\n        }\n        if (pickUpUserMode == \"valid user\") {\n            model.update({\n                validUsers: [...(model.folder?.validateUsers ?? []).map(it => it.name), user]\n            })\n        } else if (pickUpUserMode == 'write list') {\n            model.update({\n                writeList: [...(model.folder?.writeableUsers ?? []).map(it => it.name), user]\n            })\n        }\n        setPickUpUserMode(undefined)\n    }\n    const onSwitchSelect = (value: boolean | undefined) => {\n        switch (switchSelectTarget) {\n            case \"public\":\n                model.update({\n                    public: getSwitchText(value)\n                })\n                break;\n            case 'readonly':\n                model.update({\n                    readonly: getSwitchText(value)\n                })\n                break;\n            case 'writable':\n                model.update({\n                    writable: getSwitchText(value)\n                })\n        }\n        setSwitchSelectTarget(undefined)\n\n    }\n    return (\n        <div className={classes.root}>\n            <UserSelectDialog\n                onCancel={() => setPickUpUserMode(undefined)}\n                onOk={onOk}\n                open={Boolean(pickUpUserMode)}\n                except={pickUserExcept}\n            />\n            <SwitchSelectDialog\n                onOk={onSwitchSelect}\n                onClose={() => setSwitchSelectTarget(undefined)}\n                open={Boolean(switchSelectTarget)}\n            />\n            <div className={classes.header}>\n                <div className={classes.title}>\n                    {model.folder?.name}\n                </div>\n                <Button\n                    variant={'contained'}\n                    size={\"small\"}\n                    startIcon={<Delete />}\n                    onClick={() => {\n                        layoutModel.showConfirmDialog({\n                            title: 'Remove Confirm',\n                            message: 'Remove folder will lost ALL DATA in folder',\n                            onOk:async () => {\n                                await model.remove()\n                                history.goBack()\n                            }\n                        })\n                    }}\n                >\n                    Remove folder\n                </Button>\n            </div>\n\n            <Grid container spacing={4} className={classes.grid}>\n                <Grid xs={2} item>\n                    <InfoCard label={\"folder name\"} value={model.folder?.name} valueSize={18}\n                              className={classes.infoCard}/>\n                </Grid>\n                <Grid xs={2} item>\n                    <InfoCard label={\"storage\"} value={model.folder?.storage.id} valueSize={18}\n                              className={classes.infoCard}/>\n                </Grid>\n                <Grid xs={2} item>\n                    <InfoCard\n                        label={\"public\"}\n                        value={model.folder?.public}\n                        valueSize={18}\n                        className={classes.infoCard}\n                        onEdit={() => setSwitchSelectTarget(\"public\")}\n                    />\n                </Grid>\n                <Grid xs={2} item>\n                    <InfoCard\n                        label={\"readonly\"}\n                        value={model.folder?.readonly}\n                        valueSize={18}\n                        className={classes.infoCard}\n                        onEdit={() => setSwitchSelectTarget(\"readonly\")}\n                    />\n                </Grid>\n                <Grid xs={2} item>\n                    <InfoCard\n                        label={\"writable\"}\n                        value={model.folder?.writable}\n                        valueSize={18}\n                        className={classes.infoCard}\n                        onEdit={() => setSwitchSelectTarget(\"writable\")}\n                    />\n                </Grid>\n            </Grid>\n            <Grid className={classes.grid} container spacing={4}>\n                <Grid xs={12} sm={6} xl={4} item>\n\n                    <UserListCard\n                        users={model.folder?.validateUsers}\n                        title={\"valid user\"}\n                        actions={\n                            <>\n                                <Button onClick={() => {\n                                    setPickUserExcept((model.folder?.validateUsers ?? []).map(it => it.name))\n                                    setPickUpUserMode(\"valid user\")\n                                }}>\n                                    add user\n                                </Button>\n                            </>\n                        }\n                        onRemove={(name) => {\n                            model.update({\n                                validUsers: model.folder?.validateUsers.map(it => it.name).filter(it => it !== name)\n                            })\n                        }}\n                    />\n                </Grid>\n                <Grid xs={12} sm={6} xl={4} item>\n                    <UserListCard\n                        users={model.folder?.writeableUsers}\n                        title={\"write list\"}\n                        onRemove={(name) => {\n                            model.update({\n                                writeList: model.folder?.writeableUsers.map(it => it.name).filter(it => it !== name)\n                            })\n                        }}\n                        actions={\n                            <>\n                                <Button onClick={() => {\n                                    setPickUserExcept((model.folder?.writeableUsers ?? []).map(it => it.name))\n                                    setPickUpUserMode(\"write list\")\n                                }}>\n                                    add user\n                                </Button>\n                            </>\n                        }\n                    />\n                </Grid>\n            </Grid>\n\n\n        </div>\n    )\n}\n\nexport default ShareFolderDetail\n","/home/aren/Desktop/ypw/src/pages/ShareFolderDetail/style.ts",[],"/home/aren/Desktop/ypw/src/pages/ShareFolderDetail/model.ts",[],"/home/aren/Desktop/ypw/src/components/StorageCard/index.tsx",[],"/home/aren/Desktop/ypw/src/components/StorageCard/style.ts",[],"/home/aren/Desktop/ypw/src/components/UserListCard/index.tsx",["539","540"],"import React, {ReactElement} from \"react\";\nimport {\n    Avatar,\n    Button, IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Paper\n} from \"@material-ui/core\";\nimport {Delete, Person, Remove} from \"@material-ui/icons\";\nimport useStyles from \"./style\";\n\nexport interface UserListCardPropsType {\n    users?:{uid:string,name:string}[]\n    title?:string\n    actions?:ReactElement\n    onRemove:(name:string) => void\n}\n\nconst UserListCard = ({onRemove,actions,users = [],title = \"users\"}: UserListCardPropsType): ReactElement => {\n    const classes = useStyles()\n    return (\n        <Paper>\n            <div className={classes.userListHeader}>\n                <div className={classes.usersListTitle}>\n                    { title }\n                </div>\n                {actions}\n            </div>\n            <List className={classes.userList} dense>\n                {\n                    users.map(it => {\n                        return (\n                            <ListItem key={it.uid}  className={classes.userListItem}>\n                                <ListItemAvatar>\n                                    <Avatar className={classes.userListIcon}>\n                                        <Person/>\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={it.name} secondary={it.uid}/>\n                                <ListItemSecondaryAction>\n                                    <IconButton onClick={() => onRemove(it.name)} size={\"small\"}>\n                                        <Delete/>\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n\n        </Paper>\n    )\n}\n\nexport default UserListCard\n","/home/aren/Desktop/ypw/src/components/UserListCard/style.ts",[],"/home/aren/Desktop/ypw/src/components/UserSelectDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/UserSelectDialog/style.ts",[],"/home/aren/Desktop/ypw/src/utils/values.ts",[],"/home/aren/Desktop/ypw/src/components/SwitchSelectDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/SwitchSelectDialog/style.ts",[],"/home/aren/Desktop/ypw/src/hooks/ConfirmDialog.ts",["541"],"import {useEffect, useState} from \"react\";\n\nexport interface ConfirmDialogController {\n    message?: string\n    open: boolean\n    openDialog: (option: ConfirmOption) => void\n    onClose: () => void\n    onOk?: () => void\n    title: string\n}\n\nexport interface ConfirmOption {\n    message: string\n    onOk?: () => void\n    title?: string\n}\n\nexport const useConfirmDialog = (): ConfirmDialogController => {\n    const [open, setOpen] = useState<boolean>(false)\n    const [option, setOption] = useState<ConfirmOption | undefined>()\n    const openDialog = (option: ConfirmOption) => {\n        setOption(option)\n        setOpen(true)\n    }\n    const onClose = () => {\n        setOpen(false)\n    }\n\n    return {\n        message: option?.message,\n        open: open,\n        openDialog,\n        onClose,\n        onOk: option?.onOk,\n        title: option?.title ?? \"Confirm\"\n    }\n}\n","/home/aren/Desktop/ypw/src/pages/Groups/index.tsx",["542","543"],"import {ReactElement, useEffect} from \"react\";\nimport ListPage from \"../../components/ListPage\";\nimport {Avatar, Button, List, ListItem, ListItemAvatar, ListItemText} from \"@material-ui/core\";\nimport {Add, Group} from \"@material-ui/icons\";\nimport useUserGroupsModel from \"./model\";\nimport NewGroupDialog from \"../../components/NewGroupDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport useStyles from \"./style\";\nimport {useHistory} from \"react-router-dom\";\n\nexport interface GroupsPagePropsType {\n\n}\n\nconst GroupsPage = ({}: GroupsPagePropsType): ReactElement => {\n    const classes = useStyles()\n    const model = useUserGroupsModel()\n    const layoutModel = useLayoutModel()\n    const history = useHistory()\n    useEffect(() => {\n        model.fetchData()\n    }, [])\n    return (\n        <ListPage\n            title={\"Groups\"}\n            actions={\n                <>\n                    <Button startIcon={<Add/>} variant={\"contained\"}\n                            onClick={() => layoutModel.switchDialog(\"newgroup\")}>\n                        New user group\n                    </Button>\n                </>\n            }\n        >\n            <div>\n                <NewGroupDialog\n                    onOk={(name) => {\n                        model.create(name)\n                        layoutModel.switchDialog(\"newgroup\")\n                    }}\n                    onCancel={() => layoutModel.switchDialog(\"newgroup\")}\n                    open={layoutModel.getDialogOpen(\"newgroup\")}\n                />\n                <List>\n                    {\n                        model.groups.map(group => {\n                            return (\n                                <ListItem key={group.gid} button onClick={() => {history.push(`/group/${group.name}/info`)}}>\n                                    <ListItemAvatar>\n                                        <Avatar className={classes.avatar}>\n                                            <Group/>\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText primary={group.name} secondary={group.type}/>\n                                </ListItem>\n                            )\n                        })\n\n                    }\n                </List>\n            </div>\n\n\n        </ListPage>\n    )\n}\n\nexport default GroupsPage\n","/home/aren/Desktop/ypw/src/pages/Groups/model.ts",[],"/home/aren/Desktop/ypw/src/components/NewGroupDialog/index.tsx",[],"/home/aren/Desktop/ypw/src/components/NewGroupDialog/style.ts",[],"/home/aren/Desktop/ypw/src/pages/Groups/style.ts",[],"/home/aren/Desktop/ypw/src/pages/GroupDetail/index.tsx",["544","545","546"],"import {ReactElement, useEffect} from \"react\";\nimport useStyles from \"./style\";\nimport useGroupDetailModel from \"./model\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {Button, Paper, Typography} from \"@material-ui/core\";\nimport UserListCard from \"../../components/UserListCard\";\nimport UserSelectDialog from \"../../components/UserSelectDialog\";\nimport useLayoutModel from \"../../model/layout\";\nimport {Delete} from \"@material-ui/icons\";\n\nexport interface GroupDetailPagePropsType {\n\n}\n\nconst GroupDetailPage = ({}: GroupDetailPagePropsType): ReactElement => {\n    const {name}: any = useParams()\n    const classes = useStyles()\n    const model = useGroupDetailModel()\n    const layoutModel = useLayoutModel()\n    const history = useHistory()\n    useEffect(() => {\n        model.setGroupName(name)\n    }, [])\n    return (\n        <div className={classes.root}>\n            <div className={classes.header}>\n                <Typography variant={\"h4\"} className={classes.title}>\n                    {model.groupDetail?.name ?? \"\"}\n                </Typography>\n                <Button\n                    variant={\"contained\"}\n                    startIcon={<Delete/>}\n                    onClick={() => {\n                        layoutModel.showConfirmDialog({\n                            title: \"Remove confirm\",\n                            message:\"confirm remove\",\n                            onOk:async () => {\n                                await model.remove()\n                                history.replace(\"/groups\")\n                            }\n                        })\n                    }}\n                >\n                    Remove\n                </Button>\n            </div>\n\n            <UserSelectDialog\n                onCancel={() => layoutModel.switchDialog(\"group/addUser\")}\n                onOk={(username) => {\n                    layoutModel.switchDialog(\"group/addUser\")\n                    model.addUser([username])\n                }}\n                except={(model.groupDetail?.users ?? []).map(it => it.name)}\n                open={layoutModel.getDialogOpen(\"group/addUser\")}\n            />\n            <UserListCard\n                onRemove={(username) => {\n                    model.removeUser([username])\n                }}\n                className={classes.userList}\n                users={\n                    model.groupDetail?.users ?? []\n                }\n                actions={<Button onClick={() => layoutModel.switchDialog(\"group/addUser\")}>Add user</Button>}\n            />\n        </div>\n    )\n}\n\nexport default GroupDetailPage\n","/home/aren/Desktop/ypw/src/pages/GroupDetail/style.ts",[],"/home/aren/Desktop/ypw/src/pages/GroupDetail/model.ts",["547"],"import {createModel} from \"hox\";\nimport {useEffect, useState} from \"react\";\nimport {addUserToUserGroup, fetchGroupDetail, removeUserFromUserGroup, UserGroupDetail} from \"../../api/users\";\nimport {strict} from \"assert\";\nimport {hexToRgb} from \"@material-ui/core\";\n\nconst GroupDetailModel = () => {\n    const [groupDetail,setGroupDetail]  = useState<UserGroupDetail | undefined>()\n    const [groupName,setGroupName] = useState<string | undefined>()\n\n    const fetchData = async (name:string) => {\n        const detail = await fetchGroupDetail(name)\n        setGroupDetail(detail)\n    }\n    const removeUser = async (users:string[]) => {\n        if (groupName) {\n            await removeUserFromUserGroup(groupName,users)\n            await fetchData(groupName)\n        }\n    }\n    const addUser = async (users:string[]) => {\n        if (groupName) {\n            await addUserToUserGroup(groupName,users)\n            await fetchData(groupName)\n        }\n    }\n    useEffect(() => {\n        if (groupName) {\n            fetchData(groupName)\n        }\n    },[groupName])\n    return {\n        groupDetail,setGroupName,addUser,removeUser\n    }\n}\nconst useGroupDetailModel = createModel(GroupDetailModel)\nexport default useGroupDetailModel\n",{"ruleId":"548","replacedBy":"549"},{"ruleId":"550","replacedBy":"551"},{"ruleId":"552","severity":1,"message":"553","line":6,"column":8,"nodeType":"554","messageId":"555","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"556","line":11,"column":7,"nodeType":"554","messageId":"555","endLine":11,"endColumn":18},{"ruleId":"552","severity":1,"message":"557","line":1,"column":16,"nodeType":"554","messageId":"555","endLine":1,"endColumn":25},{"ruleId":"552","severity":1,"message":"558","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":19},{"ruleId":"559","severity":1,"message":"560","line":16,"column":34,"nodeType":"561","messageId":"562","endLine":16,"endColumn":55},{"ruleId":"552","severity":1,"message":"563","line":5,"column":22,"nodeType":"554","messageId":"555","endLine":5,"endColumn":28},{"ruleId":"552","severity":1,"message":"564","line":8,"column":8,"nodeType":"554","messageId":"555","endLine":8,"endColumn":14},{"ruleId":"559","severity":1,"message":"560","line":15,"column":22,"nodeType":"561","messageId":"562","endLine":15,"endColumn":46},{"ruleId":"565","severity":1,"message":"566","line":21,"column":8,"nodeType":"567","endLine":21,"endColumn":10,"suggestions":"568"},{"ruleId":"552","severity":1,"message":"569","line":16,"column":5,"nodeType":"554","messageId":"555","endLine":16,"endColumn":10},{"ruleId":"552","severity":1,"message":"570","line":19,"column":5,"nodeType":"554","messageId":"555","endLine":19,"endColumn":10},{"ruleId":"552","severity":1,"message":"571","line":20,"column":5,"nodeType":"554","messageId":"555","endLine":20,"endColumn":14},{"ruleId":"559","severity":1,"message":"560","line":46,"column":39,"nodeType":"561","messageId":"562","endLine":46,"endColumn":65},{"ruleId":"559","severity":1,"message":"560","line":23,"column":20,"nodeType":"561","messageId":"562","endLine":23,"endColumn":42},{"ruleId":"565","severity":1,"message":"572","line":31,"column":8,"nodeType":"567","endLine":31,"endColumn":10,"suggestions":"573"},{"ruleId":"552","severity":1,"message":"570","line":4,"column":18,"nodeType":"554","messageId":"555","endLine":4,"endColumn":23},{"ruleId":"559","severity":1,"message":"560","line":11,"column":20,"nodeType":"561","messageId":"562","endLine":11,"endColumn":42},{"ruleId":"565","severity":1,"message":"566","line":16,"column":7,"nodeType":"567","endLine":16,"endColumn":9,"suggestions":"574"},{"ruleId":"552","severity":1,"message":"575","line":5,"column":13,"nodeType":"554","messageId":"555","endLine":5,"endColumn":19},{"ruleId":"552","severity":1,"message":"564","line":18,"column":8,"nodeType":"554","messageId":"555","endLine":18,"endColumn":14},{"ruleId":"559","severity":1,"message":"560","line":25,"column":22,"nodeType":"561","messageId":"562","endLine":25,"endColumn":46},{"ruleId":"565","severity":1,"message":"576","line":31,"column":8,"nodeType":"567","endLine":31,"endColumn":10,"suggestions":"577"},{"ruleId":"578","severity":1,"message":"579","line":1,"column":1,"nodeType":"580","messageId":"562","fix":"581"},{"ruleId":"559","severity":1,"message":"560","line":11,"column":20,"nodeType":"561","messageId":"562","endLine":11,"endColumn":42},{"ruleId":"565","severity":1,"message":"566","line":16,"column":7,"nodeType":"567","endLine":16,"endColumn":9,"suggestions":"582"},{"ruleId":"559","severity":1,"message":"560","line":34,"column":18,"nodeType":"561","messageId":"562","endLine":34,"endColumn":38},{"ruleId":"565","severity":1,"message":"583","line":41,"column":7,"nodeType":"567","endLine":41,"endColumn":9,"suggestions":"584"},{"ruleId":"552","severity":1,"message":"585","line":24,"column":11,"nodeType":"554","messageId":"555","endLine":24,"endColumn":30},{"ruleId":"552","severity":1,"message":"586","line":1,"column":9,"nodeType":"554","messageId":"555","endLine":1,"endColumn":20},{"ruleId":"552","severity":1,"message":"557","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":18},{"ruleId":"552","severity":1,"message":"557","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":18},{"ruleId":"552","severity":1,"message":"557","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":18},{"ruleId":"552","severity":1,"message":"557","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":18},{"ruleId":"552","severity":1,"message":"587","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":19},{"ruleId":"552","severity":1,"message":"557","line":3,"column":9,"nodeType":"554","messageId":"555","endLine":3,"endColumn":18},{"ruleId":"552","severity":1,"message":"588","line":4,"column":9,"nodeType":"554","messageId":"555","endLine":4,"endColumn":21},{"ruleId":"552","severity":1,"message":"589","line":3,"column":9,"nodeType":"554","messageId":"555","endLine":3,"endColumn":25},{"ruleId":"552","severity":1,"message":"558","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":19},{"ruleId":"552","severity":1,"message":"553","line":12,"column":5,"nodeType":"554","messageId":"555","endLine":12,"endColumn":15},{"ruleId":"552","severity":1,"message":"590","line":14,"column":9,"nodeType":"554","messageId":"555","endLine":14,"endColumn":13},{"ruleId":"591","severity":1,"message":"592","line":85,"column":25,"nodeType":"593","endLine":85,"endColumn":89},{"ruleId":"552","severity":1,"message":"594","line":16,"column":9,"nodeType":"554","messageId":"555","endLine":16,"endColumn":13},{"ruleId":"595","severity":1,"message":"596","line":67,"column":27,"nodeType":"597","messageId":"562","endLine":67,"endColumn":29},{"ruleId":"552","severity":1,"message":"598","line":11,"column":9,"nodeType":"554","messageId":"555","endLine":11,"endColumn":12},{"ruleId":"552","severity":1,"message":"599","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":27},{"ruleId":"552","severity":1,"message":"600","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":18},{"ruleId":"552","severity":1,"message":"553","line":3,"column":45,"nodeType":"554","messageId":"555","endLine":3,"endColumn":55},{"ruleId":"565","severity":1,"message":"601","line":27,"column":7,"nodeType":"567","endLine":27,"endColumn":29,"suggestions":"602"},{"ruleId":"552","severity":1,"message":"557","line":1,"column":16,"nodeType":"554","messageId":"555","endLine":1,"endColumn":25},{"ruleId":"552","severity":1,"message":"603","line":1,"column":27,"nodeType":"554","messageId":"555","endLine":1,"endColumn":35},{"ruleId":"552","severity":1,"message":"603","line":1,"column":27,"nodeType":"554","messageId":"555","endLine":1,"endColumn":35},{"ruleId":"552","severity":1,"message":"604","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":19},{"ruleId":"552","severity":1,"message":"594","line":2,"column":21,"nodeType":"554","messageId":"555","endLine":2,"endColumn":25},{"ruleId":"552","severity":1,"message":"605","line":16,"column":11,"nodeType":"554","messageId":"555","endLine":16,"endColumn":21},{"ruleId":"565","severity":1,"message":"601","line":21,"column":7,"nodeType":"567","endLine":21,"endColumn":29,"suggestions":"606"},{"ruleId":"548","replacedBy":"607"},{"ruleId":"550","replacedBy":"608"},{"ruleId":"559","severity":1,"message":"560","line":24,"column":22,"nodeType":"561","messageId":"562","endLine":24,"endColumn":46},{"ruleId":"552","severity":1,"message":"609","line":7,"column":9,"nodeType":"554","messageId":"555","endLine":7,"endColumn":29},{"ruleId":"559","severity":1,"message":"560","line":13,"column":20,"nodeType":"561","messageId":"562","endLine":13,"endColumn":42},{"ruleId":"552","severity":1,"message":"610","line":2,"column":9,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"611","line":2,"column":22,"nodeType":"554","messageId":"555","endLine":2,"endColumn":28},{"ruleId":"552","severity":1,"message":"612","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":14},{"ruleId":"552","severity":1,"message":"613","line":6,"column":17,"nodeType":"554","messageId":"555","endLine":6,"endColumn":27},{"ruleId":"552","severity":1,"message":"563","line":7,"column":9,"nodeType":"554","messageId":"555","endLine":7,"endColumn":15},{"ruleId":"559","severity":1,"message":"560","line":15,"column":21,"nodeType":"561","messageId":"562","endLine":15,"endColumn":44},{"ruleId":"552","severity":1,"message":"609","line":4,"column":9,"nodeType":"554","messageId":"555","endLine":4,"endColumn":29},{"ruleId":"559","severity":1,"message":"560","line":14,"column":22,"nodeType":"561","messageId":"562","endLine":14,"endColumn":46},{"ruleId":"559","severity":1,"message":"560","line":11,"column":24,"nodeType":"561","messageId":"562","endLine":11,"endColumn":50},{"ruleId":"559","severity":1,"message":"560","line":20,"column":28,"nodeType":"561","messageId":"562","endLine":20,"endColumn":58},{"ruleId":"565","severity":1,"message":"614","line":27,"column":8,"nodeType":"567","endLine":27,"endColumn":10,"suggestions":"615"},{"ruleId":"595","severity":1,"message":"596","line":35,"column":28,"nodeType":"597","messageId":"562","endLine":35,"endColumn":30},{"ruleId":"595","severity":1,"message":"596","line":39,"column":35,"nodeType":"597","messageId":"562","endLine":39,"endColumn":37},{"ruleId":"552","severity":1,"message":"616","line":4,"column":5,"nodeType":"554","messageId":"555","endLine":4,"endColumn":11},{"ruleId":"552","severity":1,"message":"617","line":12,"column":25,"nodeType":"554","messageId":"555","endLine":12,"endColumn":31},{"ruleId":"552","severity":1,"message":"557","line":1,"column":9,"nodeType":"554","messageId":"555","endLine":1,"endColumn":18},{"ruleId":"559","severity":1,"message":"560","line":15,"column":21,"nodeType":"561","messageId":"562","endLine":15,"endColumn":44},{"ruleId":"565","severity":1,"message":"566","line":22,"column":8,"nodeType":"567","endLine":22,"endColumn":10,"suggestions":"618"},{"ruleId":"552","severity":1,"message":"619","line":5,"column":17,"nodeType":"554","messageId":"555","endLine":5,"endColumn":22},{"ruleId":"559","severity":1,"message":"560","line":15,"column":26,"nodeType":"561","messageId":"562","endLine":15,"endColumn":54},{"ruleId":"565","severity":1,"message":"614","line":23,"column":8,"nodeType":"567","endLine":23,"endColumn":10,"suggestions":"620"},{"ruleId":"552","severity":1,"message":"621","line":4,"column":9,"nodeType":"554","messageId":"555","endLine":4,"endColumn":15},"no-native-reassign",["622"],"no-negated-in-lhs",["623"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'drawerWidth' is assigned a value but never used.","'useEffect' is defined but never used.","'makeStyles' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Person' is defined but never used.","'layout' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'model'. Either include it or remove the dependency array.","ArrayExpression",["624"],"'Inbox' is defined but never used.","'Store' is defined but never used.","'SwapCalls' is defined but never used.","React Hook useEffect has a missing dependency: 'usersModel'. Either include it or remove the dependency array.",["625"],["626"],"'Dialog' is defined but never used.","React Hook useEffect has a missing dependency: 'storageModel'. Either include it or remove the dependency array.",["627"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"628","text":"629"},["630"],"React Hook useEffect has a missing dependency: 'zfsModel'. Either include it or remove the dependency array.",["631"],"'removeFromAutoStart' is assigned a value but never used.","'getUserList' is defined but never used.","'fetchDisks' is defined but never used.","'useClickAway' is defined but never used.","'UserListResponse' is defined but never used.","'Apps' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Part' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Dns' is defined but never used.","'ApplicationConfig' is defined but never used.","'UsersForm' is defined but never used.","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["632"],"'useState' is defined but never used.","'fetchParts' is defined but never used.","'partsModel' is assigned a value but never used.",["633"],["622"],["623"],"'useLocalStorageState' is defined but never used.","'blue' is defined but never used.","'indigo' is defined but never used.","'AppBar' is defined but never used.","'ButtonBase' is defined but never used.","React Hook useEffect has missing dependencies: 'model' and 'name'. Either include them or remove the dependency array.",["634"],"'Button' is defined but never used.","'Remove' is defined but never used.",["635"],"'Paper' is defined but never used.",["636"],"'strict' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"637","fix":"641"},{"desc":"642","fix":"643"},[-1,0],"",{"desc":"637","fix":"644"},{"desc":"645","fix":"646"},{"desc":"647","fix":"648"},{"desc":"649","fix":"650"},{"desc":"651","fix":"652"},{"desc":"637","fix":"653"},{"desc":"651","fix":"654"},"Update the dependencies array to be: [model]",{"range":"655","text":"656"},"Update the dependencies array to be: [usersModel]",{"range":"657","text":"658"},{"range":"659","text":"656"},"Update the dependencies array to be: [storageModel]",{"range":"660","text":"661"},{"range":"662","text":"656"},"Update the dependencies array to be: [zfsModel]",{"range":"663","text":"664"},"Update the dependencies array to be: [disksController.list, onChange]",{"range":"665","text":"666"},"Update the dependencies array to be: [onChange, usersController.list]",{"range":"667","text":"668"},"Update the dependencies array to be: [model, name]",{"range":"669","text":"670"},{"range":"671","text":"656"},{"range":"672","text":"670"},[735,737],"[model]",[934,936],"[usersModel]",[471,473],[891,893],"[storageModel]",[470,472],[1112,1114],"[zfsModel]",[1042,1064],"[disksController.list, onChange]",[738,760],"[onChange, usersController.list]",[1085,1087],"[model, name]",[779,781],[823,825]]